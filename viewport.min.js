/*!
 * pixi-viewport - v5.1.0
 * Compiled Tue, 09 Apr 2024 15:05:21 UTC
 *
 * pixi-viewport is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 *
 * Copyright 2019-2020, David Figatner, All Rights Reserved
 */
(this.PIXI = this.PIXI || {}),
  (function (t, e) {
    "object" == typeof exports && "undefined" != typeof module
      ? e(
          exports,
          require("@pixi/math"),
          require("@pixi/display"),
          require("@pixi/ticker")
        )
      : "function" == typeof define && define.amd
      ? define(["exports", "@pixi/math", "@pixi/display", "@pixi/ticker"], e)
      : e(
          ((t =
            "undefined" != typeof globalThis
              ? globalThis
              : t || self).pixi_viewport = {}),
          t.PIXI,
          t.PIXI,
          t.PIXI
        );
  })(this, function (t, e, i, s) {
    "use strict";
    class n {
      constructor(t) {
        (this.parent = t), (this.paused = !1);
      }
      destroy() {}
      down(t) {
        return !1;
      }
      move(t) {
        return !1;
      }
      up(t) {
        return !1;
      }
      wheel(t) {
        return !1;
      }
      update(t) {}
      resize() {}
      reset() {}
      pause() {
        this.paused = !0;
      }
      resume() {
        this.paused = !1;
      }
    }
    var h =
      "undefined" != typeof globalThis
        ? globalThis
        : "undefined" != typeof window
        ? window
        : "undefined" != typeof global
        ? global
        : "undefined" != typeof self
        ? self
        : {};
    var o,
      r,
      a =
        ((function (t, e) {
          (function () {
            var e;
            (function (e) {
              t.exports = e;
            })(
              (e = {
                linear: function (t, e, i, s) {
                  return (i * t) / s + e;
                },
                easeInQuad: function (t, e, i, s) {
                  return i * (t /= s) * t + e;
                },
                easeOutQuad: function (t, e, i, s) {
                  return -i * (t /= s) * (t - 2) + e;
                },
                easeInOutQuad: function (t, e, i, s) {
                  return (t /= s / 2) < 1
                    ? (i / 2) * t * t + e
                    : (-i / 2) * (--t * (t - 2) - 1) + e;
                },
                easeInCubic: function (t, e, i, s) {
                  return i * (t /= s) * t * t + e;
                },
                easeOutCubic: function (t, e, i, s) {
                  return i * ((t = t / s - 1) * t * t + 1) + e;
                },
                easeInOutCubic: function (t, e, i, s) {
                  return (t /= s / 2) < 1
                    ? (i / 2) * t * t * t + e
                    : (i / 2) * ((t -= 2) * t * t + 2) + e;
                },
                easeInQuart: function (t, e, i, s) {
                  return i * (t /= s) * t * t * t + e;
                },
                easeOutQuart: function (t, e, i, s) {
                  return -i * ((t = t / s - 1) * t * t * t - 1) + e;
                },
                easeInOutQuart: function (t, e, i, s) {
                  return (t /= s / 2) < 1
                    ? (i / 2) * t * t * t * t + e
                    : (-i / 2) * ((t -= 2) * t * t * t - 2) + e;
                },
                easeInQuint: function (t, e, i, s) {
                  return i * (t /= s) * t * t * t * t + e;
                },
                easeOutQuint: function (t, e, i, s) {
                  return i * ((t = t / s - 1) * t * t * t * t + 1) + e;
                },
                easeInOutQuint: function (t, e, i, s) {
                  return (t /= s / 2) < 1
                    ? (i / 2) * t * t * t * t * t + e
                    : (i / 2) * ((t -= 2) * t * t * t * t + 2) + e;
                },
                easeInSine: function (t, e, i, s) {
                  return -i * Math.cos((t / s) * (Math.PI / 2)) + i + e;
                },
                easeOutSine: function (t, e, i, s) {
                  return i * Math.sin((t / s) * (Math.PI / 2)) + e;
                },
                easeInOutSine: function (t, e, i, s) {
                  return (-i / 2) * (Math.cos((Math.PI * t) / s) - 1) + e;
                },
                easeInExpo: function (t, e, i, s) {
                  return 0 === t ? e : i * Math.pow(2, 10 * (t / s - 1)) + e;
                },
                easeOutExpo: function (t, e, i, s) {
                  return t === s
                    ? e + i
                    : i * (1 - Math.pow(2, (-10 * t) / s)) + e;
                },
                easeInOutExpo: function (t, e, i, s) {
                  return (t /= s / 2) < 1
                    ? (i / 2) * Math.pow(2, 10 * (t - 1)) + e
                    : (i / 2) * (2 - Math.pow(2, -10 * --t)) + e;
                },
                easeInCirc: function (t, e, i, s) {
                  return -i * (Math.sqrt(1 - (t /= s) * t) - 1) + e;
                },
                easeOutCirc: function (t, e, i, s) {
                  return i * Math.sqrt(1 - (t = t / s - 1) * t) + e;
                },
                easeInOutCirc: function (t, e, i, s) {
                  return (t /= s / 2) < 1
                    ? (-i / 2) * (Math.sqrt(1 - t * t) - 1) + e
                    : (i / 2) * (Math.sqrt(1 - (t -= 2) * t) + 1) + e;
                },
                easeInElastic: function (t, e, i, s) {
                  var n, h, o;
                  return (
                    (o = 1.70158),
                    0 === t || (t /= s),
                    (h = 0) || (h = 0.3 * s),
                    (n = i) < Math.abs(i)
                      ? ((n = i), (o = h / 4))
                      : (o = (h / (2 * Math.PI)) * Math.asin(i / n)),
                    -n *
                      Math.pow(2, 10 * (t -= 1)) *
                      Math.sin(((t * s - o) * (2 * Math.PI)) / h) +
                      e
                  );
                },
                easeOutElastic: function (t, e, i, s) {
                  var n, h, o;
                  return (
                    (o = 1.70158),
                    0 === t || (t /= s),
                    (h = 0) || (h = 0.3 * s),
                    (n = i) < Math.abs(i)
                      ? ((n = i), (o = h / 4))
                      : (o = (h / (2 * Math.PI)) * Math.asin(i / n)),
                    n *
                      Math.pow(2, -10 * t) *
                      Math.sin(((t * s - o) * (2 * Math.PI)) / h) +
                      i +
                      e
                  );
                },
                easeInOutElastic: function (t, e, i, s) {
                  var n, h, o;
                  return (
                    (o = 1.70158),
                    0 === t || (t /= s / 2),
                    (h = 0) || (h = s * (0.3 * 1.5)),
                    (n = i) < Math.abs(i)
                      ? ((n = i), (o = h / 4))
                      : (o = (h / (2 * Math.PI)) * Math.asin(i / n)),
                    t < 1
                      ? n *
                          Math.pow(2, 10 * (t -= 1)) *
                          Math.sin(((t * s - o) * (2 * Math.PI)) / h) *
                          -0.5 +
                        e
                      : n *
                          Math.pow(2, -10 * (t -= 1)) *
                          Math.sin(((t * s - o) * (2 * Math.PI)) / h) *
                          0.5 +
                        i +
                        e
                  );
                },
                easeInBack: function (t, e, i, s, n) {
                  return (
                    void 0 === n && (n = 1.70158),
                    i * (t /= s) * t * ((n + 1) * t - n) + e
                  );
                },
                easeOutBack: function (t, e, i, s, n) {
                  return (
                    void 0 === n && (n = 1.70158),
                    i * ((t = t / s - 1) * t * ((n + 1) * t + n) + 1) + e
                  );
                },
                easeInOutBack: function (t, e, i, s, n) {
                  return (
                    void 0 === n && (n = 1.70158),
                    (t /= s / 2) < 1
                      ? (i / 2) * (t * t * ((1 + (n *= 1.525)) * t - n)) + e
                      : (i / 2) *
                          ((t -= 2) * t * ((1 + (n *= 1.525)) * t + n) + 2) +
                        e
                  );
                },
                easeInBounce: function (t, i, s, n) {
                  return s - e.easeOutBounce(n - t, 0, s, n) + i;
                },
                easeOutBounce: function (t, e, i, s) {
                  return (t /= s) < 1 / 2.75
                    ? i * (7.5625 * t * t) + e
                    : t < 2 / 2.75
                    ? i * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + e
                    : t < 2.5 / 2.75
                    ? i * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + e
                    : i * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + e;
                },
                easeInOutBounce: function (t, i, s, n) {
                  return t < n / 2
                    ? 0.5 * e.easeInBounce(2 * t, 0, s, n) + i
                    : 0.5 * e.easeOutBounce(2 * t - n, 0, s, n) + 0.5 * s + i;
                },
              })
            );
          }).call(h);
        })(
          (r = {
            path: o,
            exports: {},
            require: function (t, e) {
              return (function () {
                throw new Error(
                  "Dynamic requires are not currently supported by @rollup/plugin-commonjs"
                );
              })(null == e && r.path);
            },
          }),
          r.exports
        ),
        r.exports);
    function p(t, e) {
      return t
        ? "function" == typeof t
          ? t
          : "string" == typeof t
          ? a[t]
          : void 0
        : a[e];
    }
    const l = {
      removeOnInterrupt: !1,
      ease: "linear",
      time: 1e3,
    };
    class c extends n {
      __init() {
        this.startWidth = null;
      }
      __init2() {
        this.startHeight = null;
      }
      __init3() {
        this.deltaWidth = null;
      }
      __init4() {
        this.deltaHeight = null;
      }
      __init5() {
        this.width = null;
      }
      __init6() {
        this.height = null;
      }
      __init7() {
        this.time = 0;
      }
      constructor(t, e = {}) {
        super(t),
          c.prototype.__init.call(this),
          c.prototype.__init2.call(this),
          c.prototype.__init3.call(this),
          c.prototype.__init4.call(this),
          c.prototype.__init5.call(this),
          c.prototype.__init6.call(this),
          c.prototype.__init7.call(this),
          (this.options = Object.assign({}, l, e)),
          (this.options.ease = p(this.options.ease)),
          this.setupPosition(),
          this.setupZoom(),
          (this.time = 0);
      }
      setupPosition() {
        void 0 !== this.options.position
          ? ((this.startX = this.parent.center.x),
            (this.startY = this.parent.center.y),
            (this.deltaX = this.options.position.x - this.parent.center.x),
            (this.deltaY = this.options.position.y - this.parent.center.y),
            (this.keepCenter = !1))
          : (this.keepCenter = !0);
      }
      setupZoom() {
        (this.width = null),
          (this.height = null),
          void 0 !== this.options.scale
            ? (this.width = this.parent.screenWidth / this.options.scale)
            : void 0 !== this.options.scaleX || void 0 !== this.options.scaleY
            ? (void 0 !== this.options.scaleX &&
                (this.width = this.parent.screenWidth / this.options.scaleX),
              void 0 !== this.options.scaleY &&
                (this.height = this.parent.screenHeight / this.options.scaleY))
            : (void 0 !== this.options.width &&
                (this.width = this.options.width),
              void 0 !== this.options.height &&
                (this.height = this.options.height)),
          null !== this.width &&
            ((this.startWidth = this.parent.screenWidthInWorldPixels),
            (this.deltaWidth = this.width - this.startWidth)),
          null !== this.height &&
            ((this.startHeight = this.parent.screenHeightInWorldPixels),
            (this.deltaHeight = this.height - this.startHeight));
      }
      down() {
        return (
          this.options.removeOnInterrupt &&
            this.parent.plugins.remove("animate"),
          !1
        );
      }
      complete() {
        this.parent.plugins.remove("animate"),
          null !== this.width &&
            this.parent.fitWidth(
              this.width,
              this.keepCenter,
              null === this.height
            ),
          null !== this.height &&
            this.parent.fitHeight(
              this.height,
              this.keepCenter,
              null === this.width
            ),
          !this.keepCenter &&
            this.options.position &&
            this.parent.moveCenter(this.options.position),
          this.parent.emit("animate-end", this.parent),
          this.options.callbackOnComplete &&
            this.options.callbackOnComplete(this.parent);
      }
      update(t) {
        if (this.paused) return;
        this.time += t;
        const i = new e.Point(this.parent.scale.x, this.parent.scale.y);
        if (this.time >= this.options.time) {
          const t = this.parent.width,
            e = this.parent.height;
          this.complete(),
            (t === this.parent.width && e === this.parent.height) ||
              this.parent.emit("zoomed", {
                viewport: this.parent,
                original: i,
                type: "animate",
              });
        } else {
          const t = this.options.ease(this.time, 0, 1, this.options.time);
          if (null !== this.width) {
            const e = this.startWidth,
              i = this.deltaWidth;
            this.parent.fitWidth(
              e + i * t,
              this.keepCenter,
              null === this.height
            );
          }
          if (null !== this.height) {
            const e = this.startHeight,
              i = this.deltaHeight;
            this.parent.fitHeight(
              e + i * t,
              this.keepCenter,
              null === this.width
            );
          }
          if (
            (null === this.width
              ? (this.parent.scale.x = this.parent.scale.y)
              : null === this.height &&
                (this.parent.scale.y = this.parent.scale.x),
            !this.keepCenter)
          ) {
            const i = this.startX,
              s = this.startY,
              n = this.deltaX,
              h = this.deltaY,
              o = new e.Point(this.parent.x, this.parent.y);
            this.parent.moveCenter(i + n * t, s + h * t),
              this.parent.emit("moved", {
                viewport: this.parent,
                original: o,
                type: "animate",
              });
          }
          (this.width || this.height) &&
            this.parent.emit("zoomed", {
              viewport: this.parent,
              original: i,
              type: "animate",
            });
        }
      }
    }
    function d(t) {
      let e = void 0,
        i = t[0],
        s = 1;
      for (; s < t.length; ) {
        const n = t[s],
          h = t[s + 1];
        if (
          ((s += 2),
          ("optionalAccess" === n || "optionalCall" === n) && null == i)
        )
          return;
        "access" === n || "optionalAccess" === n
          ? ((e = i), (i = h(i)))
          : ("call" !== n && "optionalCall" !== n) ||
            ((i = h((...t) => i.call(e, ...t))), (e = void 0));
      }
      return i;
    }
    const u = {
      sides: "all",
      friction: 0.5,
      time: 150,
      ease: "easeInOutSine",
      underflow: "center",
      bounceBox: null,
    };
    class m extends n {
      constructor(t, e = {}) {
        super(t),
          (this.options = Object.assign({}, u, e)),
          (this.ease = p(this.options.ease, "easeInOutSine")),
          this.options.sides
            ? "all" === this.options.sides
              ? (this.top = this.bottom = this.left = this.right = !0)
              : "horizontal" === this.options.sides
              ? ((this.right = this.left = !0), (this.top = this.bottom = !1))
              : "vertical" === this.options.sides
              ? ((this.left = this.right = !1), (this.top = this.bottom = !0))
              : ((this.top = -1 !== this.options.sides.indexOf("top")),
                (this.bottom = -1 !== this.options.sides.indexOf("bottom")),
                (this.left = -1 !== this.options.sides.indexOf("left")),
                (this.right = -1 !== this.options.sides.indexOf("right")))
            : (this.left = this.top = this.right = this.bottom = !1);
        const i = this.options.underflow.toLowerCase();
        "center" === i
          ? ((this.underflowX = 0), (this.underflowY = 0))
          : ((this.underflowX =
              -1 !== i.indexOf("left")
                ? -1
                : -1 !== i.indexOf("right")
                ? 1
                : 0),
            (this.underflowY =
              -1 !== i.indexOf("top")
                ? -1
                : -1 !== i.indexOf("bottom")
                ? 1
                : 0)),
          this.reset();
      }
      isActive() {
        return null !== this.toX || null !== this.toY;
      }
      down() {
        return (this.toX = this.toY = null), !1;
      }
      up() {
        return this.bounce(), !1;
      }
      update(t) {
        if (!this.paused) {
          if ((this.bounce(), this.toX)) {
            const e = this.toX;
            (e.time += t),
              this.parent.emit("moved", {
                viewport: this.parent,
                type: "bounce-x",
              }),
              e.time >= this.options.time
                ? ((this.parent.x = e.end),
                  (this.toX = null),
                  this.parent.emit("bounce-x-end", this.parent))
                : (this.parent.x = this.ease(
                    e.time,
                    e.start,
                    e.delta,
                    this.options.time
                  ));
          }
          if (this.toY) {
            const e = this.toY;
            (e.time += t),
              this.parent.emit("moved", {
                viewport: this.parent,
                type: "bounce-y",
              }),
              e.time >= this.options.time
                ? ((this.parent.y = e.end),
                  (this.toY = null),
                  this.parent.emit("bounce-y-end", this.parent))
                : (this.parent.y = this.ease(
                    e.time,
                    e.start,
                    e.delta,
                    this.options.time
                  ));
          }
        }
      }
      calcUnderflowX() {
        let t;
        switch (this.underflowX) {
          case -1:
            t = 0;
            break;
          case 1:
            t = this.parent.screenWidth - this.parent.screenWorldWidth;
            break;
          default:
            t = (this.parent.screenWidth - this.parent.screenWorldWidth) / 2;
        }
        return t;
      }
      calcUnderflowY() {
        let t;
        switch (this.underflowY) {
          case -1:
            t = 0;
            break;
          case 1:
            t = this.parent.screenHeight - this.parent.screenWorldHeight;
            break;
          default:
            t = (this.parent.screenHeight - this.parent.screenWorldHeight) / 2;
        }
        return t;
      }
      oob() {
        const t = this.options.bounceBox;
        if (t) {
          const i = void 0 === t.x ? 0 : t.x,
            s = void 0 === t.y ? 0 : t.y,
            n = void 0 === t.width ? this.parent.worldWidth : t.width,
            h = void 0 === t.height ? this.parent.worldHeight : t.height;
          return {
            left: this.parent.left < i,
            right: this.parent.right > n,
            top: this.parent.top < s,
            bottom: this.parent.bottom > h,
            topLeft: new e.Point(
              i * this.parent.scale.x,
              s * this.parent.scale.y
            ),
            bottomRight: new e.Point(
              n * this.parent.scale.x - this.parent.screenWidth,
              h * this.parent.scale.y - this.parent.screenHeight
            ),
          };
        }
        return {
          left: this.parent.left < 0,
          right: this.parent.right > this.parent.worldWidth,
          top: this.parent.top < 0,
          bottom: this.parent.bottom > this.parent.worldHeight,
          topLeft: new e.Point(0, 0),
          bottomRight: new e.Point(
            this.parent.worldWidth * this.parent.scale.x -
              this.parent.screenWidth,
            this.parent.worldHeight * this.parent.scale.y -
              this.parent.screenHeight
          ),
        };
      }
      bounce() {
        if (this.paused) return;
        let t,
          e = this.parent.plugins.get("decelerate", !0);
        e &&
          (e.x || e.y) &&
          ((e.x &&
            e.percentChangeX ===
              d([
                e,
                "access",
                (t) => t.options,
                "optionalAccess",
                (t) => t.friction,
              ])) ||
            (e.y &&
              e.percentChangeY ===
                d([
                  e,
                  "access",
                  (t) => t.options,
                  "optionalAccess",
                  (t) => t.friction,
                ]))) &&
          ((((t = this.oob()).left && this.left) || (t.right && this.right)) &&
            (e.percentChangeX = this.options.friction),
          ((t.top && this.top) || (t.bottom && this.bottom)) &&
            (e.percentChangeY = this.options.friction));
        const i = this.parent.plugins.get("drag", !0) || {},
          s = this.parent.plugins.get("pinch", !0) || {};
        if (
          ((e = e || {}),
          !(
            d([i, "optionalAccess", (t) => t.active]) ||
            d([s, "optionalAccess", (t) => t.active]) ||
            (this.toX && this.toY) ||
            (e.x && e.y)
          ))
        ) {
          const i = (t = t || this.oob()).topLeft,
            s = t.bottomRight;
          if (!this.toX && !e.x) {
            let e = null;
            t.left && this.left
              ? (e =
                  this.parent.screenWorldWidth < this.parent.screenWidth
                    ? this.calcUnderflowX()
                    : -i.x)
              : t.right &&
                this.right &&
                (e =
                  this.parent.screenWorldWidth < this.parent.screenWidth
                    ? this.calcUnderflowX()
                    : -s.x),
              null !== e &&
                this.parent.x !== e &&
                ((this.toX = {
                  time: 0,
                  start: this.parent.x,
                  delta: e - this.parent.x,
                  end: e,
                }),
                this.parent.emit("bounce-x-start", this.parent));
          }
          if (!this.toY && !e.y) {
            let e = null;
            t.top && this.top
              ? (e =
                  this.parent.screenWorldHeight < this.parent.screenHeight
                    ? this.calcUnderflowY()
                    : -i.y)
              : t.bottom &&
                this.bottom &&
                (e =
                  this.parent.screenWorldHeight < this.parent.screenHeight
                    ? this.calcUnderflowY()
                    : -s.y),
              null !== e &&
                this.parent.y !== e &&
                ((this.toY = {
                  time: 0,
                  start: this.parent.y,
                  delta: e - this.parent.y,
                  end: e,
                }),
                this.parent.emit("bounce-y-start", this.parent));
          }
        }
      }
      reset() {
        (this.toX = this.toY = null), this.bounce();
      }
    }
    const g = {
      left: !1,
      right: !1,
      top: !1,
      bottom: !1,
      direction: null,
      underflow: "center",
    };
    class w extends n {
      constructor(t, e = {}) {
        super(t),
          (this.options = Object.assign({}, g, e)),
          this.options.direction &&
            ((this.options.left =
              "x" === this.options.direction ||
              "all" === this.options.direction ||
              null),
            (this.options.right =
              "x" === this.options.direction ||
              "all" === this.options.direction ||
              null),
            (this.options.top =
              "y" === this.options.direction ||
              "all" === this.options.direction ||
              null),
            (this.options.bottom =
              "y" === this.options.direction ||
              "all" === this.options.direction ||
              null)),
          this.parseUnderflow(),
          (this.last = {
            x: null,
            y: null,
            scaleX: null,
            scaleY: null,
          }),
          this.update();
      }
      parseUnderflow() {
        const t = this.options.underflow.toLowerCase();
        "none" === t
          ? (this.noUnderflow = !0)
          : "center" === t
          ? ((this.underflowX = this.underflowY = 0), (this.noUnderflow = !1))
          : ((this.underflowX =
              -1 !== t.indexOf("left")
                ? -1
                : -1 !== t.indexOf("right")
                ? 1
                : 0),
            (this.underflowY =
              -1 !== t.indexOf("top")
                ? -1
                : -1 !== t.indexOf("bottom")
                ? 1
                : 0),
            (this.noUnderflow = !1));
      }
      move() {
        return this.update(), !1;
      }
      update() {
        if (this.paused) return;
        if (
          this.parent.x === this.last.x &&
          this.parent.y === this.last.y &&
          this.parent.scale.x === this.last.scaleX &&
          this.parent.scale.y === this.last.scaleY
        )
          return;
        const t = {
            x: this.parent.x,
            y: this.parent.y,
          },
          e = this.parent.plugins.decelerate || {};
        if (null !== this.options.left || null !== this.options.right) {
          let i = !1;
          if (
            !this.noUnderflow &&
            this.parent.screenWorldWidth < this.parent.screenWidth
          )
            switch (this.underflowX) {
              case -1:
                0 !== this.parent.x && ((this.parent.x = 0), (i = !0));
                break;
              case 1:
                this.parent.x !==
                  this.parent.screenWidth - this.parent.screenWorldWidth &&
                  ((this.parent.x =
                    this.parent.screenWidth - this.parent.screenWorldWidth),
                  (i = !0));
                break;
              default:
                this.parent.x !==
                  (this.parent.screenWidth - this.parent.screenWorldWidth) /
                    2 &&
                  ((this.parent.x =
                    (this.parent.screenWidth - this.parent.screenWorldWidth) /
                    2),
                  (i = !0));
            }
          else
            null !== this.options.left &&
              this.parent.left <
                (!0 === this.options.left ? 0 : this.options.left) &&
              ((this.parent.x =
                -(!0 === this.options.left ? 0 : this.options.left) *
                this.parent.scale.x),
              (e.x = 0),
              (i = !0)),
              null !== this.options.right &&
                this.parent.right >
                  (!0 === this.options.right
                    ? this.parent.worldWidth
                    : this.options.right) &&
                ((this.parent.x =
                  -(!0 === this.options.right
                    ? this.parent.worldWidth
                    : this.options.right) *
                    this.parent.scale.x +
                  this.parent.screenWidth),
                (e.x = 0),
                (i = !0));
          i &&
            this.parent.emit("moved", {
              viewport: this.parent,
              original: t,
              type: "clamp-x",
            });
        }
        if (null !== this.options.top || null !== this.options.bottom) {
          let i = !1;
          if (
            !this.noUnderflow &&
            this.parent.screenWorldHeight < this.parent.screenHeight
          )
            switch (this.underflowY) {
              case -1:
                0 !== this.parent.y && ((this.parent.y = 0), (i = !0));
                break;
              case 1:
                this.parent.y !==
                  this.parent.screenHeight - this.parent.screenWorldHeight &&
                  ((this.parent.y =
                    this.parent.screenHeight - this.parent.screenWorldHeight),
                  (i = !0));
                break;
              default:
                this.parent.y !==
                  (this.parent.screenHeight - this.parent.screenWorldHeight) /
                    2 &&
                  ((this.parent.y =
                    (this.parent.screenHeight - this.parent.screenWorldHeight) /
                    2),
                  (i = !0));
            }
          else
            null !== this.options.top &&
              this.parent.top <
                (!0 === this.options.top ? 0 : this.options.top) &&
              ((this.parent.y =
                -(!0 === this.options.top ? 0 : this.options.top) *
                this.parent.scale.y),
              (e.y = 0),
              (i = !0)),
              null !== this.options.bottom &&
                this.parent.bottom >
                  (!0 === this.options.bottom
                    ? this.parent.worldHeight
                    : this.options.bottom) &&
                ((this.parent.y =
                  -(!0 === this.options.bottom
                    ? this.parent.worldHeight
                    : this.options.bottom) *
                    this.parent.scale.y +
                  this.parent.screenHeight),
                (e.y = 0),
                (i = !0));
          i &&
            this.parent.emit("moved", {
              viewport: this.parent,
              original: t,
              type: "clamp-y",
            });
        }
        (this.last.x = this.parent.x),
          (this.last.y = this.parent.y),
          (this.last.scaleX = this.parent.scale.x),
          (this.last.scaleY = this.parent.scale.y);
      }
      reset() {
        this.update();
      }
    }
    const y = {
      minWidth: null,
      minHeight: null,
      maxWidth: null,
      maxHeight: null,
      minScale: null,
      maxScale: null,
    };
    class f extends n {
      constructor(t, e = {}) {
        super(t), (this.options = Object.assign({}, y, e)), this.clamp();
      }
      resize() {
        this.clamp();
      }
      clamp() {
        if (!this.paused)
          if (
            this.options.minWidth ||
            this.options.minHeight ||
            this.options.maxWidth ||
            this.options.maxHeight
          ) {
            let t = this.parent.worldScreenWidth,
              e = this.parent.worldScreenHeight;
            if (null !== this.options.minWidth && t < this.options.minWidth) {
              const i = this.parent.scale.x;
              this.parent.fitWidth(this.options.minWidth, !1, !1, !0),
                (this.parent.scale.y *= this.parent.scale.x / i),
                (t = this.parent.worldScreenWidth),
                (e = this.parent.worldScreenHeight),
                this.parent.emit("zoomed", {
                  viewport: this.parent,
                  type: "clamp-zoom",
                });
            }
            if (null !== this.options.maxWidth && t > this.options.maxWidth) {
              const i = this.parent.scale.x;
              this.parent.fitWidth(this.options.maxWidth, !1, !1, !0),
                (this.parent.scale.y *= this.parent.scale.x / i),
                (t = this.parent.worldScreenWidth),
                (e = this.parent.worldScreenHeight),
                this.parent.emit("zoomed", {
                  viewport: this.parent,
                  type: "clamp-zoom",
                });
            }
            if (null !== this.options.minHeight && e < this.options.minHeight) {
              const i = this.parent.scale.y;
              this.parent.fitHeight(this.options.minHeight, !1, !1, !0),
                (this.parent.scale.x *= this.parent.scale.y / i),
                (t = this.parent.worldScreenWidth),
                (e = this.parent.worldScreenHeight),
                this.parent.emit("zoomed", {
                  viewport: this.parent,
                  type: "clamp-zoom",
                });
            }
            if (null !== this.options.maxHeight && e > this.options.maxHeight) {
              const t = this.parent.scale.y;
              this.parent.fitHeight(this.options.maxHeight, !1, !1, !0),
                (this.parent.scale.x *= this.parent.scale.y / t),
                this.parent.emit("zoomed", {
                  viewport: this.parent,
                  type: "clamp-zoom",
                });
            }
          } else if (this.options.minScale || this.options.maxScale) {
            const t = {
                x: null,
                y: null,
              },
              e = {
                x: null,
                y: null,
              };
            if ("number" == typeof this.options.minScale)
              (t.x = this.options.minScale), (t.y = this.options.minScale);
            else if (null !== this.options.minScale) {
              const e = this.options.minScale;
              (t.x = void 0 === e.x ? null : e.x),
                (t.y = void 0 === e.y ? null : e.y);
            }
            if ("number" == typeof this.options.maxScale)
              (e.x = this.options.maxScale), (e.y = this.options.maxScale);
            else if (null !== this.options.maxScale) {
              const t = this.options.maxScale;
              (e.x = void 0 === t.x ? null : t.x),
                (e.y = void 0 === t.y ? null : t.y);
            }
            let i = this.parent.scale.x,
              s = this.parent.scale.y;
            null !== t.x && i < t.x && (i = t.x),
              null !== e.x && i > e.x && (i = e.x),
              null !== t.y && s < t.y && (s = t.y),
              null !== e.y && s > e.y && (s = e.y),
              (i === this.parent.scale.x && s === this.parent.scale.y) ||
                (this.parent.scale.set(i, s),
                this.parent.emit("zoomed", {
                  viewport: this.parent,
                  type: "clamp-zoom",
                }));
          }
      }
      reset() {
        this.clamp();
      }
    }
    const x = {
        friction: 0.98,
        bounce: 0.8,
        minSpeed: 0.01,
      },
      v = 16;
    class W extends n {
      constructor(t, e = {}) {
        super(t),
          (this.options = Object.assign({}, x, e)),
          (this.saved = []),
          (this.timeSinceRelease = 0),
          this.reset(),
          this.parent.on("moved", (t) => this.moved(t));
      }
      down() {
        return (this.saved = []), (this.x = this.y = null), !1;
      }
      isActive() {
        return !(!this.x && !this.y);
      }
      move() {
        if (this.paused) return !1;
        const t = this.parent.input.count();
        return (
          (1 === t || (t > 1 && !this.parent.plugins.get("pinch", !0))) &&
            (this.saved.push({
              x: this.parent.x,
              y: this.parent.y,
              time: performance.now(),
            }),
            this.saved.length > 60 && this.saved.splice(0, 30)),
          !1
        );
      }
      moved(t) {
        if (this.saved.length) {
          const e = this.saved[this.saved.length - 1];
          "clamp-x" === t.type
            ? e.x === t.original.x && (e.x = this.parent.x)
            : "clamp-y" === t.type &&
              e.y === t.original.y &&
              (e.y = this.parent.y);
        }
      }
      up() {
        if (0 === this.parent.input.count() && this.saved.length) {
          const t = performance.now();
          for (const e of this.saved)
            if (e.time >= t - 100) {
              const i = t - e.time;
              (this.x = (this.parent.x - e.x) / i),
                (this.y = (this.parent.y - e.y) / i),
                (this.percentChangeX = this.percentChangeY =
                  this.options.friction),
                (this.timeSinceRelease = 0);
              break;
            }
        }
        return !1;
      }
      activate(t) {
        void 0 !== (t = t || {}).x &&
          ((this.x = t.x), (this.percentChangeX = this.options.friction)),
          void 0 !== t.y &&
            ((this.y = t.y), (this.percentChangeY = this.options.friction));
      }
      update(t) {
        if (this.paused) return;
        const e = this.x || this.y,
          i = this.timeSinceRelease,
          s = this.timeSinceRelease + t;
        if (this.x) {
          const e = this.percentChangeX,
            n = Math.log(e);
          (this.parent.x +=
            ((this.x * v) / n) * (Math.pow(e, s / v) - Math.pow(e, i / v))),
            (this.x *= Math.pow(this.percentChangeX, t / v));
        }
        if (this.y) {
          const e = this.percentChangeY,
            n = Math.log(e);
          (this.parent.y +=
            ((this.y * v) / n) * (Math.pow(e, s / v) - Math.pow(e, i / v))),
            (this.y *= Math.pow(this.percentChangeY, t / v));
        }
        (this.timeSinceRelease += t),
          this.x && this.y
            ? Math.abs(this.x) < this.options.minSpeed &&
              Math.abs(this.y) < this.options.minSpeed &&
              ((this.x = 0), (this.y = 0))
            : (Math.abs(this.x || 0) < this.options.minSpeed && (this.x = 0),
              Math.abs(this.y || 0) < this.options.minSpeed && (this.y = 0)),
          e &&
            this.parent.emit("moved", {
              viewport: this.parent,
              type: "decelerate",
            });
      }
      reset() {
        this.x = this.y = null;
      }
    }
    const b = {
      direction: "all",
      pressDrag: !0,
      wheel: !0,
      wheelScroll: 1,
      reverse: !1,
      clampWheel: !1,
      underflow: "center",
      factor: 1,
      mouseButtons: "all",
      keyToPress: null,
      ignoreKeyToPressOnTouch: !1,
      lineHeight: 20,
      wheelSwapAxes: !1,
    };
    class H extends n {
      __init() {
        this.windowEventHandlers = new Array();
      }
      constructor(t, e = {}) {
        super(t),
          H.prototype.__init.call(this),
          (this.options = Object.assign({}, b, e)),
          (this.moved = !1),
          (this.reverse = this.options.reverse ? 1 : -1),
          (this.xDirection =
            !this.options.direction ||
            "all" === this.options.direction ||
            "x" === this.options.direction),
          (this.yDirection =
            !this.options.direction ||
            "all" === this.options.direction ||
            "y" === this.options.direction),
          (this.keyIsPressed = !1),
          this.parseUnderflow(),
          this.mouseButtons(this.options.mouseButtons),
          this.options.keyToPress &&
            this.handleKeyPresses(this.options.keyToPress);
      }
      handleKeyPresses(t) {
        this.addWindowEventHandler("keyup", (e) => {
          t.includes(e.code) && (this.keyIsPressed = !1);
        }),
          this.addWindowEventHandler("keydown", (e) => {
            t.includes(e.code) && (this.keyIsPressed = !0);
          });
      }
      addWindowEventHandler(t, e) {
        window.addEventListener(t, e),
          this.windowEventHandlers.push({
            event: t,
            handler: e,
          });
      }
      destroy() {
        this.windowEventHandlers.forEach(({ event: t, handler: e }) => {
          window.removeEventListener(t, e);
        });
      }
      mouseButtons(t) {
        this.mouse =
          t && "all" !== t
            ? [
                -1 !== t.indexOf("left"),
                -1 !== t.indexOf("middle"),
                -1 !== t.indexOf("right"),
              ]
            : [!0, !0, !0];
      }
      parseUnderflow() {
        const t = this.options.underflow.toLowerCase();
        "center" === t
          ? ((this.underflowX = 0), (this.underflowY = 0))
          : (t.includes("left")
              ? (this.underflowX = -1)
              : t.includes("right")
              ? (this.underflowX = 1)
              : (this.underflowX = 0),
            t.includes("top")
              ? (this.underflowY = -1)
              : t.includes("bottom")
              ? (this.underflowY = 1)
              : (this.underflowY = 0));
      }
      checkButtons(t) {
        const e = "mouse" === t.data.pointerType,
          i = this.parent.input.count();
        return !(
          !(1 === i || (i > 1 && !this.parent.plugins.get("pinch", !0))) ||
          (e && !this.mouse[t.data.button])
        );
      }
      checkKeyPress(t) {
        return (
          !this.options.keyToPress ||
          this.keyIsPressed ||
          (this.options.ignoreKeyToPressOnTouch &&
            "touch" === t.data.pointerType)
        );
      }
      down(t) {
        return (
          !(this.paused || !this.options.pressDrag) &&
          (this.checkButtons(t) && this.checkKeyPress(t)
            ? ((this.last = {
                x: t.data.global.x,
                y: t.data.global.y,
              }),
              (this.current = t.data.pointerId),
              !0)
            : ((this.last = null), !1))
        );
      }
      get active() {
        return this.moved;
      }
      move(t) {
        if (this.paused || !this.options.pressDrag) return !1;
        if (this.last && this.current === t.data.pointerId) {
          const i = t.data.global.x,
            s = t.data.global.y,
            n = this.parent.input.count();
          if (1 === n || (n > 1 && !this.parent.plugins.get("pinch", !0))) {
            const n = i - this.last.x,
              h = s - this.last.y;
            if (
              this.moved ||
              (this.xDirection && this.parent.input.checkThreshold(n)) ||
              (this.yDirection && this.parent.input.checkThreshold(h))
            ) {
              const n = {
                x: i,
                y: s,
              };
              return (
                this.xDirection &&
                  (this.parent.x += (n.x - this.last.x) * this.options.factor),
                this.yDirection &&
                  (this.parent.y += (n.y - this.last.y) * this.options.factor),
                (this.last = n),
                this.moved ||
                  this.parent.emit("drag-start", {
                    event: t,
                    screen: new e.Point(this.last.x, this.last.y),
                    world: this.parent.toWorld(
                      new e.Point(this.last.x, this.last.y)
                    ),
                    viewport: this.parent,
                  }),
                (this.moved = !0),
                this.parent.emit("moved", {
                  viewport: this.parent,
                  type: "drag",
                }),
                !0
              );
            }
          } else this.moved = !1;
        }
        return !1;
      }
      up(t) {
        if (this.paused) return !1;
        const i = this.parent.input.touches;
        if (1 === i.length) {
          const t = i[0];
          return (
            t.last &&
              ((this.last = {
                x: t.last.x,
                y: t.last.y,
              }),
              (this.current = t.id)),
            (this.moved = !1),
            !0
          );
        }
        if (this.last && this.moved) {
          const i = new e.Point(this.last.x, this.last.y);
          return (
            this.parent.emit("drag-end", {
              event: t,
              screen: i,
              world: this.parent.toWorld(i),
              viewport: this.parent,
            }),
            (this.last = null),
            (this.moved = !1),
            !0
          );
        }
        return !1;
      }
      wheel(t) {
        if (this.paused) return !1;
        if (this.options.wheel) {
          const e = this.parent.plugins.get("wheel", !0);
          if (!e || (!e.options.wheelZoom && !t.ctrlKey)) {
            const e = t.deltaMode ? this.options.lineHeight : 1,
              i = [t.deltaX, t.deltaY],
              [s, n] = this.options.wheelSwapAxes ? i.reverse() : i;
            return (
              this.xDirection &&
                (this.parent.x +=
                  s * e * this.options.wheelScroll * this.reverse),
              this.yDirection &&
                (this.parent.y +=
                  n * e * this.options.wheelScroll * this.reverse),
              this.options.clampWheel && this.clamp(),
              this.parent.emit("wheel-scroll", this.parent),
              this.parent.emit("moved", {
                viewport: this.parent,
                type: "wheel",
              }),
              this.parent.options.passiveWheel || t.preventDefault(),
              this.parent.options.stopPropagation && t.stopPropagation(),
              !0
            );
          }
        }
        return !1;
      }
      resume() {
        (this.last = null), (this.paused = !1);
      }
      clamp() {
        const t = this.parent.plugins.get("decelerate", !0) || {};
        if ("y" !== this.options.clampWheel)
          if (this.parent.screenWorldWidth < this.parent.screenWidth)
            switch (this.underflowX) {
              case -1:
                this.parent.x = 0;
                break;
              case 1:
                this.parent.x =
                  this.parent.screenWidth - this.parent.screenWorldWidth;
                break;
              default:
                this.parent.x =
                  (this.parent.screenWidth - this.parent.screenWorldWidth) / 2;
            }
          else
            this.parent.left < 0
              ? ((this.parent.x = 0), (t.x = 0))
              : this.parent.right > this.parent.worldWidth &&
                ((this.parent.x =
                  -this.parent.worldWidth * this.parent.scale.x +
                  this.parent.screenWidth),
                (t.x = 0));
        if ("x" !== this.options.clampWheel)
          if (this.parent.screenWorldHeight < this.parent.screenHeight)
            switch (this.underflowY) {
              case -1:
                this.parent.y = 0;
                break;
              case 1:
                this.parent.y =
                  this.parent.screenHeight - this.parent.screenWorldHeight;
                break;
              default:
                this.parent.y =
                  (this.parent.screenHeight - this.parent.screenWorldHeight) /
                  2;
            }
          else
            this.parent.top < 0 && ((this.parent.y = 0), (t.y = 0)),
              this.parent.bottom > this.parent.worldHeight &&
                ((this.parent.y =
                  -this.parent.worldHeight * this.parent.scale.y +
                  this.parent.screenHeight),
                (t.y = 0));
      }
    }
    const M = {
      speed: 0,
      acceleration: null,
      radius: null,
    };
    class S extends n {
      constructor(t, e, i = {}) {
        super(t),
          (this.target = e),
          (this.options = Object.assign({}, M, i)),
          (this.velocity = {
            x: 0,
            y: 0,
          });
      }
      update(t) {
        if (this.paused) return;
        const e = this.parent.center;
        let i = this.target.x,
          s = this.target.y;
        if (this.options.radius) {
          if (
            !(
              Math.sqrt(
                Math.pow(this.target.y - e.y, 2) +
                  Math.pow(this.target.x - e.x, 2)
              ) > this.options.radius
            )
          )
            return;
          {
            const t = Math.atan2(this.target.y - e.y, this.target.x - e.x);
            (i = this.target.x - Math.cos(t) * this.options.radius),
              (s = this.target.y - Math.sin(t) * this.options.radius);
          }
        }
        const n = i - e.x,
          h = s - e.y;
        if (n || h)
          if (this.options.speed)
            if (this.options.acceleration) {
              const t = Math.atan2(s - e.y, i - e.x),
                o = Math.sqrt(Math.pow(n, 2) + Math.pow(h, 2));
              if (o) {
                const r =
                  (Math.pow(this.velocity.x, 2) +
                    Math.pow(this.velocity.y, 2)) /
                  (2 * this.options.acceleration);
                this.velocity =
                  o > r
                    ? {
                        x: Math.min(
                          this.velocity.x +
                            (this.options.acceleration, this.options.speed)
                        ),
                        y: Math.min(
                          this.velocity.y +
                            (this.options.acceleration, this.options.speed)
                        ),
                      }
                    : {
                        x: Math.max(
                          this.velocity.x -
                            this.options.acceleration * this.options.speed,
                          0
                        ),
                        y: Math.max(
                          this.velocity.y -
                            this.options.acceleration * this.options.speed,
                          0
                        ),
                      };
                const a = Math.cos(t) * this.velocity.x,
                  p = Math.sin(t) * this.velocity.y,
                  l = Math.abs(a) > Math.abs(n) ? i : e.x + a,
                  c = Math.abs(p) > Math.abs(h) ? s : e.y + p;
                this.parent.moveCenter(l, c),
                  this.parent.emit("moved", {
                    viewport: this.parent,
                    type: "follow",
                  });
              }
            } else {
              const t = Math.atan2(s - e.y, i - e.x),
                o = Math.cos(t) * this.options.speed,
                r = Math.sin(t) * this.options.speed,
                a = Math.abs(o) > Math.abs(n) ? i : e.x + o,
                p = Math.abs(r) > Math.abs(h) ? s : e.y + r;
              this.parent.moveCenter(a, p),
                this.parent.emit("moved", {
                  viewport: this.parent,
                  type: "follow",
                });
            }
          else
            this.parent.moveCenter(i, s),
              this.parent.emit("moved", {
                viewport: this.parent,
                type: "follow",
              });
      }
    }
    const P = {
      radius: null,
      distance: null,
      top: null,
      bottom: null,
      left: null,
      right: null,
      speed: 8,
      reverse: !1,
      noDecelerate: !1,
      linear: !1,
      allowButtons: !1,
    };
    class C extends n {
      constructor(t, e = {}) {
        super(t),
          (this.options = Object.assign({}, P, e)),
          (this.reverse = this.options.reverse ? 1 : -1),
          (this.radiusSquared =
            "number" == typeof this.options.radius
              ? Math.pow(this.options.radius, 2)
              : null),
          this.resize();
      }
      resize() {
        const t = this.options.distance;
        null !== t
          ? ((this.left = t),
            (this.top = t),
            (this.right = this.parent.screenWidth - t),
            (this.bottom = this.parent.screenHeight - t))
          : this.options.radius ||
            ((this.left = this.options.left),
            (this.top = this.options.top),
            (this.right =
              null === this.options.right
                ? null
                : this.parent.screenWidth - this.options.right),
            (this.bottom =
              null === this.options.bottom
                ? null
                : this.parent.screenHeight - this.options.bottom));
      }
      down() {
        return (
          !this.paused &&
          (this.options.allowButtons ||
            (this.horizontal = this.vertical = null),
          !1)
        );
      }
      move(t) {
        if (this.paused) return !1;
        if (
          ("mouse" !== t.data.pointerType && 1 !== t.data.identifier) ||
          (!this.options.allowButtons && 0 !== t.data.buttons)
        )
          return !1;
        const e = t.data.global.x,
          i = t.data.global.y;
        if (this.radiusSquared) {
          const t = this.parent.toScreen(this.parent.center);
          if (
            Math.pow(t.x - e, 2) + Math.pow(t.y - i, 2) >=
            this.radiusSquared
          ) {
            const s = Math.atan2(t.y - i, t.x - e);
            this.options.linear
              ? ((this.horizontal =
                  Math.round(Math.cos(s)) *
                  this.options.speed *
                  this.reverse *
                  0.06),
                (this.vertical =
                  Math.round(Math.sin(s)) *
                  this.options.speed *
                  this.reverse *
                  0.06))
              : ((this.horizontal =
                  Math.cos(s) * this.options.speed * this.reverse * 0.06),
                (this.vertical =
                  Math.sin(s) * this.options.speed * this.reverse * 0.06));
          } else
            this.horizontal && this.decelerateHorizontal(),
              this.vertical && this.decelerateVertical(),
              (this.horizontal = this.vertical = 0);
        } else null !== this.left && e < this.left ? (this.horizontal = Number(this.reverse) * this.options.speed * 0.06) : null !== this.right && e > this.right ? (this.horizontal = -1 * this.reverse * this.options.speed * 0.06) : (this.decelerateHorizontal(), (this.horizontal = 0)), null !== this.top && i < this.top ? (this.vertical = Number(this.reverse) * this.options.speed * 0.06) : null !== this.bottom && i > this.bottom ? (this.vertical = -1 * this.reverse * this.options.speed * 0.06) : (this.decelerateVertical(), (this.vertical = 0));
        return !1;
      }
      decelerateHorizontal() {
        const t = this.parent.plugins.get("decelerate", !0);
        this.horizontal &&
          t &&
          !this.options.noDecelerate &&
          t.activate({
            x:
              (this.horizontal * this.options.speed * this.reverse) /
              (1e3 / 60),
          });
      }
      decelerateVertical() {
        const t = this.parent.plugins.get("decelerate", !0);
        this.vertical &&
          t &&
          !this.options.noDecelerate &&
          t.activate({
            y: (this.vertical * this.options.speed * this.reverse) / (1e3 / 60),
          });
      }
      up() {
        return (
          !this.paused &&
          (this.horizontal && this.decelerateHorizontal(),
          this.vertical && this.decelerateVertical(),
          (this.horizontal = this.vertical = null),
          !1)
        );
      }
      update() {
        if (!this.paused && (this.horizontal || this.vertical)) {
          const t = this.parent.center;
          this.horizontal && (t.x += this.horizontal * this.options.speed),
            this.vertical && (t.y += this.vertical * this.options.speed),
            this.parent.moveCenter(t),
            this.parent.emit("moved", {
              viewport: this.parent,
              type: "mouse-edges",
            });
        }
      }
    }
    const I = {
      noDrag: !1,
      percent: 1,
      center: null,
      factor: 1,
      axis: "all",
    };
    class O extends n {
      __init() {
        this.active = !1;
      }
      __init2() {
        this.pinching = !1;
      }
      __init3() {
        this.moved = !1;
      }
      constructor(t, e = {}) {
        super(t),
          O.prototype.__init.call(this),
          O.prototype.__init2.call(this),
          O.prototype.__init3.call(this),
          (this.options = Object.assign({}, I, e));
      }
      down() {
        return this.parent.input.count() >= 2 && ((this.active = !0), !0);
      }
      isAxisX() {
        return ["all", "x"].includes(this.options.axis);
      }
      isAxisY() {
        return ["all", "y"].includes(this.options.axis);
      }
      move(t) {
        if (this.paused || !this.active) return !1;
        const e = t.data.global.x,
          i = t.data.global.y,
          s = this.parent.input.touches;
        if (s.length >= 2) {
          const n = s[0],
            h = s[1],
            o =
              n.last && h.last
                ? Math.sqrt(
                    Math.pow(h.last.x - n.last.x, 2) +
                      Math.pow(h.last.y - n.last.y, 2)
                  )
                : null;
          if (
            (n.id === t.data.pointerId
              ? (n.last = {
                  x: e,
                  y: i,
                  data: t.data,
                })
              : h.id === t.data.pointerId &&
                (h.last = {
                  x: e,
                  y: i,
                  data: t.data,
                }),
            o)
          ) {
            let t;
            const e = {
              x: n.last.x + (h.last.x - n.last.x) / 2,
              y: n.last.y + (h.last.y - n.last.y) / 2,
            };
            this.options.center || (t = this.parent.toLocal(e));
            let i = Math.sqrt(
              Math.pow(h.last.x - n.last.x, 2) +
                Math.pow(h.last.y - n.last.y, 2)
            );
            const s =
              (1 - o / (i = 0 === i ? (i = 1e-10) : i)) *
              this.options.percent *
              (this.isAxisX() ? this.parent.scale.x : this.parent.scale.y);
            this.isAxisX() && (this.parent.scale.x += s),
              this.isAxisY() && (this.parent.scale.y += s),
              this.parent.emit("zoomed", {
                viewport: this.parent,
                type: "pinch",
                center: e,
              });
            const r = this.parent.plugins.get("clamp-zoom", !0);
            if ((r && r.clamp(), this.options.center))
              this.parent.moveCenter(this.options.center);
            else {
              const i = this.parent.toGlobal(t);
              (this.parent.x += (e.x - i.x) * this.options.factor),
                (this.parent.y += (e.y - i.y) * this.options.factor),
                this.parent.emit("moved", {
                  viewport: this.parent,
                  type: "pinch",
                });
            }
            !this.options.noDrag &&
              this.lastCenter &&
              ((this.parent.x +=
                (e.x - this.lastCenter.x) * this.options.factor),
              (this.parent.y +=
                (e.y - this.lastCenter.y) * this.options.factor),
              this.parent.emit("moved", {
                viewport: this.parent,
                type: "pinch",
              })),
              (this.lastCenter = e),
              (this.moved = !0);
          } else
            this.pinching ||
              (this.parent.emit("pinch-start", this.parent),
              (this.pinching = !0));
          return !0;
        }
        return !1;
      }
      up() {
        return (
          !!(this.pinching && this.parent.input.touches.length <= 1) &&
          ((this.active = !1),
          (this.lastCenter = null),
          (this.pinching = !1),
          (this.moved = !1),
          this.parent.emit("pinch-end", this.parent),
          !0)
        );
      }
    }
    const k = {
      topLeft: !1,
      friction: 0.8,
      time: 1e3,
      ease: "easeInOutSine",
      interrupt: !0,
      removeOnComplete: !1,
      removeOnInterrupt: !1,
      forceStart: !1,
    };
    class z extends n {
      constructor(t, e, i, s = {}) {
        super(t),
          (this.options = Object.assign({}, k, s)),
          (this.ease = p(s.ease, "easeInOutSine")),
          (this.x = e),
          (this.y = i),
          this.options.forceStart && this.snapStart();
      }
      snapStart() {
        (this.percent = 0),
          (this.snapping = {
            time: 0,
          });
        const t = this.options.topLeft
          ? this.parent.corner
          : this.parent.center;
        (this.deltaX = this.x - t.x),
          (this.deltaY = this.y - t.y),
          (this.startX = t.x),
          (this.startY = t.y),
          this.parent.emit("snap-start", this.parent);
      }
      wheel() {
        return (
          this.options.removeOnInterrupt && this.parent.plugins.remove("snap"),
          !1
        );
      }
      down() {
        return (
          this.options.removeOnInterrupt
            ? this.parent.plugins.remove("snap")
            : this.options.interrupt && (this.snapping = null),
          !1
        );
      }
      up() {
        if (0 === this.parent.input.count()) {
          const t = this.parent.plugins.get("decelerate", !0);
          t &&
            (t.x || t.y) &&
            (t.percentChangeX = t.percentChangeY = this.options.friction);
        }
        return !1;
      }
      update(t) {
        if (
          !(
            this.paused ||
            (this.options.interrupt && 0 !== this.parent.input.count())
          )
        )
          if (this.snapping) {
            const e = this.snapping;
            let i, s, n;
            e.time += t;
            const h = this.startX,
              o = this.startY,
              r = this.deltaX,
              a = this.deltaY;
            if (e.time > this.options.time) (i = !0), (s = h + r), (n = o + a);
            else {
              const t = this.ease(e.time, 0, 1, this.options.time);
              (s = h + r * t), (n = o + a * t);
            }
            this.options.topLeft
              ? this.parent.moveCorner(s, n)
              : this.parent.moveCenter(s, n),
              this.parent.emit("moved", {
                viewport: this.parent,
                type: "snap",
              }),
              i &&
                (this.options.removeOnComplete &&
                  this.parent.plugins.remove("snap"),
                this.parent.emit("snap-end", this.parent),
                (this.snapping = null));
          } else {
            const t = this.options.topLeft
              ? this.parent.corner
              : this.parent.center;
            (t.x === this.x && t.y === this.y) || this.snapStart();
          }
      }
    }
    const _ = {
      width: 0,
      height: 0,
      time: 1e3,
      ease: "easeInOutSine",
      center: null,
      interrupt: !0,
      removeOnComplete: !1,
      removeOnInterrupt: !1,
      forceStart: !1,
      noMove: !1,
    };
    class X extends n {
      constructor(t, e = {}) {
        super(t),
          (this.options = Object.assign({}, _, e)),
          (this.ease = p(this.options.ease)),
          (this.xIndependent = !1),
          (this.yIndependent = !1),
          (this.xScale = 0),
          (this.yScale = 0),
          this.options.width > 0 &&
            ((this.xScale = t.screenWidth / this.options.width),
            (this.xIndependent = !0)),
          this.options.height > 0 &&
            ((this.yScale = t.screenHeight / this.options.height),
            (this.yIndependent = !0)),
          (this.xScale = this.xIndependent ? this.xScale : this.yScale),
          (this.yScale = this.yIndependent ? this.yScale : this.xScale),
          0 === this.options.time
            ? ((t.container.scale.x = this.xScale),
              (t.container.scale.y = this.yScale),
              this.options.removeOnComplete &&
                this.parent.plugins.remove("snap-zoom"))
            : e.forceStart && this.createSnapping();
      }
      createSnapping() {
        const t = this.parent.worldScreenWidth,
          e = this.parent.worldScreenHeight,
          i = this.parent.screenWidth / this.xScale,
          s = this.parent.screenHeight / this.yScale;
        (this.snapping = {
          time: 0,
          startX: t,
          startY: e,
          deltaX: i - t,
          deltaY: s - e,
        }),
          this.parent.emit("snap-zoom-start", this.parent);
      }
      resize() {
        (this.snapping = null),
          this.options.width > 0 &&
            (this.xScale = this.parent.screenWidth / this.options.width),
          this.options.height > 0 &&
            (this.yScale = this.parent.screenHeight / this.options.height),
          (this.xScale = this.xIndependent ? this.xScale : this.yScale),
          (this.yScale = this.yIndependent ? this.yScale : this.xScale);
      }
      wheel() {
        return (
          this.options.removeOnInterrupt &&
            this.parent.plugins.remove("snap-zoom"),
          !1
        );
      }
      down() {
        return (
          this.options.removeOnInterrupt
            ? this.parent.plugins.remove("snap-zoom")
            : this.options.interrupt && (this.snapping = null),
          !1
        );
      }
      update(t) {
        if (this.paused) return;
        if (this.options.interrupt && 0 !== this.parent.input.count()) return;
        let e;
        if (
          (this.options.center ||
            this.options.noMove ||
            (e = this.parent.center),
          this.snapping)
        ) {
          if (this.snapping) {
            const i = this.snapping;
            if (((i.time += t), i.time >= this.options.time))
              this.parent.scale.set(this.xScale, this.yScale),
                this.options.removeOnComplete &&
                  this.parent.plugins.remove("snap-zoom"),
                this.parent.emit("snap-zoom-end", this.parent),
                (this.snapping = null);
            else {
              const t = this.snapping,
                e = this.ease(t.time, t.startX, t.deltaX, this.options.time),
                i = this.ease(t.time, t.startY, t.deltaY, this.options.time);
              (this.parent.scale.x = this.parent.screenWidth / e),
                (this.parent.scale.y = this.parent.screenHeight / i);
            }
            const s = this.parent.plugins.get("clamp-zoom", !0);
            s && s.clamp(),
              this.options.noMove ||
                (this.options.center
                  ? this.parent.moveCenter(this.options.center)
                  : this.parent.moveCenter(e));
          }
        } else (this.parent.scale.x === this.xScale && this.parent.scale.y === this.yScale) || this.createSnapping();
      }
      resume() {
        (this.snapping = null), super.resume();
      }
    }
    const Y = {
      percent: 0.1,
      smooth: !1,
      interrupt: !0,
      reverse: !1,
      center: null,
      lineHeight: 20,
      axis: "all",
      keyToPress: null,
      trackpadPinch: !1,
      wheelZoom: !0,
    };
    class A extends n {
      constructor(t, e = {}) {
        super(t),
          (this.options = Object.assign({}, Y, e)),
          (this.keyIsPressed = !1),
          this.options.keyToPress &&
            this.handleKeyPresses(this.options.keyToPress);
      }
      handleKeyPresses(t) {
        window.addEventListener("keydown", (e) => {
          t.includes(e.code) && (this.keyIsPressed = !0);
        }),
          window.addEventListener("keyup", (e) => {
            t.includes(e.code) && (this.keyIsPressed = !1);
          });
      }
      checkKeyPress() {
        return !this.options.keyToPress || this.keyIsPressed;
      }
      down() {
        return this.options.interrupt && (this.smoothing = null), !1;
      }
      isAxisX() {
        return ["all", "x"].includes(this.options.axis);
      }
      isAxisY() {
        return ["all", "y"].includes(this.options.axis);
      }
      update() {
        if (this.smoothing) {
          const t = this.smoothingCenter,
            e = this.smoothing;
          let i;
          this.options.center || (i = this.parent.toLocal(t)),
            this.isAxisX() && (this.parent.scale.x += e.x),
            this.isAxisY() && (this.parent.scale.y += e.y),
            this.parent.emit("zoomed", {
              viewport: this.parent,
              type: "wheel",
            });
          const s = this.parent.plugins.get("clamp-zoom", !0);
          if ((s && s.clamp(), this.options.center))
            this.parent.moveCenter(this.options.center);
          else {
            const e = this.parent.toGlobal(i);
            (this.parent.x += t.x - e.x), (this.parent.y += t.y - e.y);
          }
          this.parent.emit("moved", {
            viewport: this.parent,
            type: "wheel",
          }),
            this.smoothingCount++,
            this.smoothingCount >= this.options.smooth &&
              (this.smoothing = null);
        }
      }
      pinch(t) {
        if (this.paused) return;
        const e = this.parent.input.getPointerPosition(t),
          i = (-t.deltaY * (t.deltaMode ? this.options.lineHeight : 1)) / 200,
          s = Math.pow(2, (1 + this.options.percent) * i);
        let n;
        this.options.center || (n = this.parent.toLocal(e)),
          this.isAxisX() && (this.parent.scale.x *= s),
          this.isAxisY() && (this.parent.scale.y *= s),
          this.parent.emit("zoomed", {
            viewport: this.parent,
            type: "wheel",
          });
        const h = this.parent.plugins.get("clamp-zoom", !0);
        if ((h && h.clamp(), this.options.center))
          this.parent.moveCenter(this.options.center);
        else {
          const t = this.parent.toGlobal(n);
          (this.parent.x += e.x - t.x), (this.parent.y += e.y - t.y);
        }
        this.parent.emit("moved", {
          viewport: this.parent,
          type: "wheel",
        }),
          this.parent.emit("wheel", {
            wheel: {
              dx: t.deltaX,
              dy: t.deltaY,
              dz: t.deltaZ,
            },
            event: t,
            viewport: this.parent,
          });
      }
      wheel(t) {
        if (this.paused) return !1;
        if (!this.checkKeyPress()) return !1;
        if (t.ctrlKey && this.options.trackpadPinch) this.pinch(t);
        else if (this.options.wheelZoom) {
          const e = this.parent.input.getPointerPosition(t),
            i =
              ((this.options.reverse ? -1 : 1) *
                -t.deltaY *
                (t.deltaMode ? this.options.lineHeight : 1)) /
              500,
            s = Math.pow(2, (1 + this.options.percent) * i);
          if (this.options.smooth) {
            const t = {
              x: this.smoothing
                ? this.smoothing.x * (this.options.smooth - this.smoothingCount)
                : 0,
              y: this.smoothing
                ? this.smoothing.y * (this.options.smooth - this.smoothingCount)
                : 0,
            };
            (this.smoothing = {
              x:
                ((this.parent.scale.x + t.x) * s - this.parent.scale.x) /
                this.options.smooth,
              y:
                ((this.parent.scale.y + t.y) * s - this.parent.scale.y) /
                this.options.smooth,
            }),
              (this.smoothingCount = 0),
              (this.smoothingCenter = e);
          } else {
            let t;
            this.options.center || (t = this.parent.toLocal(e)),
              this.isAxisX() && (this.parent.scale.x *= s),
              this.isAxisY() && (this.parent.scale.y *= s),
              this.parent.emit("zoomed", {
                viewport: this.parent,
                type: "wheel",
              });
            const i = this.parent.plugins.get("clamp-zoom", !0);
            if ((i && i.clamp(), this.options.center))
              this.parent.moveCenter(this.options.center);
            else {
              const i = this.parent.toGlobal(t);
              (this.parent.x += e.x - i.x), (this.parent.y += e.y - i.y);
            }
          }
          this.parent.emit("moved", {
            viewport: this.parent,
            type: "wheel",
          }),
            this.parent.emit("wheel", {
              wheel: {
                dx: t.deltaX,
                dy: t.deltaY,
                dz: t.deltaZ,
              },
              event: t,
              viewport: this.parent,
            });
        }
        return !this.parent.options.passiveWheel;
      }
    }
    class D {
      constructor(t) {
        (this.viewport = t), (this.touches = []), this.addListeners();
      }
      addListeners() {
        (this.viewport.interactive = !0),
          this.viewport.forceHitArea ||
            (this.viewport.hitArea = new e.Rectangle(
              0,
              0,
              this.viewport.worldWidth,
              this.viewport.worldHeight
            )),
          this.viewport.on("pointerdown", this.down, this),
          this.viewport.on("pointermove", this.move, this),
          this.viewport.on("pointerup", this.up, this),
          this.viewport.on("pointerupoutside", this.up, this),
          this.viewport.on("pointercancel", this.up, this),
          this.viewport.on("pointerout", this.up, this),
          (this.wheelFunction = (t) => this.handleWheel(t)),
          this.viewport.options.divWheel.addEventListener(
            "wheel",
            this.wheelFunction,
            {
              passive: this.viewport.options.passiveWheel,
            }
          ),
          (this.isMouseDown = !1);
      }
      destroy() {
        this.viewport.options.divWheel.removeEventListener(
          "wheel",
          this.wheelFunction
        );
      }
      down(t) {
        if (this.viewport.pause || !this.viewport.worldVisible) return;
        if (
          ("mouse" === t.data.pointerType
            ? (this.isMouseDown = !0)
            : this.get(t.data.pointerId) ||
              this.touches.push({
                id: t.data.pointerId,
                last: null,
              }),
          1 === this.count())
        ) {
          this.last = t.data.global.clone();
          const e = this.viewport.plugins.get("decelerate", !0),
            i = this.viewport.plugins.get("bounce", !0);
          (e && e.isActive()) || (i && i.isActive())
            ? (this.clickedAvailable = !1)
            : (this.clickedAvailable = !0);
        } else this.clickedAvailable = !1;
        this.viewport.plugins.down(t) &&
          this.viewport.options.stopPropagation &&
          t.stopPropagation();
      }
      clear() {
        (this.isMouseDown = !1), (this.touches = []), (this.last = null);
      }
      checkThreshold(t) {
        return Math.abs(t) >= this.viewport.threshold;
      }
      move(t) {
        if (this.viewport.pause || !this.viewport.worldVisible) return;
        const e = this.viewport.plugins.move(t);
        if (this.clickedAvailable && this.last) {
          const e = t.data.global.x - this.last.x,
            i = t.data.global.y - this.last.y;
          (this.checkThreshold(e) || this.checkThreshold(i)) &&
            (this.clickedAvailable = !1);
        }
        e && this.viewport.options.stopPropagation && t.stopPropagation();
      }
      up(t) {
        if (this.viewport.pause || !this.viewport.worldVisible) return;
        "mouse" === t.data.pointerType && (this.isMouseDown = !1),
          "mouse" !== t.data.pointerType && this.remove(t.data.pointerId);
        const e = this.viewport.plugins.up(t);
        this.clickedAvailable &&
          0 === this.count() &&
          this.last &&
          (this.viewport.emit("clicked", {
            event: t,
            screen: this.last,
            world: this.viewport.toWorld(this.last),
            viewport: this,
          }),
          (this.clickedAvailable = !1)),
          e && this.viewport.options.stopPropagation && t.stopPropagation();
      }
      getPointerPosition(t) {
        const i = new e.Point();
        if (this.viewport.options.interaction)
          this.viewport.options.interaction.mapPositionToPoint(
            i,
            t.clientX,
            t.clientY
          );
        else if (
          this.viewport.options.useDivWheelForInputManager &&
          this.viewport.options.divWheel
        ) {
          const e = this.viewport.options.divWheel.getBoundingClientRect();
          (i.x = t.clientX - e.left), (i.y = t.clientY - e.top);
        } else (i.x = t.clientX), (i.y = t.clientY);
        return i;
      }
      handleWheel(t) {
        if (this.viewport.pause || !this.viewport.worldVisible) return;
        if (
          this.viewport.options.interaction &&
          this.viewport.options.interaction.interactionDOMElement !== t.target
        )
          return;
        const e = this.viewport.toLocal(this.getPointerPosition(t));
        if (
          this.viewport.left <= e.x &&
          e.x <= this.viewport.right &&
          this.viewport.top <= e.y &&
          e.y <= this.viewport.bottom
        ) {
          this.viewport.plugins.wheel(t) &&
            !this.viewport.options.passiveWheel &&
            t.preventDefault();
        }
      }
      pause() {
        (this.touches = []), (this.isMouseDown = !1);
      }
      get(t) {
        for (const e of this.touches) if (e.id === t) return e;
        return null;
      }
      remove(t) {
        for (let e = 0; e < this.touches.length; e++)
          if (this.touches[e].id === t) return void this.touches.splice(e, 1);
      }
      count() {
        return (this.isMouseDown ? 1 : 0) + this.touches.length;
      }
    }
    function T(t) {
      let e = void 0,
        i = t[0],
        s = 1;
      for (; s < t.length; ) {
        const n = t[s],
          h = t[s + 1];
        if (
          ((s += 2),
          ("optionalAccess" === n || "optionalCall" === n) && null == i)
        )
          return;
        "access" === n || "optionalAccess" === n
          ? ((e = i), (i = h(i)))
          : ("call" !== n && "optionalCall" !== n) ||
            ((i = h((...t) => i.call(e, ...t))), (e = void 0));
      }
      return i;
    }
    const L = [
      "drag",
      "pinch",
      "wheel",
      "follow",
      "mouse-edges",
      "decelerate",
      "animate",
      "bounce",
      "snap-zoom",
      "clamp-zoom",
      "snap",
      "clamp",
    ];
    class E {
      constructor(t) {
        (this.viewport = t), (this.list = []), (this.plugins = {});
      }
      add(t, e, i = L.length) {
        const s = this.plugins[t];
        s && s.destroy(), (this.plugins[t] = e);
        const n = L.indexOf(t);
        -1 !== n && L.splice(n, 1), L.splice(i, 0, t), this.sort();
      }
      get(t, e) {
        return e &&
          T([
            this,
            "access",
            (t) => t.plugins,
            "access",
            (e) => e[t],
            "optionalAccess",
            (t) => t.paused,
          ])
          ? null
          : this.plugins[t];
      }
      update(t) {
        for (const e of this.list) e.update(t);
      }
      resize() {
        for (const t of this.list) t.resize();
      }
      reset() {
        for (const t of this.list) t.reset();
      }
      removeAll() {
        this.list.forEach((t) => {
          t.destroy();
        }),
          (this.plugins = {}),
          this.sort();
      }
      remove(t) {
        this.plugins[t] &&
          (T([
            this,
            "access",
            (t) => t.plugins,
            "access",
            (e) => e[t],
            "optionalAccess",
            (t) => t.destroy,
            "call",
            (t) => t(),
          ]),
          delete this.plugins[t],
          this.viewport.emit(`${t}-remove`),
          this.sort());
      }
      pause(t) {
        T([
          this,
          "access",
          (t) => t.plugins,
          "access",
          (e) => e[t],
          "optionalAccess",
          (t) => t.pause,
          "call",
          (t) => t(),
        ]);
      }
      resume(t) {
        T([
          this,
          "access",
          (t) => t.plugins,
          "access",
          (e) => e[t],
          "optionalAccess",
          (t) => t.resume,
          "call",
          (t) => t(),
        ]);
      }
      sort() {
        this.list = [];
        for (const t of L) this.plugins[t] && this.list.push(this.plugins[t]);
      }
      down(t) {
        let e = !1;
        for (const i of this.list) i.down(t) && (e = !0);
        return e;
      }
      move(t) {
        let e = !1;
        for (const i of this.viewport.plugins.list) i.move(t) && (e = !0);
        return e;
      }
      up(t) {
        let e = !1;
        for (const i of this.list) i.up(t) && (e = !0);
        return e;
      }
      wheel(t) {
        let e = !1;
        for (const i of this.list) i.wheel(t) && (e = !0);
        return e;
      }
    }
    const V = {
      screenWidth: window.innerWidth,
      screenHeight: window.innerHeight,
      worldWidth: null,
      worldHeight: null,
      threshold: 5,
      passiveWheel: !0,
      stopPropagation: !1,
      forceHitArea: null,
      noTicker: !1,
      interaction: null,
      disableOnContextMenu: !1,
      ticker: s.Ticker.shared,
    };
    class B extends i.Container {
      __init() {
        this._disableOnContextMenu = (t) => t.preventDefault();
      }
      constructor(t = {}) {
        super(),
          B.prototype.__init.call(this),
          (this.options = Object.assign(
            {},
            {
              divWheel: document.body,
            },
            V,
            t
          )),
          (this.screenWidth = this.options.screenWidth),
          (this.screenHeight = this.options.screenHeight),
          (this._worldWidth = this.options.worldWidth),
          (this._worldHeight = this.options.worldHeight),
          (this.forceHitArea = this.options.forceHitArea),
          (this.threshold = this.options.threshold),
          (this.options.divWheel = this.options.divWheel || document.body),
          this.options.disableOnContextMenu &&
            this.options.divWheel.addEventListener(
              "contextmenu",
              this._disableOnContextMenu
            ),
          this.options.noTicker ||
            ((this.tickerFunction = () =>
              this.update(this.options.ticker.elapsedMS)),
            this.options.ticker.add(this.tickerFunction)),
          (this.input = new D(this)),
          (this.plugins = new E(this));
      }
      destroy(t) {
        !this.options.noTicker &&
          this.tickerFunction &&
          this.options.ticker.remove(this.tickerFunction),
          this.options.disableOnContextMenu &&
            this.options.divWheel.removeEventListener(
              "contextmenu",
              this._disableOnContextMenu
            ),
          this.input.destroy(),
          super.destroy(t);
      }
      update(t) {
        this.pause ||
          (this.plugins.update(t),
          this.lastViewport &&
            (this.lastViewport.x !== this.x || this.lastViewport.y !== this.y
              ? (this.moving = !0)
              : this.moving &&
                (this.emit("moved-end", this), (this.moving = !1)),
            this.lastViewport.scaleX !== this.scale.x ||
            this.lastViewport.scaleY !== this.scale.y
              ? (this.zooming = !0)
              : this.zooming &&
                (this.emit("zoomed-end", this), (this.zooming = !1))),
          this.forceHitArea ||
            ((this._hitAreaDefault = new e.Rectangle(
              this.left,
              this.top,
              this.worldScreenWidth,
              this.worldScreenHeight
            )),
            (this.hitArea = this._hitAreaDefault)),
          (this._dirty =
            this._dirty ||
            !this.lastViewport ||
            this.lastViewport.x !== this.x ||
            this.lastViewport.y !== this.y ||
            this.lastViewport.scaleX !== this.scale.x ||
            this.lastViewport.scaleY !== this.scale.y),
          (this.lastViewport = {
            x: this.x,
            y: this.y,
            scaleX: this.scale.x,
            scaleY: this.scale.y,
          }),
          this.emit("frame-end", this));
      }
      resize(t = window.innerWidth, e = window.innerHeight, i, s) {
        (this.screenWidth = t),
          (this.screenHeight = e),
          void 0 !== i && (this._worldWidth = i),
          void 0 !== s && (this._worldHeight = s),
          this.plugins.resize(),
          (this.dirty = !0);
      }
      get worldWidth() {
        return this._worldWidth ? this._worldWidth : this.width / this.scale.x;
      }
      set worldWidth(t) {
        (this._worldWidth = t), this.plugins.resize();
      }
      get worldHeight() {
        return this._worldHeight
          ? this._worldHeight
          : this.height / this.scale.y;
      }
      set worldHeight(t) {
        (this._worldHeight = t), this.plugins.resize();
      }
      getVisibleBounds() {
        return new e.Rectangle(
          this.left,
          this.top,
          this.worldScreenWidth,
          this.worldScreenHeight
        );
      }
      toWorld(t, i) {
        return 2 === arguments.length
          ? this.toLocal(new e.Point(t, i))
          : this.toLocal(t);
      }
      toScreen(t, i) {
        return 2 === arguments.length
          ? this.toGlobal(new e.Point(t, i))
          : this.toGlobal(t);
      }
      get worldScreenWidth() {
        return this.screenWidth / this.scale.x;
      }
      get worldScreenHeight() {
        return this.screenHeight / this.scale.y;
      }
      get screenWorldWidth() {
        return this.worldWidth * this.scale.x;
      }
      get screenWorldHeight() {
        return this.worldHeight * this.scale.y;
      }
      get center() {
        return new e.Point(
          this.worldScreenWidth / 2 - this.x / this.scale.x,
          this.worldScreenHeight / 2 - this.y / this.scale.y
        );
      }
      set center(t) {
        this.moveCenter(t);
      }
      moveCenter(...t) {
        let e, i;
        "number" == typeof t[0]
          ? ((e = t[0]), (i = t[1]))
          : ((e = t[0].x), (i = t[0].y));
        const s = (this.worldScreenWidth / 2 - e) * this.scale.x,
          n = (this.worldScreenHeight / 2 - i) * this.scale.y;
        return (
          (this.x === s && this.y === n) ||
            (this.position.set(s, n), this.plugins.reset(), (this.dirty = !0)),
          this
        );
      }
      get corner() {
        return new e.Point(-this.x / this.scale.x, -this.y / this.scale.y);
      }
      set corner(t) {
        this.moveCorner(t);
      }
      moveCorner(...t) {
        let e, i;
        return (
          1 === t.length
            ? ((e = -t[0].x * this.scale.x), (i = -t[0].y * this.scale.y))
            : ((e = -t[0] * this.scale.x), (i = -t[1] * this.scale.y)),
          (e === this.x && i === this.y) ||
            (this.position.set(e, i), this.plugins.reset(), (this.dirty = !0)),
          this
        );
      }
      get screenWidthInWorldPixels() {
        return this.screenWidth / this.scale.x;
      }
      get screenHeightInWorldPixels() {
        return this.screenHeight / this.scale.y;
      }
      findFitWidth(t) {
        return this.screenWidth / t;
      }
      findFitHeight(t) {
        return this.screenHeight / t;
      }
      findFit(t, e) {
        const i = this.screenWidth / t,
          s = this.screenHeight / e;
        return Math.min(i, s);
      }
      findCover(t, e) {
        const i = this.screenWidth / t,
          s = this.screenHeight / e;
        return Math.max(i, s);
      }
      fitWidth(t = this.worldWidth, e, i = !0, s) {
        let n;
        e && (n = this.center),
          (this.scale.x = this.screenWidth / t),
          i && (this.scale.y = this.scale.x);
        const h = this.plugins.get("clamp-zoom", !0);
        return !s && h && h.clamp(), e && n && this.moveCenter(n), this;
      }
      fitHeight(t = this.worldHeight, e, i = !0, s) {
        let n;
        e && (n = this.center),
          (this.scale.y = this.screenHeight / t),
          i && (this.scale.x = this.scale.y);
        const h = this.plugins.get("clamp-zoom", !0);

        var backgroundCoords = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10], [0, 11], [0, 12], [0, 13], [0, 14], [0, 15], [0, 16], [0, 17], [0, 18], [0, 19], [0, 20], [0, 21], [0, 22], [0, 23], [0, 24], [0, 25], [0, 26], [0, 27], [0, 28], [0, 29], [0, 30], [0, 31], [0, 32], [0, 33], [0, 34], [0, 35], [0, 36], [0, 37], [0, 38], [0, 39], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10], [1, 11], [1, 12], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19], [1, 20], [1, 21], [1, 22], [1, 23], [1, 24], [1, 25], [1, 26], [1, 27], [1, 28], [1, 29], [1, 30], [1, 31], [1, 32], [1, 33], [1, 34], [1, 35], [1, 36], [1, 37], [1, 38], [1, 39], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [2, 10], [2, 11], [2, 12], [2, 13], [2, 14], [2, 15], [2, 16], [2, 17], [2, 18], [2, 19], [2, 20], [2, 21], [2, 22], [2, 23], [2, 24], [2, 25], [2, 26], [2, 27], [2, 28], [2, 29], [2, 30], [2, 31], [2, 32], [2, 33], [2, 34], [2, 35], [2, 36], [2, 37], [2, 38], [2, 39], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [3, 10], [3, 11], [3, 12], [3, 13], [3, 14], [3, 15], [3, 16], [3, 17], [3, 18], [3, 19], [3, 20], [3, 21], [3, 22], [3, 23], [3, 24], [3, 25], [3, 26], [3, 27], [3, 28], [3, 29], [3, 30], [3, 31], [3, 32], [3, 33], [3, 34], [3, 35], [3, 36], [3, 37], [3, 38], [3, 39], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [4, 10], [4, 11], [4, 12], [4, 13], [4, 14], [4, 15], [4, 16], [4, 17], [4, 18], [4, 19], [4, 20], [4, 21], [4, 22], [4, 23], [4, 24], [4, 25], [4, 26], [4, 27], [4, 28], [4, 29], [4, 30], [4, 31], [4, 32], [4, 33], [4, 34], [4, 35], [4, 36], [4, 37], [4, 38], [4, 39], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [5, 10], [5, 11], [5, 12], [5, 13], [5, 14], [5, 15], [5, 16], [5, 17], [5, 18], [5, 19], [5, 20], [5, 21], [5, 22], [5, 23], [5, 24], [5, 25], [5, 26], [5, 27], [5, 28], [5, 29], [5, 30], [5, 31], [5, 32], [5, 33], [5, 34], [5, 35], [5, 36], [5, 37], [5, 38], [5, 39], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [6, 10], [6, 11], [6, 12], [6, 13], [6, 14], [6, 15], [6, 16], [6, 17], [6, 18], [6, 19], [6, 20], [6, 21], [6, 22], [6, 23], [6, 24], [6, 25], [6, 26], [6, 27], [6, 28], [6, 29], [6, 30], [6, 31], [6, 32], [6, 33], [6, 34], [6, 35], [6, 36], [6, 37], [6, 38], [6, 39], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [7, 10], [7, 11], [7, 12], [7, 13], [7, 14], [7, 15], [7, 16], [7, 17], [7, 18], [7, 19], [7, 20], [7, 21], [7, 22], [7, 23], [7, 24], [7, 25], [7, 26], [7, 27], [7, 28], [7, 29], [7, 30], [7, 31], [7, 32], [7, 33], [7, 34], [7, 35], [7, 36], [7, 37], [7, 38], [7, 39], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [8, 10], [8, 11], [8, 12], [8, 13], [8, 14], [8, 15], [8, 16], [8, 17], [8, 18], [8, 29], [8, 30], [8, 31], [8, 32], [8, 33], [8, 34], [8, 35], [8, 36], [8, 37], [8, 38], [8, 39], [9, 0], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9], [9, 10], [9, 11], [9, 12], [9, 13], [9, 34], [9, 35], [9, 36], [9, 37], [9, 38], [9, 39], [10, 0], [10, 1], [10, 2], [10, 3], [10, 4], [10, 5], [10, 6], [10, 7], [10, 8], [10, 9], [10, 10], [10, 11], [10, 12], [10, 13], [10, 34], [10, 35], [10, 36], [10, 37], [10, 38], [10, 39], [11, 0], [11, 1], [11, 2], [11, 3], [11, 4], [11, 5], [11, 6], [11, 7], [11, 8], [11, 9], [11, 10], [11, 36], [11, 37], [11, 38], [11, 39], [12, 0], [12, 1], [12, 2], [12, 3], [12, 4], [12, 5], [12, 6], [12, 7], [12, 36], [12, 37], [12, 38], [12, 39], [13, 0], [13, 1], [13, 2], [13, 3], [13, 4], [13, 5], [13, 6], [13, 7], [13, 36], [13, 37], [13, 38], [13, 39], [14, 0], [14, 1], [14, 2], [14, 3], [14, 4], [14, 5], [14, 38], [14, 39], [15, 0], [15, 1], [15, 2], [15, 3], [15, 4], [15, 38], [15, 39], [16, 0], [16, 1], [16, 2], [16, 3], [16, 4], [16, 38], [16, 39], [17, 0], [17, 1], [17, 2], [17, 38], [17, 39], [18, 0], [18, 1], [18, 2], [18, 38], [18, 39], [19, 0], [19, 1], [19, 2], [19, 38], [19, 39], [20, 0], [20, 1], [20, 2], [20, 38], [20, 39], [21, 0], [21, 1], [21, 2], [21, 38], [21, 39], [22, 0], [22, 1], [22, 2], [22, 38], [22, 39], [23, 0], [23, 1], [23, 2], [23, 38], [23, 39], [24, 0], [24, 1], [24, 2], [24, 3], [24, 4], [24, 38], [24, 39], [25, 0], [25, 1], [25, 2], [25, 3], [25, 4], [25, 38], [25, 39], [26, 0], [26, 1], [26, 2], [26, 3], [26, 4], [26, 5], [26, 38], [26, 39], [27, 0], [27, 1], [27, 2], [27, 3], [27, 4], [27, 5], [27, 6], [27, 7], [27, 36], [27, 37], [27, 38], [27, 39], [28, 0], [28, 1], [28, 2], [28, 3], [28, 4], [28, 5], [28, 6], [28, 7], [28, 36], [28, 37], [28, 38], [28, 39], [29, 0], [29, 1], [29, 2], [29, 3], [29, 4], [29, 5], [29, 6], [29, 7], [29, 8], [29, 9], [29, 10], [29, 36], [29, 37], [29, 38], [29, 39], [30, 0], [30, 1], [30, 2], [30, 3], [30, 4], [30, 5], [30, 6], [30, 7], [30, 8], [30, 9], [30, 10], [30, 11], [30, 12], [30, 13], [30, 34], [30, 35], [30, 36], [30, 37], [30, 38], [30, 39], [31, 0], [31, 1], [31, 2], [31, 3], [31, 4], [31, 5], [31, 6], [31, 7], [31, 8], [31, 9], [31, 10], [31, 11], [31, 12], [31, 13], [31, 34], [31, 35], [31, 36], [31, 37], [31, 38], [31, 39], [32, 0], [32, 1], [32, 2], [32, 3], [32, 4], [32, 5], [32, 6], [32, 7], [32, 8], [32, 9], [32, 10], [32, 11], [32, 12], [32, 13], [32, 14], [32, 15], [32, 16], [32, 17], [32, 18], [32, 29], [32, 30], [32, 31], [32, 32], [32, 33], [32, 34], [32, 35], [32, 36], [32, 37], [32, 38], [32, 39], [33, 0], [33, 1], [33, 2], [33, 3], [33, 4], [33, 5], [33, 6], [33, 7], [33, 8], [33, 9], [33, 10], [33, 11], [33, 12], [33, 13], [33, 14], [33, 15], [33, 16], [33, 17], [33, 18], [33, 19], [33, 20], [33, 21], [33, 22], [33, 23], [33, 24], [33, 25], [33, 26], [33, 27], [33, 28], [33, 29], [33, 30], [33, 31], [33, 32], [33, 33], [33, 34], [33, 35], [33, 36], [33, 37], [33, 38], [33, 39], [34, 0], [34, 1], [34, 2], [34, 3], [34, 4], [34, 5], [34, 6], [34, 7], [34, 8], [34, 9], [34, 10], [34, 11], [34, 12], [34, 13], [34, 14], [34, 15], [34, 16], [34, 17], [34, 18], [34, 19], [34, 20], [34, 21], [34, 22], [34, 23], [34, 24], [34, 25], [34, 26], [34, 27], [34, 28], [34, 29], [34, 30], [34, 31], [34, 32], [34, 33], [34, 34], [34, 35], [34, 36], [34, 37], [34, 38], [34, 39], [35, 0], [35, 1], [35, 2], [35, 3], [35, 4], [35, 5], [35, 6], [35, 7], [35, 8], [35, 9], [35, 10], [35, 11], [35, 12], [35, 13], [35, 14], [35, 15], [35, 16], [35, 17], [35, 18], [35, 19], [35, 20], [35, 21], [35, 22], [35, 23], [35, 24], [35, 25], [35, 26], [35, 27], [35, 28], [35, 29], [35, 30], [35, 31], [35, 32], [35, 33], [35, 34], [35, 35], [35, 36], [35, 37], [35, 38], [35, 39], [36, 0], [36, 1], [36, 2], [36, 3], [36, 4], [36, 5], [36, 6], [36, 7], [36, 8], [36, 9], [36, 10], [36, 11], [36, 12], [36, 13], [36, 14], [36, 15], [36, 16], [36, 17], [36, 18], [36, 19], [36, 20], [36, 21], [36, 22], [36, 23], [36, 24], [36, 25], [36, 26], [36, 27], [36, 28], [36, 29], [36, 30], [36, 31], [36, 32], [36, 33], [36, 34], [36, 35], [36, 36], [36, 37], [36, 38], [36, 39], [37, 0], [37, 1], [37, 2], [37, 3], [37, 4], [37, 5], [37, 6], [37, 7], [37, 8], [37, 9], [37, 10], [37, 11], [37, 12], [37, 13], [37, 14], [37, 15], [37, 16], [37, 17], [37, 18], [37, 19], [37, 20], [37, 21], [37, 22], [37, 23], [37, 24], [37, 25], [37, 26], [37, 27], [37, 28], [37, 29], [37, 30], [37, 31], [37, 32], [37, 33], [37, 34], [37, 35], [37, 36], [37, 37], [37, 38], [37, 39], [38, 0], [38, 1], [38, 2], [38, 3], [38, 4], [38, 5], [38, 6], [38, 7], [38, 8], [38, 9], [38, 10], [38, 11], [38, 12], [38, 13], [38, 14], [38, 15], [38, 16], [38, 17], [38, 18], [38, 19], [38, 20], [38, 21], [38, 22], [38, 23], [38, 24], [38, 25], [38, 26], [38, 27], [38, 28], [38, 29], [38, 30], [38, 31], [38, 32], [38, 33], [38, 34], [38, 35], [38, 36], [38, 37], [38, 38], [38, 39], [39, 0], [39, 1], [39, 2], [39, 3], [39, 4], [39, 5], [39, 6], [39, 7], [39, 8], [39, 9], [39, 10], [39, 11], [39, 12], [39, 13], [39, 14], [39, 15], [39, 16], [39, 17], [39, 18], [39, 19], [39, 20], [39, 21], [39, 22], [39, 23], [39, 24], [39, 25], [39, 26], [39, 27], [39, 28], [39, 29], [39, 30], [39, 31], [39, 32], [39, 33], [39, 34], [39, 35], [39, 36], [39, 37], [39, 38], [39, 39]];
        var borderCoords = [[32, 28], [8, 19], [8, 20], [8, 21], [8, 22], [8, 23], [8, 24], [8, 25], [8, 26], [8, 27], [8, 28], [9, 14], [9, 15], [9, 16], [9, 17], [9, 18], [9, 19], [9, 28], [9, 29], [9, 30], [9, 31], [9, 32], [9, 33], [10, 14], [10, 33], [11, 11], [11, 12], [11, 13], [11, 14], [11, 33], [11, 34], [11, 35], [12, 8], [12, 9], [12, 10], [12, 11], [12, 35], [13, 8], [13, 35], [14, 6], [14, 7], [14, 8], [14, 35], [14, 36], [14, 37], [15, 5], [15, 6], [15, 37], [16, 5], [16, 37], [17, 3], [17, 4], [17, 5], [17, 37], [18, 3], [18, 37], [19, 3], [19, 37], [20, 3], [20, 37], [21, 3], [21, 37], [22, 3], [22, 37], [23, 3], [23, 4], [23, 5], [23, 37], [24, 5], [24, 37], [25, 5], [25, 6], [25, 37], [26, 6], [26, 7], [26, 8], [26, 35], [26, 36], [26, 37], [27, 8], [27, 35], [28, 8], [28, 9], [28, 10], [28, 11], [28, 35], [29, 11], [29, 12], [29, 13], [29, 14], [29, 33], [29, 34], [29, 35], [30, 14], [30, 33], [31, 14], [31, 15], [31, 16], [31, 17], [31, 18], [31, 19], [31, 28], [31, 29], [31, 30], [31, 31], [31, 32], [31, 33], [32, 19], [32, 20], [32, 21], [32, 22], [32, 23], [32, 24], [32, 25], [32, 26], [32, 27]];
        var mainCoords = [[9, 20], [9, 24], [9, 25], [9, 26], [9, 27], [10, 15], [10, 16], [10, 17], [10, 18], [10, 19], [10, 20], [10, 24], [10, 25], [10, 26], [10, 27], [10, 28], [10, 29], [10, 30], [10, 31], [10, 32], [11, 15], [11, 16], [11, 17], [11, 18], [11, 19], [11, 24], [11, 25], [11, 26], [11, 27], [11, 28], [11, 29], [11, 30], [11, 31], [11, 32], [12, 33], [12, 34], [13, 9], [13, 10], [13, 11], [13, 33], [13, 34], [14, 9], [14, 10], [14, 11], [15, 7], [15, 32], [15, 33], [15, 34], [15, 35], [16, 6], [16, 7], [16, 32], [16, 33], [16, 34], [16, 35], [17, 32], [17, 33], [17, 34], [17, 35], [18, 4], [18, 5], [18, 32], [18, 33], [18, 34], [18, 35], [19, 4], [19, 5], [19, 32], [19, 33], [19, 34], [19, 35], [20, 4], [20, 5], [20, 32], [20, 33], [20, 34], [20, 35], [21, 4], [21, 5], [21, 32], [21, 33], [21, 34], [21, 35], [22, 4], [22, 5], [22, 32], [22, 33], [22, 34], [22, 35], [24, 6], [24, 7], [24, 8], [24, 30], [25, 7], [25, 8], [25, 30], [26, 9], [26, 10], [26, 11], [26, 30], [27, 9], [27, 10], [27, 11], [29, 15], [29, 16], [29, 17], [29, 18], [29, 19], [29, 24], [29, 27], [30, 15], [30, 16], [30, 17], [30, 18], [30, 19], [30, 24], [31, 24], [9, 21], [9, 22], [9, 23], [10, 21], [10, 22], [10, 23], [11, 20], [11, 21], [11, 22], [11, 23], [12, 12], [12, 13], [12, 14], [12, 15], [12, 16], [12, 17], [12, 18], [12, 19], [12, 20], [12, 21], [12, 22], [12, 23], [12, 24], [12, 25], [12, 26], [12, 27], [12, 28], [12, 29], [12, 30], [12, 31], [12, 32], [13, 12], [13, 13], [13, 14], [13, 15], [13, 16], [13, 17], [13, 18], [13, 19], [13, 20], [13, 21], [13, 22], [13, 23], [13, 24], [13, 25], [13, 26], [13, 27], [13, 28], [13, 29], [13, 30], [13, 31], [13, 32], [14, 12], [14, 13], [14, 14], [14, 15], [14, 16], [14, 17], [14, 18], [14, 19], [14, 20], [14, 21], [14, 22], [14, 23], [14, 24], [14, 25], [14, 26], [14, 27], [14, 28], [14, 29], [14, 30], [14, 31], [14, 32], [14, 33], [14, 34], [15, 8], [15, 9], [15, 10], [15, 11], [15, 12], [15, 13], [15, 14], [15, 15], [15, 16], [15, 17], [15, 18], [15, 19], [15, 20], [15, 21], [15, 22], [15, 23], [15, 24], [15, 25], [15, 26], [15, 27], [15, 28], [15, 29], [15, 30], [15, 31], [16, 8], [16, 9], [16, 10], [16, 11], [16, 12], [16, 13], [16, 14], [16, 15], [16, 16], [16, 17], [16, 18], [16, 19], [16, 20], [16, 21], [16, 22], [16, 23], [16, 24], [16, 25], [16, 26], [16, 27], [16, 28], [16, 29], [16, 30], [16, 31], [17, 6], [17, 7], [17, 8], [17, 9], [17, 10], [17, 11], [17, 12], [17, 13], [17, 14], [17, 15], [17, 16], [17, 17], [17, 18], [17, 19], [17, 20], [17, 21], [17, 22], [17, 23], [17, 24], [17, 25], [17, 26], [17, 27], [17, 28], [17, 29], [17, 30], [17, 31], [18, 6], [18, 7], [18, 8], [18, 9], [18, 10], [18, 11], [18, 12], [18, 13], [18, 14], [18, 15], [18, 16], [18, 17], [18, 18], [18, 19], [18, 20], [18, 21], [18, 22], [18, 23], [18, 24], [18, 25], [18, 26], [18, 27], [18, 28], [18, 29], [18, 30], [18, 31], [19, 6], [19, 7], [19, 8], [19, 9], [19, 10], [19, 11], [19, 12], [19, 13], [19, 14], [19, 15], [19, 16], [19, 17], [19, 18], [19, 19], [19, 20], [19, 21], [19, 22], [19, 23], [19, 24], [19, 25], [19, 26], [19, 27], [19, 28], [19, 29], [19, 30], [19, 31], [20, 6], [20, 7], [20, 8], [20, 9], [20, 10], [20, 11], [20, 12], [20, 13], [20, 14], [20, 15], [20, 16], [20, 17], [20, 18], [20, 19], [20, 20], [20, 21], [20, 22], [20, 23], [20, 24], [20, 25], [20, 26], [20, 27], [20, 28], [20, 29], [20, 30], [20, 31], [21, 6], [21, 7], [21, 8], [21, 9], [21, 10], [21, 11], [21, 12], [21, 13], [21, 14], [21, 15], [21, 16], [21, 17], [21, 18], [21, 19], [21, 20], [21, 21], [21, 22], [21, 23], [21, 24], [21, 25], [21, 26], [21, 27], [21, 28], [21, 29], [21, 30], [21, 31], [22, 6], [22, 7], [22, 8], [22, 9], [22, 10], [22, 11], [22, 12], [22, 13], [22, 14], [22, 15], [22, 16], [22, 17], [22, 18], [22, 19], [22, 20], [22, 21], [22, 22], [22, 23], [22, 24], [22, 25], [22, 26], [22, 27], [22, 28], [22, 29], [22, 30], [22, 31], [23, 6], [23, 7], [23, 8], [23, 9], [23, 10], [23, 11], [23, 12], [23, 13], [23, 14], [23, 15], [23, 16], [23, 17], [23, 18], [23, 19], [23, 20], [23, 21], [23, 22], [23, 23], [23, 24], [23, 25], [23, 26], [23, 27], [23, 28], [23, 29], [23, 30], [23, 31], [23, 32], [24, 9], [24, 10], [24, 11], [24, 12], [24, 13], [24, 14], [24, 15], [24, 16], [24, 17], [24, 18], [24, 19], [24, 20], [24, 21], [24, 22], [24, 23], [24, 24], [24, 25], [24, 26], [24, 27], [24, 28], [24, 29], [25, 9], [25, 10], [25, 11], [25, 12], [25, 13], [25, 14], [25, 15], [25, 16], [25, 17], [25, 18], [25, 19], [25, 20], [25, 21], [25, 22], [25, 23], [25, 24], [25, 25], [25, 26], [25, 27], [25, 28], [25, 29], [26, 12], [26, 13], [26, 14], [26, 15], [26, 16], [26, 17], [26, 18], [26, 19], [26, 20], [26, 21], [26, 22], [26, 23], [26, 24], [26, 25], [26, 26], [26, 27], [26, 28], [26, 29], [27, 12], [27, 13], [27, 14], [27, 15], [27, 16], [27, 17], [27, 18], [27, 19], [27, 20], [27, 21], [27, 22], [27, 23], [27, 24], [27, 25], [27, 26], [27, 27], [27, 28], [28, 12], [28, 13], [28, 14], [28, 15], [28, 16], [28, 17], [28, 18], [28, 19], [28, 20], [28, 21], [28, 22], [28, 23], [28, 24], [28, 25], [28, 26], [28, 27], [28, 28], [29, 20], [29, 21], [29, 22], [29, 23], [29, 25], [29, 26], [30, 20], [30, 21], [30, 22], [30, 23], [31, 20], [31, 21], [31, 22], [31, 23]];
        var shadowCoords = [[15, 36], [16, 36], [17, 36], [18, 36], [19, 36], [20, 36], [21, 36], [22, 36], [23, 33], [23, 34], [23, 35], [23, 36], [24, 31], [24, 32], [24, 33], [24, 34], [24, 35], [24, 36], [25, 31], [25, 32], [25, 33], [25, 34], [25, 35], [25, 36], [26, 31], [26, 32], [26, 33], [26, 34], [27, 29], [27, 30], [27, 31], [27, 32], [27, 33], [27, 34], [28, 29], [28, 30], [28, 31], [28, 32], [28, 33], [28, 34], [29, 28], [29, 29], [29, 30], [29, 31], [29, 32], [30, 25], [30, 26], [30, 27], [30, 28], [30, 29], [30, 30], [30, 31], [30, 32], [31, 25], [31, 26], [31, 27]];
        
        let eggs = [
            {startX: 0, startY: 500, background: "#000000", border: "#0000FF", main: "#C339FF", shadow: "#00FF00"},
            {startX: 40, startY: 500, background: "#FF3981", border: "#0000FF", main: "#C339FF", shadow: "#00FF00"}
        ];

        function fillRect(x, y, egg, color, that) {
          const n2 = new PIXI.Graphics();
          n2.xCoord = x + egg.startX;
          n2.yCoord = y + egg.startY;

          n2.beginFill("0x"+color.replace("#", ""), 0.8);
          n2.drawRoundedRect(n2.xCoord + 0.25, n2.yCoord + 0.25, 0.5, 0.5, 5);
          n2.endFill();
          that.addChild(n2);
        }

        function drawPattern(that, egg) {
          borderCoords.forEach((coords) => {
            fillRect(coords[0], coords[1], egg, egg.border, that);
          });

          mainCoords.forEach((coords) => {
            fillRect(coords[0], coords[1], egg, egg.main, that);
          });

          shadowCoords.forEach((coords) => {
            fillRect(coords[0], coords[1], egg, egg.shadow, that);
          });

          backgroundCoords.forEach((coords) => {
            if (coords[0] == 0 || coords[0] == 39 || coords[1] == 0 || coords[1] == 39) {
                fillRect(coords[0], coords[1], egg, "#FF0000", that);
            }
          })
        }

        for (let index = 0; index < eggs.length; index++) {
            let egg = eggs[index];
            drawPattern(this, egg);
        }

        return !s && h && h.clamp(), e && n && this.moveCenter(n), this;
      }
      fitWorld(t) {
        let e;
        t && (e = this.center),
          (this.scale.x = this.screenWidth / this.worldWidth),
          (this.scale.y = this.screenHeight / this.worldHeight),
          this.scale.x < this.scale.y
            ? (this.scale.y = this.scale.x)
            : (this.scale.x = this.scale.y);
        const i = this.plugins.get("clamp-zoom", !0);
        return i && i.clamp(), t && e && this.moveCenter(e), this;
      }
      fit(t, e = this.worldWidth, i = this.worldHeight) {
        let s;
        t && (s = this.center),
          (this.scale.x = this.screenWidth / e),
          (this.scale.y = this.screenHeight / i),
          this.scale.x < this.scale.y
            ? (this.scale.y = this.scale.x)
            : (this.scale.x = this.scale.y);
        const n = this.plugins.get("clamp-zoom", !0);
        return n && n.clamp(), t && s && this.moveCenter(s), this;
      }
      setZoom(t, e) {
        let i;
        e && (i = this.center), this.scale.set(t);
        const s = this.plugins.get("clamp-zoom", !0);
        return s && s.clamp(), e && i && this.moveCenter(i), this;
      }
      zoomPercent(t, e) {
        return this.setZoom(this.scale.x + this.scale.x * t, e);
      }
      zoom(t, e) {
        return this.fitWidth(t + this.worldScreenWidth, e), this;
      }
      get scaled() {
        return this.scale.x;
      }
      set scaled(t) {
        this.setZoom(t, !0);
      }
      snapZoom(t) {
        return this.plugins.add("snap-zoom", new X(this, t)), this;
      }
      OOB() {
        return {
          left: this.left < 0,
          right: this.right > this.worldWidth,
          top: this.top < 0,
          bottom: this.bottom > this.worldHeight,
          cornerPoint: new e.Point(
            this.worldWidth * this.scale.x - this.screenWidth,
            this.worldHeight * this.scale.y - this.screenHeight
          ),
        };
      }
      get right() {
        return -this.x / this.scale.x + this.worldScreenWidth;
      }
      set right(t) {
        (this.x = -t * this.scale.x + this.screenWidth), this.plugins.reset();
      }
      get left() {
        return -this.x / this.scale.x;
      }
      set left(t) {
        (this.x = -t * this.scale.x), this.plugins.reset();
      }
      get top() {
        return -this.y / this.scale.y;
      }
      set top(t) {
        (this.y = -t * this.scale.y), this.plugins.reset();
      }
      get bottom() {
        return -this.y / this.scale.y + this.worldScreenHeight;
      }
      set bottom(t) {
        (this.y = -t * this.scale.y + this.screenHeight), this.plugins.reset();
      }
      get dirty() {
        return !!this._dirty;
      }
      set dirty(t) {
        this._dirty = t;
      }
      get forceHitArea() {
        return this._forceHitArea;
      }
      set forceHitArea(t) {
        t
          ? ((this._forceHitArea = t), (this.hitArea = t))
          : ((this._forceHitArea = null),
            (this.hitArea = new e.Rectangle(
              0,
              0,
              this.worldWidth,
              this.worldHeight
            )));
      }
      drag(t) {
        return this.plugins.add("drag", new H(this, t)), this;
      }
      clamp(t) {
        return this.plugins.add("clamp", new w(this, t)), this;
      }
      decelerate(t) {
        return this.plugins.add("decelerate", new W(this, t)), this;
      }
      bounce(t) {
        return this.plugins.add("bounce", new m(this, t)), this;
      }
      pinch(t) {
        return this.plugins.add("pinch", new O(this, t)), this;
      }
      snap(t, e, i) {
        return this.plugins.add("snap", new z(this, t, e, i)), this;
      }
      follow(t, e) {
        return this.plugins.add("follow", new S(this, t, e)), this;
      }
      wheel(t) {
        return this.plugins.add("wheel", new A(this, t)), this;
      }
      animate(t) {
        return this.plugins.add("animate", new c(this, t)), this;
      }
      clampZoom(t) {
        return this.plugins.add("clamp-zoom", new f(this, t)), this;
      }
      mouseEdges(t) {
        return this.plugins.add("mouse-edges", new C(this, t)), this;
      }
      get pause() {
        return !!this._pause;
      }
      set pause(t) {
        (this._pause = t),
          (this.lastViewport = null),
          (this.moving = !1),
          (this.zooming = !1),
          t && this.input.pause();
      }
      ensureVisible(t, e, i, s, n) {
        n &&
          (i > this.worldScreenWidth || s > this.worldScreenHeight) &&
          (this.fit(!0, i, s),
          this.emit("zoomed", {
            viewport: this,
            type: "ensureVisible",
          }));
        let h = !1;
        t < this.left
          ? ((this.left = t), (h = !0))
          : t + i > this.right && ((this.right = t + i), (h = !0)),
          e < this.top
            ? ((this.top = e), (h = !0))
            : e + s > this.bottom && ((this.bottom = e + s), (h = !0)),
          h &&
            this.emit("moved", {
              viewport: this,
              type: "ensureVisible",
            });
      }
    }
    (t.Animate = c),
      (t.Bounce = m),
      (t.Clamp = w),
      (t.ClampZoom = f),
      (t.Decelerate = W),
      (t.Drag = H),
      (t.Follow = S),
      (t.InputManager = D),
      (t.MouseEdges = C),
      (t.Pinch = O),
      (t.Plugin = n),
      (t.PluginManager = E),
      (t.Snap = z),
      (t.SnapZoom = X),
      (t.Viewport = B),
      (t.Wheel = A),
      Object.defineProperty(t, "__esModule", {
        value: !0,
      });
  }),
  "undefined" != typeof pixi_viewport &&
    Object.assign(this.PIXI, pixi_viewport);
