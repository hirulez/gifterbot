/*!
 * pixi-viewport - v5.1.0
 * Compiled Tue, 09 Apr 2024 15:05:21 UTC
 *
 * pixi-viewport is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 *
 * Copyright 2019-2020, David Figatner, All Rights Reserved
 */
(this.PIXI = this.PIXI || {}),
  (function (t, e) {
    "object" == typeof exports && "undefined" != typeof module
      ? e(
          exports,
          require("@pixi/math"),
          require("@pixi/display"),
          require("@pixi/ticker")
        )
      : "function" == typeof define && define.amd
      ? define(["exports", "@pixi/math", "@pixi/display", "@pixi/ticker"], e)
      : e(
          ((t =
            "undefined" != typeof globalThis
              ? globalThis
              : t || self).pixi_viewport = {}),
          t.PIXI,
          t.PIXI,
          t.PIXI
        );
  })(this, function (t, e, i, s) {
    "use strict";
    class n {
      constructor(t) {
        (this.parent = t), (this.paused = !1);
      }
      destroy() {}
      down(t) {
        return !1;
      }
      move(t) {
        return !1;
      }
      up(t) {
        return !1;
      }
      wheel(t) {
        return !1;
      }
      update(t) {}
      resize() {}
      reset() {}
      pause() {
        this.paused = !0;
      }
      resume() {
        this.paused = !1;
      }
    }
    var h =
      "undefined" != typeof globalThis
        ? globalThis
        : "undefined" != typeof window
        ? window
        : "undefined" != typeof global
        ? global
        : "undefined" != typeof self
        ? self
        : {};
    var o,
      r,
      a =
        ((function (t, e) {
          (function () {
            var e;
            (function (e) {
              t.exports = e;
            })(
              (e = {
                linear: function (t, e, i, s) {
                  return (i * t) / s + e;
                },
                easeInQuad: function (t, e, i, s) {
                  return i * (t /= s) * t + e;
                },
                easeOutQuad: function (t, e, i, s) {
                  return -i * (t /= s) * (t - 2) + e;
                },
                easeInOutQuad: function (t, e, i, s) {
                  return (t /= s / 2) < 1
                    ? (i / 2) * t * t + e
                    : (-i / 2) * (--t * (t - 2) - 1) + e;
                },
                easeInCubic: function (t, e, i, s) {
                  return i * (t /= s) * t * t + e;
                },
                easeOutCubic: function (t, e, i, s) {
                  return i * ((t = t / s - 1) * t * t + 1) + e;
                },
                easeInOutCubic: function (t, e, i, s) {
                  return (t /= s / 2) < 1
                    ? (i / 2) * t * t * t + e
                    : (i / 2) * ((t -= 2) * t * t + 2) + e;
                },
                easeInQuart: function (t, e, i, s) {
                  return i * (t /= s) * t * t * t + e;
                },
                easeOutQuart: function (t, e, i, s) {
                  return -i * ((t = t / s - 1) * t * t * t - 1) + e;
                },
                easeInOutQuart: function (t, e, i, s) {
                  return (t /= s / 2) < 1
                    ? (i / 2) * t * t * t * t + e
                    : (-i / 2) * ((t -= 2) * t * t * t - 2) + e;
                },
                easeInQuint: function (t, e, i, s) {
                  return i * (t /= s) * t * t * t * t + e;
                },
                easeOutQuint: function (t, e, i, s) {
                  return i * ((t = t / s - 1) * t * t * t * t + 1) + e;
                },
                easeInOutQuint: function (t, e, i, s) {
                  return (t /= s / 2) < 1
                    ? (i / 2) * t * t * t * t * t + e
                    : (i / 2) * ((t -= 2) * t * t * t * t + 2) + e;
                },
                easeInSine: function (t, e, i, s) {
                  return -i * Math.cos((t / s) * (Math.PI / 2)) + i + e;
                },
                easeOutSine: function (t, e, i, s) {
                  return i * Math.sin((t / s) * (Math.PI / 2)) + e;
                },
                easeInOutSine: function (t, e, i, s) {
                  return (-i / 2) * (Math.cos((Math.PI * t) / s) - 1) + e;
                },
                easeInExpo: function (t, e, i, s) {
                  return 0 === t ? e : i * Math.pow(2, 10 * (t / s - 1)) + e;
                },
                easeOutExpo: function (t, e, i, s) {
                  return t === s
                    ? e + i
                    : i * (1 - Math.pow(2, (-10 * t) / s)) + e;
                },
                easeInOutExpo: function (t, e, i, s) {
                  return (t /= s / 2) < 1
                    ? (i / 2) * Math.pow(2, 10 * (t - 1)) + e
                    : (i / 2) * (2 - Math.pow(2, -10 * --t)) + e;
                },
                easeInCirc: function (t, e, i, s) {
                  return -i * (Math.sqrt(1 - (t /= s) * t) - 1) + e;
                },
                easeOutCirc: function (t, e, i, s) {
                  return i * Math.sqrt(1 - (t = t / s - 1) * t) + e;
                },
                easeInOutCirc: function (t, e, i, s) {
                  return (t /= s / 2) < 1
                    ? (-i / 2) * (Math.sqrt(1 - t * t) - 1) + e
                    : (i / 2) * (Math.sqrt(1 - (t -= 2) * t) + 1) + e;
                },
                easeInElastic: function (t, e, i, s) {
                  var n, h, o;
                  return (
                    (o = 1.70158),
                    0 === t || (t /= s),
                    (h = 0) || (h = 0.3 * s),
                    (n = i) < Math.abs(i)
                      ? ((n = i), (o = h / 4))
                      : (o = (h / (2 * Math.PI)) * Math.asin(i / n)),
                    -n *
                      Math.pow(2, 10 * (t -= 1)) *
                      Math.sin(((t * s - o) * (2 * Math.PI)) / h) +
                      e
                  );
                },
                easeOutElastic: function (t, e, i, s) {
                  var n, h, o;
                  return (
                    (o = 1.70158),
                    0 === t || (t /= s),
                    (h = 0) || (h = 0.3 * s),
                    (n = i) < Math.abs(i)
                      ? ((n = i), (o = h / 4))
                      : (o = (h / (2 * Math.PI)) * Math.asin(i / n)),
                    n *
                      Math.pow(2, -10 * t) *
                      Math.sin(((t * s - o) * (2 * Math.PI)) / h) +
                      i +
                      e
                  );
                },
                easeInOutElastic: function (t, e, i, s) {
                  var n, h, o;
                  return (
                    (o = 1.70158),
                    0 === t || (t /= s / 2),
                    (h = 0) || (h = s * (0.3 * 1.5)),
                    (n = i) < Math.abs(i)
                      ? ((n = i), (o = h / 4))
                      : (o = (h / (2 * Math.PI)) * Math.asin(i / n)),
                    t < 1
                      ? n *
                          Math.pow(2, 10 * (t -= 1)) *
                          Math.sin(((t * s - o) * (2 * Math.PI)) / h) *
                          -0.5 +
                        e
                      : n *
                          Math.pow(2, -10 * (t -= 1)) *
                          Math.sin(((t * s - o) * (2 * Math.PI)) / h) *
                          0.5 +
                        i +
                        e
                  );
                },
                easeInBack: function (t, e, i, s, n) {
                  return (
                    void 0 === n && (n = 1.70158),
                    i * (t /= s) * t * ((n + 1) * t - n) + e
                  );
                },
                easeOutBack: function (t, e, i, s, n) {
                  return (
                    void 0 === n && (n = 1.70158),
                    i * ((t = t / s - 1) * t * ((n + 1) * t + n) + 1) + e
                  );
                },
                easeInOutBack: function (t, e, i, s, n) {
                  return (
                    void 0 === n && (n = 1.70158),
                    (t /= s / 2) < 1
                      ? (i / 2) * (t * t * ((1 + (n *= 1.525)) * t - n)) + e
                      : (i / 2) *
                          ((t -= 2) * t * ((1 + (n *= 1.525)) * t + n) + 2) +
                        e
                  );
                },
                easeInBounce: function (t, i, s, n) {
                  return s - e.easeOutBounce(n - t, 0, s, n) + i;
                },
                easeOutBounce: function (t, e, i, s) {
                  return (t /= s) < 1 / 2.75
                    ? i * (7.5625 * t * t) + e
                    : t < 2 / 2.75
                    ? i * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + e
                    : t < 2.5 / 2.75
                    ? i * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + e
                    : i * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + e;
                },
                easeInOutBounce: function (t, i, s, n) {
                  return t < n / 2
                    ? 0.5 * e.easeInBounce(2 * t, 0, s, n) + i
                    : 0.5 * e.easeOutBounce(2 * t - n, 0, s, n) + 0.5 * s + i;
                },
              })
            );
          }).call(h);
        })(
          (r = {
            path: o,
            exports: {},
            require: function (t, e) {
              return (function () {
                throw new Error(
                  "Dynamic requires are not currently supported by @rollup/plugin-commonjs"
                );
              })(null == e && r.path);
            },
          }),
          r.exports
        ),
        r.exports);
    function p(t, e) {
      return t
        ? "function" == typeof t
          ? t
          : "string" == typeof t
          ? a[t]
          : void 0
        : a[e];
    }
    const l = {
      removeOnInterrupt: !1,
      ease: "linear",
      time: 1e3,
    };
    class c extends n {
      __init() {
        this.startWidth = null;
      }
      __init2() {
        this.startHeight = null;
      }
      __init3() {
        this.deltaWidth = null;
      }
      __init4() {
        this.deltaHeight = null;
      }
      __init5() {
        this.width = null;
      }
      __init6() {
        this.height = null;
      }
      __init7() {
        this.time = 0;
      }
      constructor(t, e = {}) {
        super(t),
          c.prototype.__init.call(this),
          c.prototype.__init2.call(this),
          c.prototype.__init3.call(this),
          c.prototype.__init4.call(this),
          c.prototype.__init5.call(this),
          c.prototype.__init6.call(this),
          c.prototype.__init7.call(this),
          (this.options = Object.assign({}, l, e)),
          (this.options.ease = p(this.options.ease)),
          this.setupPosition(),
          this.setupZoom(),
          (this.time = 0);
      }
      setupPosition() {
        void 0 !== this.options.position
          ? ((this.startX = this.parent.center.x),
            (this.startY = this.parent.center.y),
            (this.deltaX = this.options.position.x - this.parent.center.x),
            (this.deltaY = this.options.position.y - this.parent.center.y),
            (this.keepCenter = !1))
          : (this.keepCenter = !0);
      }
      setupZoom() {
        (this.width = null),
          (this.height = null),
          void 0 !== this.options.scale
            ? (this.width = this.parent.screenWidth / this.options.scale)
            : void 0 !== this.options.scaleX || void 0 !== this.options.scaleY
            ? (void 0 !== this.options.scaleX &&
                (this.width = this.parent.screenWidth / this.options.scaleX),
              void 0 !== this.options.scaleY &&
                (this.height = this.parent.screenHeight / this.options.scaleY))
            : (void 0 !== this.options.width &&
                (this.width = this.options.width),
              void 0 !== this.options.height &&
                (this.height = this.options.height)),
          null !== this.width &&
            ((this.startWidth = this.parent.screenWidthInWorldPixels),
            (this.deltaWidth = this.width - this.startWidth)),
          null !== this.height &&
            ((this.startHeight = this.parent.screenHeightInWorldPixels),
            (this.deltaHeight = this.height - this.startHeight));
      }
      down() {
        return (
          this.options.removeOnInterrupt &&
            this.parent.plugins.remove("animate"),
          !1
        );
      }
      complete() {
        this.parent.plugins.remove("animate"),
          null !== this.width &&
            this.parent.fitWidth(
              this.width,
              this.keepCenter,
              null === this.height
            ),
          null !== this.height &&
            this.parent.fitHeight(
              this.height,
              this.keepCenter,
              null === this.width
            ),
          !this.keepCenter &&
            this.options.position &&
            this.parent.moveCenter(this.options.position),
          this.parent.emit("animate-end", this.parent),
          this.options.callbackOnComplete &&
            this.options.callbackOnComplete(this.parent);
      }
      update(t) {
        if (this.paused) return;
        this.time += t;
        const i = new e.Point(this.parent.scale.x, this.parent.scale.y);
        if (this.time >= this.options.time) {
          const t = this.parent.width,
            e = this.parent.height;
          this.complete(),
            (t === this.parent.width && e === this.parent.height) ||
              this.parent.emit("zoomed", {
                viewport: this.parent,
                original: i,
                type: "animate",
              });
        } else {
          const t = this.options.ease(this.time, 0, 1, this.options.time);
          if (null !== this.width) {
            const e = this.startWidth,
              i = this.deltaWidth;
            this.parent.fitWidth(
              e + i * t,
              this.keepCenter,
              null === this.height
            );
          }
          if (null !== this.height) {
            const e = this.startHeight,
              i = this.deltaHeight;
            this.parent.fitHeight(
              e + i * t,
              this.keepCenter,
              null === this.width
            );
          }
          if (
            (null === this.width
              ? (this.parent.scale.x = this.parent.scale.y)
              : null === this.height &&
                (this.parent.scale.y = this.parent.scale.x),
            !this.keepCenter)
          ) {
            const i = this.startX,
              s = this.startY,
              n = this.deltaX,
              h = this.deltaY,
              o = new e.Point(this.parent.x, this.parent.y);
            this.parent.moveCenter(i + n * t, s + h * t),
              this.parent.emit("moved", {
                viewport: this.parent,
                original: o,
                type: "animate",
              });
          }
          (this.width || this.height) &&
            this.parent.emit("zoomed", {
              viewport: this.parent,
              original: i,
              type: "animate",
            });
        }
      }
    }
    function d(t) {
      let e = void 0,
        i = t[0],
        s = 1;
      for (; s < t.length; ) {
        const n = t[s],
          h = t[s + 1];
        if (
          ((s += 2),
          ("optionalAccess" === n || "optionalCall" === n) && null == i)
        )
          return;
        "access" === n || "optionalAccess" === n
          ? ((e = i), (i = h(i)))
          : ("call" !== n && "optionalCall" !== n) ||
            ((i = h((...t) => i.call(e, ...t))), (e = void 0));
      }
      return i;
    }
    const u = {
      sides: "all",
      friction: 0.5,
      time: 150,
      ease: "easeInOutSine",
      underflow: "center",
      bounceBox: null,
    };
    class m extends n {
      constructor(t, e = {}) {
        super(t),
          (this.options = Object.assign({}, u, e)),
          (this.ease = p(this.options.ease, "easeInOutSine")),
          this.options.sides
            ? "all" === this.options.sides
              ? (this.top = this.bottom = this.left = this.right = !0)
              : "horizontal" === this.options.sides
              ? ((this.right = this.left = !0), (this.top = this.bottom = !1))
              : "vertical" === this.options.sides
              ? ((this.left = this.right = !1), (this.top = this.bottom = !0))
              : ((this.top = -1 !== this.options.sides.indexOf("top")),
                (this.bottom = -1 !== this.options.sides.indexOf("bottom")),
                (this.left = -1 !== this.options.sides.indexOf("left")),
                (this.right = -1 !== this.options.sides.indexOf("right")))
            : (this.left = this.top = this.right = this.bottom = !1);
        const i = this.options.underflow.toLowerCase();
        "center" === i
          ? ((this.underflowX = 0), (this.underflowY = 0))
          : ((this.underflowX =
              -1 !== i.indexOf("left")
                ? -1
                : -1 !== i.indexOf("right")
                ? 1
                : 0),
            (this.underflowY =
              -1 !== i.indexOf("top")
                ? -1
                : -1 !== i.indexOf("bottom")
                ? 1
                : 0)),
          this.reset();
      }
      isActive() {
        return null !== this.toX || null !== this.toY;
      }
      down() {
        return (this.toX = this.toY = null), !1;
      }
      up() {
        return this.bounce(), !1;
      }
      update(t) {
        if (!this.paused) {
          if ((this.bounce(), this.toX)) {
            const e = this.toX;
            (e.time += t),
              this.parent.emit("moved", {
                viewport: this.parent,
                type: "bounce-x",
              }),
              e.time >= this.options.time
                ? ((this.parent.x = e.end),
                  (this.toX = null),
                  this.parent.emit("bounce-x-end", this.parent))
                : (this.parent.x = this.ease(
                    e.time,
                    e.start,
                    e.delta,
                    this.options.time
                  ));
          }
          if (this.toY) {
            const e = this.toY;
            (e.time += t),
              this.parent.emit("moved", {
                viewport: this.parent,
                type: "bounce-y",
              }),
              e.time >= this.options.time
                ? ((this.parent.y = e.end),
                  (this.toY = null),
                  this.parent.emit("bounce-y-end", this.parent))
                : (this.parent.y = this.ease(
                    e.time,
                    e.start,
                    e.delta,
                    this.options.time
                  ));
          }
        }
      }
      calcUnderflowX() {
        let t;
        switch (this.underflowX) {
          case -1:
            t = 0;
            break;
          case 1:
            t = this.parent.screenWidth - this.parent.screenWorldWidth;
            break;
          default:
            t = (this.parent.screenWidth - this.parent.screenWorldWidth) / 2;
        }
        return t;
      }
      calcUnderflowY() {
        let t;
        switch (this.underflowY) {
          case -1:
            t = 0;
            break;
          case 1:
            t = this.parent.screenHeight - this.parent.screenWorldHeight;
            break;
          default:
            t = (this.parent.screenHeight - this.parent.screenWorldHeight) / 2;
        }
        return t;
      }
      oob() {
        const t = this.options.bounceBox;
        if (t) {
          const i = void 0 === t.x ? 0 : t.x,
            s = void 0 === t.y ? 0 : t.y,
            n = void 0 === t.width ? this.parent.worldWidth : t.width,
            h = void 0 === t.height ? this.parent.worldHeight : t.height;
          return {
            left: this.parent.left < i,
            right: this.parent.right > n,
            top: this.parent.top < s,
            bottom: this.parent.bottom > h,
            topLeft: new e.Point(
              i * this.parent.scale.x,
              s * this.parent.scale.y
            ),
            bottomRight: new e.Point(
              n * this.parent.scale.x - this.parent.screenWidth,
              h * this.parent.scale.y - this.parent.screenHeight
            ),
          };
        }
        return {
          left: this.parent.left < 0,
          right: this.parent.right > this.parent.worldWidth,
          top: this.parent.top < 0,
          bottom: this.parent.bottom > this.parent.worldHeight,
          topLeft: new e.Point(0, 0),
          bottomRight: new e.Point(
            this.parent.worldWidth * this.parent.scale.x -
              this.parent.screenWidth,
            this.parent.worldHeight * this.parent.scale.y -
              this.parent.screenHeight
          ),
        };
      }
      bounce() {
        if (this.paused) return;
        let t,
          e = this.parent.plugins.get("decelerate", !0);
        e &&
          (e.x || e.y) &&
          ((e.x &&
            e.percentChangeX ===
              d([
                e,
                "access",
                (t) => t.options,
                "optionalAccess",
                (t) => t.friction,
              ])) ||
            (e.y &&
              e.percentChangeY ===
                d([
                  e,
                  "access",
                  (t) => t.options,
                  "optionalAccess",
                  (t) => t.friction,
                ]))) &&
          ((((t = this.oob()).left && this.left) || (t.right && this.right)) &&
            (e.percentChangeX = this.options.friction),
          ((t.top && this.top) || (t.bottom && this.bottom)) &&
            (e.percentChangeY = this.options.friction));
        const i = this.parent.plugins.get("drag", !0) || {},
          s = this.parent.plugins.get("pinch", !0) || {};
        if (
          ((e = e || {}),
          !(
            d([i, "optionalAccess", (t) => t.active]) ||
            d([s, "optionalAccess", (t) => t.active]) ||
            (this.toX && this.toY) ||
            (e.x && e.y)
          ))
        ) {
          const i = (t = t || this.oob()).topLeft,
            s = t.bottomRight;
          if (!this.toX && !e.x) {
            let e = null;
            t.left && this.left
              ? (e =
                  this.parent.screenWorldWidth < this.parent.screenWidth
                    ? this.calcUnderflowX()
                    : -i.x)
              : t.right &&
                this.right &&
                (e =
                  this.parent.screenWorldWidth < this.parent.screenWidth
                    ? this.calcUnderflowX()
                    : -s.x),
              null !== e &&
                this.parent.x !== e &&
                ((this.toX = {
                  time: 0,
                  start: this.parent.x,
                  delta: e - this.parent.x,
                  end: e,
                }),
                this.parent.emit("bounce-x-start", this.parent));
          }
          if (!this.toY && !e.y) {
            let e = null;
            t.top && this.top
              ? (e =
                  this.parent.screenWorldHeight < this.parent.screenHeight
                    ? this.calcUnderflowY()
                    : -i.y)
              : t.bottom &&
                this.bottom &&
                (e =
                  this.parent.screenWorldHeight < this.parent.screenHeight
                    ? this.calcUnderflowY()
                    : -s.y),
              null !== e &&
                this.parent.y !== e &&
                ((this.toY = {
                  time: 0,
                  start: this.parent.y,
                  delta: e - this.parent.y,
                  end: e,
                }),
                this.parent.emit("bounce-y-start", this.parent));
          }
        }
      }
      reset() {
        (this.toX = this.toY = null), this.bounce();
      }
    }
    const g = {
      left: !1,
      right: !1,
      top: !1,
      bottom: !1,
      direction: null,
      underflow: "center",
    };
    class w extends n {
      constructor(t, e = {}) {
        super(t),
          (this.options = Object.assign({}, g, e)),
          this.options.direction &&
            ((this.options.left =
              "x" === this.options.direction ||
              "all" === this.options.direction ||
              null),
            (this.options.right =
              "x" === this.options.direction ||
              "all" === this.options.direction ||
              null),
            (this.options.top =
              "y" === this.options.direction ||
              "all" === this.options.direction ||
              null),
            (this.options.bottom =
              "y" === this.options.direction ||
              "all" === this.options.direction ||
              null)),
          this.parseUnderflow(),
          (this.last = {
            x: null,
            y: null,
            scaleX: null,
            scaleY: null,
          }),
          this.update();
      }
      parseUnderflow() {
        const t = this.options.underflow.toLowerCase();
        "none" === t
          ? (this.noUnderflow = !0)
          : "center" === t
          ? ((this.underflowX = this.underflowY = 0), (this.noUnderflow = !1))
          : ((this.underflowX =
              -1 !== t.indexOf("left")
                ? -1
                : -1 !== t.indexOf("right")
                ? 1
                : 0),
            (this.underflowY =
              -1 !== t.indexOf("top")
                ? -1
                : -1 !== t.indexOf("bottom")
                ? 1
                : 0),
            (this.noUnderflow = !1));
      }
      move() {
        return this.update(), !1;
      }
      update() {
        if (this.paused) return;
        if (
          this.parent.x === this.last.x &&
          this.parent.y === this.last.y &&
          this.parent.scale.x === this.last.scaleX &&
          this.parent.scale.y === this.last.scaleY
        )
          return;
        const t = {
            x: this.parent.x,
            y: this.parent.y,
          },
          e = this.parent.plugins.decelerate || {};
        if (null !== this.options.left || null !== this.options.right) {
          let i = !1;
          if (
            !this.noUnderflow &&
            this.parent.screenWorldWidth < this.parent.screenWidth
          )
            switch (this.underflowX) {
              case -1:
                0 !== this.parent.x && ((this.parent.x = 0), (i = !0));
                break;
              case 1:
                this.parent.x !==
                  this.parent.screenWidth - this.parent.screenWorldWidth &&
                  ((this.parent.x =
                    this.parent.screenWidth - this.parent.screenWorldWidth),
                  (i = !0));
                break;
              default:
                this.parent.x !==
                  (this.parent.screenWidth - this.parent.screenWorldWidth) /
                    2 &&
                  ((this.parent.x =
                    (this.parent.screenWidth - this.parent.screenWorldWidth) /
                    2),
                  (i = !0));
            }
          else
            null !== this.options.left &&
              this.parent.left <
                (!0 === this.options.left ? 0 : this.options.left) &&
              ((this.parent.x =
                -(!0 === this.options.left ? 0 : this.options.left) *
                this.parent.scale.x),
              (e.x = 0),
              (i = !0)),
              null !== this.options.right &&
                this.parent.right >
                  (!0 === this.options.right
                    ? this.parent.worldWidth
                    : this.options.right) &&
                ((this.parent.x =
                  -(!0 === this.options.right
                    ? this.parent.worldWidth
                    : this.options.right) *
                    this.parent.scale.x +
                  this.parent.screenWidth),
                (e.x = 0),
                (i = !0));
          i &&
            this.parent.emit("moved", {
              viewport: this.parent,
              original: t,
              type: "clamp-x",
            });
        }
        if (null !== this.options.top || null !== this.options.bottom) {
          let i = !1;
          if (
            !this.noUnderflow &&
            this.parent.screenWorldHeight < this.parent.screenHeight
          )
            switch (this.underflowY) {
              case -1:
                0 !== this.parent.y && ((this.parent.y = 0), (i = !0));
                break;
              case 1:
                this.parent.y !==
                  this.parent.screenHeight - this.parent.screenWorldHeight &&
                  ((this.parent.y =
                    this.parent.screenHeight - this.parent.screenWorldHeight),
                  (i = !0));
                break;
              default:
                this.parent.y !==
                  (this.parent.screenHeight - this.parent.screenWorldHeight) /
                    2 &&
                  ((this.parent.y =
                    (this.parent.screenHeight - this.parent.screenWorldHeight) /
                    2),
                  (i = !0));
            }
          else
            null !== this.options.top &&
              this.parent.top <
                (!0 === this.options.top ? 0 : this.options.top) &&
              ((this.parent.y =
                -(!0 === this.options.top ? 0 : this.options.top) *
                this.parent.scale.y),
              (e.y = 0),
              (i = !0)),
              null !== this.options.bottom &&
                this.parent.bottom >
                  (!0 === this.options.bottom
                    ? this.parent.worldHeight
                    : this.options.bottom) &&
                ((this.parent.y =
                  -(!0 === this.options.bottom
                    ? this.parent.worldHeight
                    : this.options.bottom) *
                    this.parent.scale.y +
                  this.parent.screenHeight),
                (e.y = 0),
                (i = !0));
          i &&
            this.parent.emit("moved", {
              viewport: this.parent,
              original: t,
              type: "clamp-y",
            });
        }
        (this.last.x = this.parent.x),
          (this.last.y = this.parent.y),
          (this.last.scaleX = this.parent.scale.x),
          (this.last.scaleY = this.parent.scale.y);
      }
      reset() {
        this.update();
      }
    }
    const y = {
      minWidth: null,
      minHeight: null,
      maxWidth: null,
      maxHeight: null,
      minScale: null,
      maxScale: null,
    };
    class f extends n {
      constructor(t, e = {}) {
        super(t), (this.options = Object.assign({}, y, e)), this.clamp();
      }
      resize() {
        this.clamp();
      }
      clamp() {
        if (!this.paused)
          if (
            this.options.minWidth ||
            this.options.minHeight ||
            this.options.maxWidth ||
            this.options.maxHeight
          ) {
            let t = this.parent.worldScreenWidth,
              e = this.parent.worldScreenHeight;
            if (null !== this.options.minWidth && t < this.options.minWidth) {
              const i = this.parent.scale.x;
              this.parent.fitWidth(this.options.minWidth, !1, !1, !0),
                (this.parent.scale.y *= this.parent.scale.x / i),
                (t = this.parent.worldScreenWidth),
                (e = this.parent.worldScreenHeight),
                this.parent.emit("zoomed", {
                  viewport: this.parent,
                  type: "clamp-zoom",
                });
            }
            if (null !== this.options.maxWidth && t > this.options.maxWidth) {
              const i = this.parent.scale.x;
              this.parent.fitWidth(this.options.maxWidth, !1, !1, !0),
                (this.parent.scale.y *= this.parent.scale.x / i),
                (t = this.parent.worldScreenWidth),
                (e = this.parent.worldScreenHeight),
                this.parent.emit("zoomed", {
                  viewport: this.parent,
                  type: "clamp-zoom",
                });
            }
            if (null !== this.options.minHeight && e < this.options.minHeight) {
              const i = this.parent.scale.y;
              this.parent.fitHeight(this.options.minHeight, !1, !1, !0),
                (this.parent.scale.x *= this.parent.scale.y / i),
                (t = this.parent.worldScreenWidth),
                (e = this.parent.worldScreenHeight),
                this.parent.emit("zoomed", {
                  viewport: this.parent,
                  type: "clamp-zoom",
                });
            }
            if (null !== this.options.maxHeight && e > this.options.maxHeight) {
              const t = this.parent.scale.y;
              this.parent.fitHeight(this.options.maxHeight, !1, !1, !0),
                (this.parent.scale.x *= this.parent.scale.y / t),
                this.parent.emit("zoomed", {
                  viewport: this.parent,
                  type: "clamp-zoom",
                });
            }
          } else if (this.options.minScale || this.options.maxScale) {
            const t = {
                x: null,
                y: null,
              },
              e = {
                x: null,
                y: null,
              };
            if ("number" == typeof this.options.minScale)
              (t.x = this.options.minScale), (t.y = this.options.minScale);
            else if (null !== this.options.minScale) {
              const e = this.options.minScale;
              (t.x = void 0 === e.x ? null : e.x),
                (t.y = void 0 === e.y ? null : e.y);
            }
            if ("number" == typeof this.options.maxScale)
              (e.x = this.options.maxScale), (e.y = this.options.maxScale);
            else if (null !== this.options.maxScale) {
              const t = this.options.maxScale;
              (e.x = void 0 === t.x ? null : t.x),
                (e.y = void 0 === t.y ? null : t.y);
            }
            let i = this.parent.scale.x,
              s = this.parent.scale.y;
            null !== t.x && i < t.x && (i = t.x),
              null !== e.x && i > e.x && (i = e.x),
              null !== t.y && s < t.y && (s = t.y),
              null !== e.y && s > e.y && (s = e.y),
              (i === this.parent.scale.x && s === this.parent.scale.y) ||
                (this.parent.scale.set(i, s),
                this.parent.emit("zoomed", {
                  viewport: this.parent,
                  type: "clamp-zoom",
                }));
          }
      }
      reset() {
        this.clamp();
      }
    }
    const x = {
        friction: 0.98,
        bounce: 0.8,
        minSpeed: 0.01,
      },
      v = 16;
    class W extends n {
      constructor(t, e = {}) {
        super(t),
          (this.options = Object.assign({}, x, e)),
          (this.saved = []),
          (this.timeSinceRelease = 0),
          this.reset(),
          this.parent.on("moved", (t) => this.moved(t));
      }
      down() {
        return (this.saved = []), (this.x = this.y = null), !1;
      }
      isActive() {
        return !(!this.x && !this.y);
      }
      move() {
        if (this.paused) return !1;
        const t = this.parent.input.count();
        return (
          (1 === t || (t > 1 && !this.parent.plugins.get("pinch", !0))) &&
            (this.saved.push({
              x: this.parent.x,
              y: this.parent.y,
              time: performance.now(),
            }),
            this.saved.length > 60 && this.saved.splice(0, 30)),
          !1
        );
      }
      moved(t) {
        if (this.saved.length) {
          const e = this.saved[this.saved.length - 1];
          "clamp-x" === t.type
            ? e.x === t.original.x && (e.x = this.parent.x)
            : "clamp-y" === t.type &&
              e.y === t.original.y &&
              (e.y = this.parent.y);
        }
      }
      up() {
        if (0 === this.parent.input.count() && this.saved.length) {
          const t = performance.now();
          for (const e of this.saved)
            if (e.time >= t - 100) {
              const i = t - e.time;
              (this.x = (this.parent.x - e.x) / i),
                (this.y = (this.parent.y - e.y) / i),
                (this.percentChangeX = this.percentChangeY =
                  this.options.friction),
                (this.timeSinceRelease = 0);
              break;
            }
        }
        return !1;
      }
      activate(t) {
        void 0 !== (t = t || {}).x &&
          ((this.x = t.x), (this.percentChangeX = this.options.friction)),
          void 0 !== t.y &&
            ((this.y = t.y), (this.percentChangeY = this.options.friction));
      }
      update(t) {
        if (this.paused) return;
        const e = this.x || this.y,
          i = this.timeSinceRelease,
          s = this.timeSinceRelease + t;
        if (this.x) {
          const e = this.percentChangeX,
            n = Math.log(e);
          (this.parent.x +=
            ((this.x * v) / n) * (Math.pow(e, s / v) - Math.pow(e, i / v))),
            (this.x *= Math.pow(this.percentChangeX, t / v));
        }
        if (this.y) {
          const e = this.percentChangeY,
            n = Math.log(e);
          (this.parent.y +=
            ((this.y * v) / n) * (Math.pow(e, s / v) - Math.pow(e, i / v))),
            (this.y *= Math.pow(this.percentChangeY, t / v));
        }
        (this.timeSinceRelease += t),
          this.x && this.y
            ? Math.abs(this.x) < this.options.minSpeed &&
              Math.abs(this.y) < this.options.minSpeed &&
              ((this.x = 0), (this.y = 0))
            : (Math.abs(this.x || 0) < this.options.minSpeed && (this.x = 0),
              Math.abs(this.y || 0) < this.options.minSpeed && (this.y = 0)),
          e &&
            this.parent.emit("moved", {
              viewport: this.parent,
              type: "decelerate",
            });
      }
      reset() {
        this.x = this.y = null;
      }
    }
    const b = {
      direction: "all",
      pressDrag: !0,
      wheel: !0,
      wheelScroll: 1,
      reverse: !1,
      clampWheel: !1,
      underflow: "center",
      factor: 1,
      mouseButtons: "all",
      keyToPress: null,
      ignoreKeyToPressOnTouch: !1,
      lineHeight: 20,
      wheelSwapAxes: !1,
    };
    class H extends n {
      __init() {
        this.windowEventHandlers = new Array();
      }
      constructor(t, e = {}) {
        super(t),
          H.prototype.__init.call(this),
          (this.options = Object.assign({}, b, e)),
          (this.moved = !1),
          (this.reverse = this.options.reverse ? 1 : -1),
          (this.xDirection =
            !this.options.direction ||
            "all" === this.options.direction ||
            "x" === this.options.direction),
          (this.yDirection =
            !this.options.direction ||
            "all" === this.options.direction ||
            "y" === this.options.direction),
          (this.keyIsPressed = !1),
          this.parseUnderflow(),
          this.mouseButtons(this.options.mouseButtons),
          this.options.keyToPress &&
            this.handleKeyPresses(this.options.keyToPress);
      }
      handleKeyPresses(t) {
        this.addWindowEventHandler("keyup", (e) => {
          t.includes(e.code) && (this.keyIsPressed = !1);
        }),
          this.addWindowEventHandler("keydown", (e) => {
            t.includes(e.code) && (this.keyIsPressed = !0);
          });
      }
      addWindowEventHandler(t, e) {
        window.addEventListener(t, e),
          this.windowEventHandlers.push({
            event: t,
            handler: e,
          });
      }
      destroy() {
        this.windowEventHandlers.forEach(({ event: t, handler: e }) => {
          window.removeEventListener(t, e);
        });
      }
      mouseButtons(t) {
        this.mouse =
          t && "all" !== t
            ? [
                -1 !== t.indexOf("left"),
                -1 !== t.indexOf("middle"),
                -1 !== t.indexOf("right"),
              ]
            : [!0, !0, !0];
      }
      parseUnderflow() {
        const t = this.options.underflow.toLowerCase();
        "center" === t
          ? ((this.underflowX = 0), (this.underflowY = 0))
          : (t.includes("left")
              ? (this.underflowX = -1)
              : t.includes("right")
              ? (this.underflowX = 1)
              : (this.underflowX = 0),
            t.includes("top")
              ? (this.underflowY = -1)
              : t.includes("bottom")
              ? (this.underflowY = 1)
              : (this.underflowY = 0));
      }
      checkButtons(t) {
        const e = "mouse" === t.data.pointerType,
          i = this.parent.input.count();
        return !(
          !(1 === i || (i > 1 && !this.parent.plugins.get("pinch", !0))) ||
          (e && !this.mouse[t.data.button])
        );
      }
      checkKeyPress(t) {
        return (
          !this.options.keyToPress ||
          this.keyIsPressed ||
          (this.options.ignoreKeyToPressOnTouch &&
            "touch" === t.data.pointerType)
        );
      }
      down(t) {
        return (
          !(this.paused || !this.options.pressDrag) &&
          (this.checkButtons(t) && this.checkKeyPress(t)
            ? ((this.last = {
                x: t.data.global.x,
                y: t.data.global.y,
              }),
              (this.current = t.data.pointerId),
              !0)
            : ((this.last = null), !1))
        );
      }
      get active() {
        return this.moved;
      }
      move(t) {
        if (this.paused || !this.options.pressDrag) return !1;
        if (this.last && this.current === t.data.pointerId) {
          const i = t.data.global.x,
            s = t.data.global.y,
            n = this.parent.input.count();
          if (1 === n || (n > 1 && !this.parent.plugins.get("pinch", !0))) {
            const n = i - this.last.x,
              h = s - this.last.y;
            if (
              this.moved ||
              (this.xDirection && this.parent.input.checkThreshold(n)) ||
              (this.yDirection && this.parent.input.checkThreshold(h))
            ) {
              const n = {
                x: i,
                y: s,
              };
              return (
                this.xDirection &&
                  (this.parent.x += (n.x - this.last.x) * this.options.factor),
                this.yDirection &&
                  (this.parent.y += (n.y - this.last.y) * this.options.factor),
                (this.last = n),
                this.moved ||
                  this.parent.emit("drag-start", {
                    event: t,
                    screen: new e.Point(this.last.x, this.last.y),
                    world: this.parent.toWorld(
                      new e.Point(this.last.x, this.last.y)
                    ),
                    viewport: this.parent,
                  }),
                (this.moved = !0),
                this.parent.emit("moved", {
                  viewport: this.parent,
                  type: "drag",
                }),
                !0
              );
            }
          } else this.moved = !1;
        }
        return !1;
      }
      up(t) {
        if (this.paused) return !1;
        const i = this.parent.input.touches;
        if (1 === i.length) {
          const t = i[0];
          return (
            t.last &&
              ((this.last = {
                x: t.last.x,
                y: t.last.y,
              }),
              (this.current = t.id)),
            (this.moved = !1),
            !0
          );
        }
        if (this.last && this.moved) {
          const i = new e.Point(this.last.x, this.last.y);
          return (
            this.parent.emit("drag-end", {
              event: t,
              screen: i,
              world: this.parent.toWorld(i),
              viewport: this.parent,
            }),
            (this.last = null),
            (this.moved = !1),
            !0
          );
        }
        return !1;
      }
      wheel(t) {
        if (this.paused) return !1;
        if (this.options.wheel) {
          const e = this.parent.plugins.get("wheel", !0);
          if (!e || (!e.options.wheelZoom && !t.ctrlKey)) {
            const e = t.deltaMode ? this.options.lineHeight : 1,
              i = [t.deltaX, t.deltaY],
              [s, n] = this.options.wheelSwapAxes ? i.reverse() : i;
            return (
              this.xDirection &&
                (this.parent.x +=
                  s * e * this.options.wheelScroll * this.reverse),
              this.yDirection &&
                (this.parent.y +=
                  n * e * this.options.wheelScroll * this.reverse),
              this.options.clampWheel && this.clamp(),
              this.parent.emit("wheel-scroll", this.parent),
              this.parent.emit("moved", {
                viewport: this.parent,
                type: "wheel",
              }),
              this.parent.options.passiveWheel || t.preventDefault(),
              this.parent.options.stopPropagation && t.stopPropagation(),
              !0
            );
          }
        }
        return !1;
      }
      resume() {
        (this.last = null), (this.paused = !1);
      }
      clamp() {
        const t = this.parent.plugins.get("decelerate", !0) || {};
        if ("y" !== this.options.clampWheel)
          if (this.parent.screenWorldWidth < this.parent.screenWidth)
            switch (this.underflowX) {
              case -1:
                this.parent.x = 0;
                break;
              case 1:
                this.parent.x =
                  this.parent.screenWidth - this.parent.screenWorldWidth;
                break;
              default:
                this.parent.x =
                  (this.parent.screenWidth - this.parent.screenWorldWidth) / 2;
            }
          else
            this.parent.left < 0
              ? ((this.parent.x = 0), (t.x = 0))
              : this.parent.right > this.parent.worldWidth &&
                ((this.parent.x =
                  -this.parent.worldWidth * this.parent.scale.x +
                  this.parent.screenWidth),
                (t.x = 0));
        if ("x" !== this.options.clampWheel)
          if (this.parent.screenWorldHeight < this.parent.screenHeight)
            switch (this.underflowY) {
              case -1:
                this.parent.y = 0;
                break;
              case 1:
                this.parent.y =
                  this.parent.screenHeight - this.parent.screenWorldHeight;
                break;
              default:
                this.parent.y =
                  (this.parent.screenHeight - this.parent.screenWorldHeight) /
                  2;
            }
          else
            this.parent.top < 0 && ((this.parent.y = 0), (t.y = 0)),
              this.parent.bottom > this.parent.worldHeight &&
                ((this.parent.y =
                  -this.parent.worldHeight * this.parent.scale.y +
                  this.parent.screenHeight),
                (t.y = 0));
      }
    }
    const M = {
      speed: 0,
      acceleration: null,
      radius: null,
    };
    class S extends n {
      constructor(t, e, i = {}) {
        super(t),
          (this.target = e),
          (this.options = Object.assign({}, M, i)),
          (this.velocity = {
            x: 0,
            y: 0,
          });
      }
      update(t) {
        if (this.paused) return;
        const e = this.parent.center;
        let i = this.target.x,
          s = this.target.y;
        if (this.options.radius) {
          if (
            !(
              Math.sqrt(
                Math.pow(this.target.y - e.y, 2) +
                  Math.pow(this.target.x - e.x, 2)
              ) > this.options.radius
            )
          )
            return;
          {
            const t = Math.atan2(this.target.y - e.y, this.target.x - e.x);
            (i = this.target.x - Math.cos(t) * this.options.radius),
              (s = this.target.y - Math.sin(t) * this.options.radius);
          }
        }
        const n = i - e.x,
          h = s - e.y;
        if (n || h)
          if (this.options.speed)
            if (this.options.acceleration) {
              const t = Math.atan2(s - e.y, i - e.x),
                o = Math.sqrt(Math.pow(n, 2) + Math.pow(h, 2));
              if (o) {
                const r =
                  (Math.pow(this.velocity.x, 2) +
                    Math.pow(this.velocity.y, 2)) /
                  (2 * this.options.acceleration);
                this.velocity =
                  o > r
                    ? {
                        x: Math.min(
                          this.velocity.x +
                            (this.options.acceleration, this.options.speed)
                        ),
                        y: Math.min(
                          this.velocity.y +
                            (this.options.acceleration, this.options.speed)
                        ),
                      }
                    : {
                        x: Math.max(
                          this.velocity.x -
                            this.options.acceleration * this.options.speed,
                          0
                        ),
                        y: Math.max(
                          this.velocity.y -
                            this.options.acceleration * this.options.speed,
                          0
                        ),
                      };
                const a = Math.cos(t) * this.velocity.x,
                  p = Math.sin(t) * this.velocity.y,
                  l = Math.abs(a) > Math.abs(n) ? i : e.x + a,
                  c = Math.abs(p) > Math.abs(h) ? s : e.y + p;
                this.parent.moveCenter(l, c),
                  this.parent.emit("moved", {
                    viewport: this.parent,
                    type: "follow",
                  });
              }
            } else {
              const t = Math.atan2(s - e.y, i - e.x),
                o = Math.cos(t) * this.options.speed,
                r = Math.sin(t) * this.options.speed,
                a = Math.abs(o) > Math.abs(n) ? i : e.x + o,
                p = Math.abs(r) > Math.abs(h) ? s : e.y + r;
              this.parent.moveCenter(a, p),
                this.parent.emit("moved", {
                  viewport: this.parent,
                  type: "follow",
                });
            }
          else
            this.parent.moveCenter(i, s),
              this.parent.emit("moved", {
                viewport: this.parent,
                type: "follow",
              });
      }
    }
    const P = {
      radius: null,
      distance: null,
      top: null,
      bottom: null,
      left: null,
      right: null,
      speed: 8,
      reverse: !1,
      noDecelerate: !1,
      linear: !1,
      allowButtons: !1,
    };
    class C extends n {
      constructor(t, e = {}) {
        super(t),
          (this.options = Object.assign({}, P, e)),
          (this.reverse = this.options.reverse ? 1 : -1),
          (this.radiusSquared =
            "number" == typeof this.options.radius
              ? Math.pow(this.options.radius, 2)
              : null),
          this.resize();
      }
      resize() {
        const t = this.options.distance;
        null !== t
          ? ((this.left = t),
            (this.top = t),
            (this.right = this.parent.screenWidth - t),
            (this.bottom = this.parent.screenHeight - t))
          : this.options.radius ||
            ((this.left = this.options.left),
            (this.top = this.options.top),
            (this.right =
              null === this.options.right
                ? null
                : this.parent.screenWidth - this.options.right),
            (this.bottom =
              null === this.options.bottom
                ? null
                : this.parent.screenHeight - this.options.bottom));
      }
      down() {
        return (
          !this.paused &&
          (this.options.allowButtons ||
            (this.horizontal = this.vertical = null),
          !1)
        );
      }
      move(t) {
        if (this.paused) return !1;
        if (
          ("mouse" !== t.data.pointerType && 1 !== t.data.identifier) ||
          (!this.options.allowButtons && 0 !== t.data.buttons)
        )
          return !1;
        const e = t.data.global.x,
          i = t.data.global.y;
        if (this.radiusSquared) {
          const t = this.parent.toScreen(this.parent.center);
          if (
            Math.pow(t.x - e, 2) + Math.pow(t.y - i, 2) >=
            this.radiusSquared
          ) {
            const s = Math.atan2(t.y - i, t.x - e);
            this.options.linear
              ? ((this.horizontal =
                  Math.round(Math.cos(s)) *
                  this.options.speed *
                  this.reverse *
                  0.06),
                (this.vertical =
                  Math.round(Math.sin(s)) *
                  this.options.speed *
                  this.reverse *
                  0.06))
              : ((this.horizontal =
                  Math.cos(s) * this.options.speed * this.reverse * 0.06),
                (this.vertical =
                  Math.sin(s) * this.options.speed * this.reverse * 0.06));
          } else
            this.horizontal && this.decelerateHorizontal(),
              this.vertical && this.decelerateVertical(),
              (this.horizontal = this.vertical = 0);
        } else null !== this.left && e < this.left ? (this.horizontal = Number(this.reverse) * this.options.speed * 0.06) : null !== this.right && e > this.right ? (this.horizontal = -1 * this.reverse * this.options.speed * 0.06) : (this.decelerateHorizontal(), (this.horizontal = 0)), null !== this.top && i < this.top ? (this.vertical = Number(this.reverse) * this.options.speed * 0.06) : null !== this.bottom && i > this.bottom ? (this.vertical = -1 * this.reverse * this.options.speed * 0.06) : (this.decelerateVertical(), (this.vertical = 0));
        return !1;
      }
      decelerateHorizontal() {
        const t = this.parent.plugins.get("decelerate", !0);
        this.horizontal &&
          t &&
          !this.options.noDecelerate &&
          t.activate({
            x:
              (this.horizontal * this.options.speed * this.reverse) /
              (1e3 / 60),
          });
      }
      decelerateVertical() {
        const t = this.parent.plugins.get("decelerate", !0);
        this.vertical &&
          t &&
          !this.options.noDecelerate &&
          t.activate({
            y: (this.vertical * this.options.speed * this.reverse) / (1e3 / 60),
          });
      }
      up() {
        return (
          !this.paused &&
          (this.horizontal && this.decelerateHorizontal(),
          this.vertical && this.decelerateVertical(),
          (this.horizontal = this.vertical = null),
          !1)
        );
      }
      update() {
        if (!this.paused && (this.horizontal || this.vertical)) {
          const t = this.parent.center;
          this.horizontal && (t.x += this.horizontal * this.options.speed),
            this.vertical && (t.y += this.vertical * this.options.speed),
            this.parent.moveCenter(t),
            this.parent.emit("moved", {
              viewport: this.parent,
              type: "mouse-edges",
            });
        }
      }
    }
    const I = {
      noDrag: !1,
      percent: 1,
      center: null,
      factor: 1,
      axis: "all",
    };
    class O extends n {
      __init() {
        this.active = !1;
      }
      __init2() {
        this.pinching = !1;
      }
      __init3() {
        this.moved = !1;
      }
      constructor(t, e = {}) {
        super(t),
          O.prototype.__init.call(this),
          O.prototype.__init2.call(this),
          O.prototype.__init3.call(this),
          (this.options = Object.assign({}, I, e));
      }
      down() {
        return this.parent.input.count() >= 2 && ((this.active = !0), !0);
      }
      isAxisX() {
        return ["all", "x"].includes(this.options.axis);
      }
      isAxisY() {
        return ["all", "y"].includes(this.options.axis);
      }
      move(t) {
        if (this.paused || !this.active) return !1;
        const e = t.data.global.x,
          i = t.data.global.y,
          s = this.parent.input.touches;
        if (s.length >= 2) {
          const n = s[0],
            h = s[1],
            o =
              n.last && h.last
                ? Math.sqrt(
                    Math.pow(h.last.x - n.last.x, 2) +
                      Math.pow(h.last.y - n.last.y, 2)
                  )
                : null;
          if (
            (n.id === t.data.pointerId
              ? (n.last = {
                  x: e,
                  y: i,
                  data: t.data,
                })
              : h.id === t.data.pointerId &&
                (h.last = {
                  x: e,
                  y: i,
                  data: t.data,
                }),
            o)
          ) {
            let t;
            const e = {
              x: n.last.x + (h.last.x - n.last.x) / 2,
              y: n.last.y + (h.last.y - n.last.y) / 2,
            };
            this.options.center || (t = this.parent.toLocal(e));
            let i = Math.sqrt(
              Math.pow(h.last.x - n.last.x, 2) +
                Math.pow(h.last.y - n.last.y, 2)
            );
            const s =
              (1 - o / (i = 0 === i ? (i = 1e-10) : i)) *
              this.options.percent *
              (this.isAxisX() ? this.parent.scale.x : this.parent.scale.y);
            this.isAxisX() && (this.parent.scale.x += s),
              this.isAxisY() && (this.parent.scale.y += s),
              this.parent.emit("zoomed", {
                viewport: this.parent,
                type: "pinch",
                center: e,
              });
            const r = this.parent.plugins.get("clamp-zoom", !0);
            if ((r && r.clamp(), this.options.center))
              this.parent.moveCenter(this.options.center);
            else {
              const i = this.parent.toGlobal(t);
              (this.parent.x += (e.x - i.x) * this.options.factor),
                (this.parent.y += (e.y - i.y) * this.options.factor),
                this.parent.emit("moved", {
                  viewport: this.parent,
                  type: "pinch",
                });
            }
            !this.options.noDrag &&
              this.lastCenter &&
              ((this.parent.x +=
                (e.x - this.lastCenter.x) * this.options.factor),
              (this.parent.y +=
                (e.y - this.lastCenter.y) * this.options.factor),
              this.parent.emit("moved", {
                viewport: this.parent,
                type: "pinch",
              })),
              (this.lastCenter = e),
              (this.moved = !0);
          } else
            this.pinching ||
              (this.parent.emit("pinch-start", this.parent),
              (this.pinching = !0));
          return !0;
        }
        return !1;
      }
      up() {
        return (
          !!(this.pinching && this.parent.input.touches.length <= 1) &&
          ((this.active = !1),
          (this.lastCenter = null),
          (this.pinching = !1),
          (this.moved = !1),
          this.parent.emit("pinch-end", this.parent),
          !0)
        );
      }
    }
    const k = {
      topLeft: !1,
      friction: 0.8,
      time: 1e3,
      ease: "easeInOutSine",
      interrupt: !0,
      removeOnComplete: !1,
      removeOnInterrupt: !1,
      forceStart: !1,
    };
    class z extends n {
      constructor(t, e, i, s = {}) {
        super(t),
          (this.options = Object.assign({}, k, s)),
          (this.ease = p(s.ease, "easeInOutSine")),
          (this.x = e),
          (this.y = i),
          this.options.forceStart && this.snapStart();
      }
      snapStart() {
        (this.percent = 0),
          (this.snapping = {
            time: 0,
          });
        const t = this.options.topLeft
          ? this.parent.corner
          : this.parent.center;
        (this.deltaX = this.x - t.x),
          (this.deltaY = this.y - t.y),
          (this.startX = t.x),
          (this.startY = t.y),
          this.parent.emit("snap-start", this.parent);
      }
      wheel() {
        return (
          this.options.removeOnInterrupt && this.parent.plugins.remove("snap"),
          !1
        );
      }
      down() {
        return (
          this.options.removeOnInterrupt
            ? this.parent.plugins.remove("snap")
            : this.options.interrupt && (this.snapping = null),
          !1
        );
      }
      up() {
        if (0 === this.parent.input.count()) {
          const t = this.parent.plugins.get("decelerate", !0);
          t &&
            (t.x || t.y) &&
            (t.percentChangeX = t.percentChangeY = this.options.friction);
        }
        return !1;
      }
      update(t) {
        if (
          !(
            this.paused ||
            (this.options.interrupt && 0 !== this.parent.input.count())
          )
        )
          if (this.snapping) {
            const e = this.snapping;
            let i, s, n;
            e.time += t;
            const h = this.startX,
              o = this.startY,
              r = this.deltaX,
              a = this.deltaY;
            if (e.time > this.options.time) (i = !0), (s = h + r), (n = o + a);
            else {
              const t = this.ease(e.time, 0, 1, this.options.time);
              (s = h + r * t), (n = o + a * t);
            }
            this.options.topLeft
              ? this.parent.moveCorner(s, n)
              : this.parent.moveCenter(s, n),
              this.parent.emit("moved", {
                viewport: this.parent,
                type: "snap",
              }),
              i &&
                (this.options.removeOnComplete &&
                  this.parent.plugins.remove("snap"),
                this.parent.emit("snap-end", this.parent),
                (this.snapping = null));
          } else {
            const t = this.options.topLeft
              ? this.parent.corner
              : this.parent.center;
            (t.x === this.x && t.y === this.y) || this.snapStart();
          }
      }
    }
    const _ = {
      width: 0,
      height: 0,
      time: 1e3,
      ease: "easeInOutSine",
      center: null,
      interrupt: !0,
      removeOnComplete: !1,
      removeOnInterrupt: !1,
      forceStart: !1,
      noMove: !1,
    };
    class X extends n {
      constructor(t, e = {}) {
        super(t),
          (this.options = Object.assign({}, _, e)),
          (this.ease = p(this.options.ease)),
          (this.xIndependent = !1),
          (this.yIndependent = !1),
          (this.xScale = 0),
          (this.yScale = 0),
          this.options.width > 0 &&
            ((this.xScale = t.screenWidth / this.options.width),
            (this.xIndependent = !0)),
          this.options.height > 0 &&
            ((this.yScale = t.screenHeight / this.options.height),
            (this.yIndependent = !0)),
          (this.xScale = this.xIndependent ? this.xScale : this.yScale),
          (this.yScale = this.yIndependent ? this.yScale : this.xScale),
          0 === this.options.time
            ? ((t.container.scale.x = this.xScale),
              (t.container.scale.y = this.yScale),
              this.options.removeOnComplete &&
                this.parent.plugins.remove("snap-zoom"))
            : e.forceStart && this.createSnapping();
      }
      createSnapping() {
        const t = this.parent.worldScreenWidth,
          e = this.parent.worldScreenHeight,
          i = this.parent.screenWidth / this.xScale,
          s = this.parent.screenHeight / this.yScale;
        (this.snapping = {
          time: 0,
          startX: t,
          startY: e,
          deltaX: i - t,
          deltaY: s - e,
        }),
          this.parent.emit("snap-zoom-start", this.parent);
      }
      resize() {
        (this.snapping = null),
          this.options.width > 0 &&
            (this.xScale = this.parent.screenWidth / this.options.width),
          this.options.height > 0 &&
            (this.yScale = this.parent.screenHeight / this.options.height),
          (this.xScale = this.xIndependent ? this.xScale : this.yScale),
          (this.yScale = this.yIndependent ? this.yScale : this.xScale);
      }
      wheel() {
        return (
          this.options.removeOnInterrupt &&
            this.parent.plugins.remove("snap-zoom"),
          !1
        );
      }
      down() {
        return (
          this.options.removeOnInterrupt
            ? this.parent.plugins.remove("snap-zoom")
            : this.options.interrupt && (this.snapping = null),
          !1
        );
      }
      update(t) {
        if (this.paused) return;
        if (this.options.interrupt && 0 !== this.parent.input.count()) return;
        let e;
        if (
          (this.options.center ||
            this.options.noMove ||
            (e = this.parent.center),
          this.snapping)
        ) {
          if (this.snapping) {
            const i = this.snapping;
            if (((i.time += t), i.time >= this.options.time))
              this.parent.scale.set(this.xScale, this.yScale),
                this.options.removeOnComplete &&
                  this.parent.plugins.remove("snap-zoom"),
                this.parent.emit("snap-zoom-end", this.parent),
                (this.snapping = null);
            else {
              const t = this.snapping,
                e = this.ease(t.time, t.startX, t.deltaX, this.options.time),
                i = this.ease(t.time, t.startY, t.deltaY, this.options.time);
              (this.parent.scale.x = this.parent.screenWidth / e),
                (this.parent.scale.y = this.parent.screenHeight / i);
            }
            const s = this.parent.plugins.get("clamp-zoom", !0);
            s && s.clamp(),
              this.options.noMove ||
                (this.options.center
                  ? this.parent.moveCenter(this.options.center)
                  : this.parent.moveCenter(e));
          }
        } else (this.parent.scale.x === this.xScale && this.parent.scale.y === this.yScale) || this.createSnapping();
      }
      resume() {
        (this.snapping = null), super.resume();
      }
    }
    const Y = {
      percent: 0.1,
      smooth: !1,
      interrupt: !0,
      reverse: !1,
      center: null,
      lineHeight: 20,
      axis: "all",
      keyToPress: null,
      trackpadPinch: !1,
      wheelZoom: !0,
    };
    class A extends n {
      constructor(t, e = {}) {
        super(t),
          (this.options = Object.assign({}, Y, e)),
          (this.keyIsPressed = !1),
          this.options.keyToPress &&
            this.handleKeyPresses(this.options.keyToPress);
      }
      handleKeyPresses(t) {
        window.addEventListener("keydown", (e) => {
          t.includes(e.code) && (this.keyIsPressed = !0);
        }),
          window.addEventListener("keyup", (e) => {
            t.includes(e.code) && (this.keyIsPressed = !1);
          });
      }
      checkKeyPress() {
        return !this.options.keyToPress || this.keyIsPressed;
      }
      down() {
        return this.options.interrupt && (this.smoothing = null), !1;
      }
      isAxisX() {
        return ["all", "x"].includes(this.options.axis);
      }
      isAxisY() {
        return ["all", "y"].includes(this.options.axis);
      }
      update() {
        if (this.smoothing) {
          const t = this.smoothingCenter,
            e = this.smoothing;
          let i;
          this.options.center || (i = this.parent.toLocal(t)),
            this.isAxisX() && (this.parent.scale.x += e.x),
            this.isAxisY() && (this.parent.scale.y += e.y),
            this.parent.emit("zoomed", {
              viewport: this.parent,
              type: "wheel",
            });
          const s = this.parent.plugins.get("clamp-zoom", !0);
          if ((s && s.clamp(), this.options.center))
            this.parent.moveCenter(this.options.center);
          else {
            const e = this.parent.toGlobal(i);
            (this.parent.x += t.x - e.x), (this.parent.y += t.y - e.y);
          }
          this.parent.emit("moved", {
            viewport: this.parent,
            type: "wheel",
          }),
            this.smoothingCount++,
            this.smoothingCount >= this.options.smooth &&
              (this.smoothing = null);
        }
      }
      pinch(t) {
        if (this.paused) return;
        const e = this.parent.input.getPointerPosition(t),
          i = (-t.deltaY * (t.deltaMode ? this.options.lineHeight : 1)) / 200,
          s = Math.pow(2, (1 + this.options.percent) * i);
        let n;
        this.options.center || (n = this.parent.toLocal(e)),
          this.isAxisX() && (this.parent.scale.x *= s),
          this.isAxisY() && (this.parent.scale.y *= s),
          this.parent.emit("zoomed", {
            viewport: this.parent,
            type: "wheel",
          });
        const h = this.parent.plugins.get("clamp-zoom", !0);
        if ((h && h.clamp(), this.options.center))
          this.parent.moveCenter(this.options.center);
        else {
          const t = this.parent.toGlobal(n);
          (this.parent.x += e.x - t.x), (this.parent.y += e.y - t.y);
        }
        this.parent.emit("moved", {
          viewport: this.parent,
          type: "wheel",
        }),
          this.parent.emit("wheel", {
            wheel: {
              dx: t.deltaX,
              dy: t.deltaY,
              dz: t.deltaZ,
            },
            event: t,
            viewport: this.parent,
          });
      }
      wheel(t) {
        if (this.paused) return !1;
        if (!this.checkKeyPress()) return !1;
        if (t.ctrlKey && this.options.trackpadPinch) this.pinch(t);
        else if (this.options.wheelZoom) {
          const e = this.parent.input.getPointerPosition(t),
            i =
              ((this.options.reverse ? -1 : 1) *
                -t.deltaY *
                (t.deltaMode ? this.options.lineHeight : 1)) /
              500,
            s = Math.pow(2, (1 + this.options.percent) * i);
          if (this.options.smooth) {
            const t = {
              x: this.smoothing
                ? this.smoothing.x * (this.options.smooth - this.smoothingCount)
                : 0,
              y: this.smoothing
                ? this.smoothing.y * (this.options.smooth - this.smoothingCount)
                : 0,
            };
            (this.smoothing = {
              x:
                ((this.parent.scale.x + t.x) * s - this.parent.scale.x) /
                this.options.smooth,
              y:
                ((this.parent.scale.y + t.y) * s - this.parent.scale.y) /
                this.options.smooth,
            }),
              (this.smoothingCount = 0),
              (this.smoothingCenter = e);
          } else {
            let t;
            this.options.center || (t = this.parent.toLocal(e)),
              this.isAxisX() && (this.parent.scale.x *= s),
              this.isAxisY() && (this.parent.scale.y *= s),
              this.parent.emit("zoomed", {
                viewport: this.parent,
                type: "wheel",
              });
            const i = this.parent.plugins.get("clamp-zoom", !0);
            if ((i && i.clamp(), this.options.center))
              this.parent.moveCenter(this.options.center);
            else {
              const i = this.parent.toGlobal(t);
              (this.parent.x += e.x - i.x), (this.parent.y += e.y - i.y);
            }
          }
          this.parent.emit("moved", {
            viewport: this.parent,
            type: "wheel",
          }),
            this.parent.emit("wheel", {
              wheel: {
                dx: t.deltaX,
                dy: t.deltaY,
                dz: t.deltaZ,
              },
              event: t,
              viewport: this.parent,
            });
        }
        return !this.parent.options.passiveWheel;
      }
    }
    class D {
      constructor(t) {
        (this.viewport = t), (this.touches = []), this.addListeners();
      }
      addListeners() {
        (this.viewport.interactive = !0),
          this.viewport.forceHitArea ||
            (this.viewport.hitArea = new e.Rectangle(
              0,
              0,
              this.viewport.worldWidth,
              this.viewport.worldHeight
            )),
          this.viewport.on("pointerdown", this.down, this),
          this.viewport.on("pointermove", this.move, this),
          this.viewport.on("pointerup", this.up, this),
          this.viewport.on("pointerupoutside", this.up, this),
          this.viewport.on("pointercancel", this.up, this),
          this.viewport.on("pointerout", this.up, this),
          (this.wheelFunction = (t) => this.handleWheel(t)),
          this.viewport.options.divWheel.addEventListener(
            "wheel",
            this.wheelFunction,
            {
              passive: this.viewport.options.passiveWheel,
            }
          ),
          (this.isMouseDown = !1);
      }
      destroy() {
        this.viewport.options.divWheel.removeEventListener(
          "wheel",
          this.wheelFunction
        );
      }
      down(t) {
        if (this.viewport.pause || !this.viewport.worldVisible) return;
        if (
          ("mouse" === t.data.pointerType
            ? (this.isMouseDown = !0)
            : this.get(t.data.pointerId) ||
              this.touches.push({
                id: t.data.pointerId,
                last: null,
              }),
          1 === this.count())
        ) {
          this.last = t.data.global.clone();
          const e = this.viewport.plugins.get("decelerate", !0),
            i = this.viewport.plugins.get("bounce", !0);
          (e && e.isActive()) || (i && i.isActive())
            ? (this.clickedAvailable = !1)
            : (this.clickedAvailable = !0);
        } else this.clickedAvailable = !1;
        this.viewport.plugins.down(t) &&
          this.viewport.options.stopPropagation &&
          t.stopPropagation();
      }
      clear() {
        (this.isMouseDown = !1), (this.touches = []), (this.last = null);
      }
      checkThreshold(t) {
        return Math.abs(t) >= this.viewport.threshold;
      }
      move(t) {
        if (this.viewport.pause || !this.viewport.worldVisible) return;
        const e = this.viewport.plugins.move(t);
        if (this.clickedAvailable && this.last) {
          const e = t.data.global.x - this.last.x,
            i = t.data.global.y - this.last.y;
          (this.checkThreshold(e) || this.checkThreshold(i)) &&
            (this.clickedAvailable = !1);
        }
        e && this.viewport.options.stopPropagation && t.stopPropagation();
      }
      up(t) {
        if (this.viewport.pause || !this.viewport.worldVisible) return;
        "mouse" === t.data.pointerType && (this.isMouseDown = !1),
          "mouse" !== t.data.pointerType && this.remove(t.data.pointerId);
        const e = this.viewport.plugins.up(t);
        this.clickedAvailable &&
          0 === this.count() &&
          this.last &&
          (this.viewport.emit("clicked", {
            event: t,
            screen: this.last,
            world: this.viewport.toWorld(this.last),
            viewport: this,
          }),
          (this.clickedAvailable = !1)),
          e && this.viewport.options.stopPropagation && t.stopPropagation();
      }
      getPointerPosition(t) {
        const i = new e.Point();
        if (this.viewport.options.interaction)
          this.viewport.options.interaction.mapPositionToPoint(
            i,
            t.clientX,
            t.clientY
          );
        else if (
          this.viewport.options.useDivWheelForInputManager &&
          this.viewport.options.divWheel
        ) {
          const e = this.viewport.options.divWheel.getBoundingClientRect();
          (i.x = t.clientX - e.left), (i.y = t.clientY - e.top);
        } else (i.x = t.clientX), (i.y = t.clientY);
        return i;
      }
      handleWheel(t) {
        if (this.viewport.pause || !this.viewport.worldVisible) return;
        if (
          this.viewport.options.interaction &&
          this.viewport.options.interaction.interactionDOMElement !== t.target
        )
          return;
        const e = this.viewport.toLocal(this.getPointerPosition(t));
        if (
          this.viewport.left <= e.x &&
          e.x <= this.viewport.right &&
          this.viewport.top <= e.y &&
          e.y <= this.viewport.bottom
        ) {
          this.viewport.plugins.wheel(t) &&
            !this.viewport.options.passiveWheel &&
            t.preventDefault();
        }
      }
      pause() {
        (this.touches = []), (this.isMouseDown = !1);
      }
      get(t) {
        for (const e of this.touches) if (e.id === t) return e;
        return null;
      }
      remove(t) {
        for (let e = 0; e < this.touches.length; e++)
          if (this.touches[e].id === t) return void this.touches.splice(e, 1);
      }
      count() {
        return (this.isMouseDown ? 1 : 0) + this.touches.length;
      }
    }
    function T(t) {
      let e = void 0,
        i = t[0],
        s = 1;
      for (; s < t.length; ) {
        const n = t[s],
          h = t[s + 1];
        if (
          ((s += 2),
          ("optionalAccess" === n || "optionalCall" === n) && null == i)
        )
          return;
        "access" === n || "optionalAccess" === n
          ? ((e = i), (i = h(i)))
          : ("call" !== n && "optionalCall" !== n) ||
            ((i = h((...t) => i.call(e, ...t))), (e = void 0));
      }
      return i;
    }
    const L = [
      "drag",
      "pinch",
      "wheel",
      "follow",
      "mouse-edges",
      "decelerate",
      "animate",
      "bounce",
      "snap-zoom",
      "clamp-zoom",
      "snap",
      "clamp",
    ];
    class E {
      constructor(t) {
        (this.viewport = t), (this.list = []), (this.plugins = {});
      }
      add(t, e, i = L.length) {
        const s = this.plugins[t];
        s && s.destroy(), (this.plugins[t] = e);
        const n = L.indexOf(t);
        -1 !== n && L.splice(n, 1), L.splice(i, 0, t), this.sort();
      }
      get(t, e) {
        return e &&
          T([
            this,
            "access",
            (t) => t.plugins,
            "access",
            (e) => e[t],
            "optionalAccess",
            (t) => t.paused,
          ])
          ? null
          : this.plugins[t];
      }
      update(t) {
        for (const e of this.list) e.update(t);
      }
      resize() {
        for (const t of this.list) t.resize();
      }
      reset() {
        for (const t of this.list) t.reset();
      }
      removeAll() {
        this.list.forEach((t) => {
          t.destroy();
        }),
          (this.plugins = {}),
          this.sort();
      }
      remove(t) {
        this.plugins[t] &&
          (T([
            this,
            "access",
            (t) => t.plugins,
            "access",
            (e) => e[t],
            "optionalAccess",
            (t) => t.destroy,
            "call",
            (t) => t(),
          ]),
          delete this.plugins[t],
          this.viewport.emit(`${t}-remove`),
          this.sort());
      }
      pause(t) {
        T([
          this,
          "access",
          (t) => t.plugins,
          "access",
          (e) => e[t],
          "optionalAccess",
          (t) => t.pause,
          "call",
          (t) => t(),
        ]);
      }
      resume(t) {
        T([
          this,
          "access",
          (t) => t.plugins,
          "access",
          (e) => e[t],
          "optionalAccess",
          (t) => t.resume,
          "call",
          (t) => t(),
        ]);
      }
      sort() {
        this.list = [];
        for (const t of L) this.plugins[t] && this.list.push(this.plugins[t]);
      }
      down(t) {
        let e = !1;
        for (const i of this.list) i.down(t) && (e = !0);
        return e;
      }
      move(t) {
        let e = !1;
        for (const i of this.viewport.plugins.list) i.move(t) && (e = !0);
        return e;
      }
      up(t) {
        let e = !1;
        for (const i of this.list) i.up(t) && (e = !0);
        return e;
      }
      wheel(t) {
        let e = !1;
        for (const i of this.list) i.wheel(t) && (e = !0);
        return e;
      }
    }
    const V = {
      screenWidth: window.innerWidth,
      screenHeight: window.innerHeight,
      worldWidth: null,
      worldHeight: null,
      threshold: 5,
      passiveWheel: !0,
      stopPropagation: !1,
      forceHitArea: null,
      noTicker: !1,
      interaction: null,
      disableOnContextMenu: !1,
      ticker: s.Ticker.shared,
    };
    class B extends i.Container {
      __init() {
        this._disableOnContextMenu = (t) => t.preventDefault();
      }
      constructor(t = {}) {
        super(),
          B.prototype.__init.call(this),
          (this.options = Object.assign(
            {},
            {
              divWheel: document.body,
            },
            V,
            t
          )),
          (this.screenWidth = this.options.screenWidth),
          (this.screenHeight = this.options.screenHeight),
          (this._worldWidth = this.options.worldWidth),
          (this._worldHeight = this.options.worldHeight),
          (this.forceHitArea = this.options.forceHitArea),
          (this.threshold = this.options.threshold),
          (this.options.divWheel = this.options.divWheel || document.body),
          this.options.disableOnContextMenu &&
            this.options.divWheel.addEventListener(
              "contextmenu",
              this._disableOnContextMenu
            ),
          this.options.noTicker ||
            ((this.tickerFunction = () =>
              this.update(this.options.ticker.elapsedMS)),
            this.options.ticker.add(this.tickerFunction)),
          (this.input = new D(this)),
          (this.plugins = new E(this));
      }
      destroy(t) {
        !this.options.noTicker &&
          this.tickerFunction &&
          this.options.ticker.remove(this.tickerFunction),
          this.options.disableOnContextMenu &&
            this.options.divWheel.removeEventListener(
              "contextmenu",
              this._disableOnContextMenu
            ),
          this.input.destroy(),
          super.destroy(t);
      }
      update(t) {
        this.pause ||
          (this.plugins.update(t),
          this.lastViewport &&
            (this.lastViewport.x !== this.x || this.lastViewport.y !== this.y
              ? (this.moving = !0)
              : this.moving &&
                (this.emit("moved-end", this), (this.moving = !1)),
            this.lastViewport.scaleX !== this.scale.x ||
            this.lastViewport.scaleY !== this.scale.y
              ? (this.zooming = !0)
              : this.zooming &&
                (this.emit("zoomed-end", this), (this.zooming = !1))),
          this.forceHitArea ||
            ((this._hitAreaDefault = new e.Rectangle(
              this.left,
              this.top,
              this.worldScreenWidth,
              this.worldScreenHeight
            )),
            (this.hitArea = this._hitAreaDefault)),
          (this._dirty =
            this._dirty ||
            !this.lastViewport ||
            this.lastViewport.x !== this.x ||
            this.lastViewport.y !== this.y ||
            this.lastViewport.scaleX !== this.scale.x ||
            this.lastViewport.scaleY !== this.scale.y),
          (this.lastViewport = {
            x: this.x,
            y: this.y,
            scaleX: this.scale.x,
            scaleY: this.scale.y,
          }),
          this.emit("frame-end", this));
      }
      resize(t = window.innerWidth, e = window.innerHeight, i, s) {
        (this.screenWidth = t),
          (this.screenHeight = e),
          void 0 !== i && (this._worldWidth = i),
          void 0 !== s && (this._worldHeight = s),
          this.plugins.resize(),
          (this.dirty = !0);
      }
      get worldWidth() {
        return this._worldWidth ? this._worldWidth : this.width / this.scale.x;
      }
      set worldWidth(t) {
        (this._worldWidth = t), this.plugins.resize();
      }
      get worldHeight() {
        return this._worldHeight
          ? this._worldHeight
          : this.height / this.scale.y;
      }
      set worldHeight(t) {
        (this._worldHeight = t), this.plugins.resize();
      }
      getVisibleBounds() {
        return new e.Rectangle(
          this.left,
          this.top,
          this.worldScreenWidth,
          this.worldScreenHeight
        );
      }
      toWorld(t, i) {
        return 2 === arguments.length
          ? this.toLocal(new e.Point(t, i))
          : this.toLocal(t);
      }
      toScreen(t, i) {
        return 2 === arguments.length
          ? this.toGlobal(new e.Point(t, i))
          : this.toGlobal(t);
      }
      get worldScreenWidth() {
        return this.screenWidth / this.scale.x;
      }
      get worldScreenHeight() {
        return this.screenHeight / this.scale.y;
      }
      get screenWorldWidth() {
        return this.worldWidth * this.scale.x;
      }
      get screenWorldHeight() {
        return this.worldHeight * this.scale.y;
      }
      get center() {
        return new e.Point(
          this.worldScreenWidth / 2 - this.x / this.scale.x,
          this.worldScreenHeight / 2 - this.y / this.scale.y
        );
      }
      set center(t) {
        this.moveCenter(t);
      }
      moveCenter(...t) {
        let e, i;
        "number" == typeof t[0]
          ? ((e = t[0]), (i = t[1]))
          : ((e = t[0].x), (i = t[0].y));
        const s = (this.worldScreenWidth / 2 - e) * this.scale.x,
          n = (this.worldScreenHeight / 2 - i) * this.scale.y;
        return (
          (this.x === s && this.y === n) ||
            (this.position.set(s, n), this.plugins.reset(), (this.dirty = !0)),
          this
        );
      }
      get corner() {
        return new e.Point(-this.x / this.scale.x, -this.y / this.scale.y);
      }
      set corner(t) {
        this.moveCorner(t);
      }
      moveCorner(...t) {
        let e, i;
        return (
          1 === t.length
            ? ((e = -t[0].x * this.scale.x), (i = -t[0].y * this.scale.y))
            : ((e = -t[0] * this.scale.x), (i = -t[1] * this.scale.y)),
          (e === this.x && i === this.y) ||
            (this.position.set(e, i), this.plugins.reset(), (this.dirty = !0)),
          this
        );
      }
      get screenWidthInWorldPixels() {
        return this.screenWidth / this.scale.x;
      }
      get screenHeightInWorldPixels() {
        return this.screenHeight / this.scale.y;
      }
      findFitWidth(t) {
        return this.screenWidth / t;
      }
      findFitHeight(t) {
        return this.screenHeight / t;
      }
      findFit(t, e) {
        const i = this.screenWidth / t,
          s = this.screenHeight / e;
        return Math.min(i, s);
      }
      findCover(t, e) {
        const i = this.screenWidth / t,
          s = this.screenHeight / e;
        return Math.max(i, s);
      }
      fitWidth(t = this.worldWidth, e, i = !0, s) {
        let n;
        e && (n = this.center),
          (this.scale.x = this.screenWidth / t),
          i && (this.scale.y = this.scale.x);
        const h = this.plugins.get("clamp-zoom", !0);
        return !s && h && h.clamp(), e && n && this.moveCenter(n), this;
      }
      fitHeight(t = this.worldHeight, e, i = !0, s) {
        let n;
        e && (n = this.center),
          (this.scale.y = this.screenHeight / t),
          i && (this.scale.x = this.scale.y);
        const h = this.plugins.get("clamp-zoom", !0);

        let blackOnly = [
          [100, 111],
          [100, 112],
          [100, 113],
          [100, 114],
          [100, 115],
          [100, 116],
          [100, 117],
          [100, 118],
          [100, 119],
          [100, 120],
          [100, 35],
          [100, 36],
          [100, 37],
          [100, 38],
          [100, 39],
          [100, 40],
          [100, 41],
          [100, 42],
          [100, 43],
          [100, 44],
          [100, 45],
          [100, 46],
          [100, 47],
          [100, 48],
          [100, 49],
          [100, 50],
          [101, 111],
          [101, 112],
          [101, 113],
          [101, 114],
          [101, 115],
          [101, 116],
          [101, 117],
          [101, 118],
          [101, 119],
          [101, 120],
          [101, 35],
          [101, 36],
          [101, 37],
          [101, 38],
          [101, 39],
          [101, 40],
          [101, 41],
          [101, 42],
          [101, 43],
          [101, 44],
          [101, 45],
          [101, 46],
          [101, 47],
          [101, 48],
          [101, 49],
          [101, 50],
          [102, 111],
          [102, 112],
          [102, 113],
          [102, 114],
          [102, 115],
          [102, 116],
          [102, 117],
          [102, 118],
          [102, 119],
          [102, 120],
          [102, 35],
          [102, 36],
          [102, 37],
          [102, 38],
          [102, 39],
          [102, 40],
          [102, 41],
          [102, 42],
          [102, 43],
          [102, 44],
          [102, 45],
          [102, 46],
          [102, 47],
          [102, 48],
          [102, 49],
          [102, 50],
          [103, 111],
          [103, 112],
          [103, 113],
          [103, 114],
          [103, 115],
          [103, 116],
          [103, 117],
          [103, 118],
          [103, 119],
          [103, 120],
          [103, 35],
          [103, 36],
          [103, 37],
          [103, 38],
          [103, 39],
          [103, 40],
          [103, 41],
          [103, 42],
          [103, 43],
          [103, 44],
          [103, 45],
          [103, 46],
          [103, 47],
          [103, 48],
          [103, 49],
          [103, 50],
          [104, 111],
          [104, 112],
          [104, 113],
          [104, 114],
          [104, 115],
          [104, 116],
          [104, 117],
          [104, 118],
          [104, 119],
          [104, 120],
          [104, 35],
          [104, 36],
          [104, 37],
          [104, 38],
          [104, 39],
          [104, 40],
          [104, 41],
          [104, 42],
          [104, 43],
          [104, 44],
          [104, 45],
          [104, 46],
          [104, 47],
          [104, 48],
          [104, 49],
          [104, 50],
          [105, 100],
          [105, 101],
          [105, 102],
          [105, 103],
          [105, 104],
          [105, 105],
          [105, 106],
          [105, 107],
          [105, 108],
          [105, 109],
          [105, 110],
          [105, 111],
          [105, 112],
          [105, 113],
          [105, 114],
          [105, 115],
          [105, 46],
          [105, 47],
          [105, 48],
          [105, 49],
          [105, 50],
          [105, 51],
          [105, 52],
          [105, 53],
          [105, 54],
          [105, 55],
          [105, 56],
          [105, 57],
          [105, 58],
          [105, 59],
          [105, 60],
          [105, 61],
          [105, 62],
          [105, 63],
          [105, 64],
          [105, 65],
          [105, 66],
          [105, 94],
          [105, 95],
          [105, 96],
          [105, 97],
          [105, 98],
          [105, 99],
          [106, 100],
          [106, 101],
          [106, 102],
          [106, 103],
          [106, 104],
          [106, 105],
          [106, 106],
          [106, 107],
          [106, 108],
          [106, 109],
          [106, 110],
          [106, 111],
          [106, 112],
          [106, 113],
          [106, 114],
          [106, 115],
          [106, 46],
          [106, 47],
          [106, 48],
          [106, 49],
          [106, 50],
          [106, 51],
          [106, 52],
          [106, 53],
          [106, 54],
          [106, 55],
          [106, 56],
          [106, 57],
          [106, 58],
          [106, 59],
          [106, 60],
          [106, 61],
          [106, 62],
          [106, 63],
          [106, 64],
          [106, 65],
          [106, 66],
          [106, 94],
          [106, 95],
          [106, 96],
          [106, 97],
          [106, 98],
          [106, 99],
          [107, 100],
          [107, 101],
          [107, 102],
          [107, 103],
          [107, 104],
          [107, 105],
          [107, 106],
          [107, 107],
          [107, 108],
          [107, 109],
          [107, 110],
          [107, 111],
          [107, 112],
          [107, 113],
          [107, 114],
          [107, 115],
          [107, 46],
          [107, 47],
          [107, 48],
          [107, 49],
          [107, 50],
          [107, 51],
          [107, 52],
          [107, 53],
          [107, 54],
          [107, 55],
          [107, 56],
          [107, 57],
          [107, 58],
          [107, 59],
          [107, 60],
          [107, 61],
          [107, 62],
          [107, 63],
          [107, 64],
          [107, 65],
          [107, 66],
          [107, 94],
          [107, 95],
          [107, 96],
          [107, 97],
          [107, 98],
          [107, 99],
          [108, 100],
          [108, 101],
          [108, 102],
          [108, 103],
          [108, 104],
          [108, 105],
          [108, 106],
          [108, 107],
          [108, 108],
          [108, 109],
          [108, 110],
          [108, 111],
          [108, 112],
          [108, 113],
          [108, 114],
          [108, 115],
          [108, 46],
          [108, 47],
          [108, 48],
          [108, 49],
          [108, 50],
          [108, 51],
          [108, 52],
          [108, 53],
          [108, 54],
          [108, 55],
          [108, 56],
          [108, 57],
          [108, 58],
          [108, 59],
          [108, 60],
          [108, 61],
          [108, 62],
          [108, 63],
          [108, 64],
          [108, 65],
          [108, 66],
          [108, 94],
          [108, 95],
          [108, 96],
          [108, 97],
          [108, 98],
          [108, 99],
          [109, 100],
          [109, 101],
          [109, 102],
          [109, 103],
          [109, 104],
          [109, 105],
          [109, 106],
          [109, 107],
          [109, 108],
          [109, 109],
          [109, 110],
          [109, 111],
          [109, 112],
          [109, 113],
          [109, 114],
          [109, 115],
          [109, 46],
          [109, 47],
          [109, 48],
          [109, 49],
          [109, 50],
          [109, 51],
          [109, 52],
          [109, 53],
          [109, 54],
          [109, 55],
          [109, 56],
          [109, 57],
          [109, 58],
          [109, 59],
          [109, 60],
          [109, 61],
          [109, 62],
          [109, 63],
          [109, 64],
          [109, 65],
          [109, 66],
          [109, 94],
          [109, 95],
          [109, 96],
          [109, 97],
          [109, 98],
          [109, 99],
          [110, 100],
          [110, 101],
          [110, 102],
          [110, 103],
          [110, 104],
          [110, 105],
          [110, 106],
          [110, 107],
          [110, 108],
          [110, 109],
          [110, 110],
          [110, 111],
          [110, 112],
          [110, 113],
          [110, 114],
          [110, 115],
          [110, 46],
          [110, 47],
          [110, 48],
          [110, 49],
          [110, 50],
          [110, 51],
          [110, 52],
          [110, 53],
          [110, 54],
          [110, 55],
          [110, 56],
          [110, 57],
          [110, 58],
          [110, 59],
          [110, 60],
          [110, 61],
          [110, 62],
          [110, 63],
          [110, 64],
          [110, 65],
          [110, 66],
          [110, 67],
          [110, 68],
          [110, 69],
          [110, 70],
          [110, 71],
          [110, 72],
          [110, 73],
          [110, 74],
          [110, 75],
          [110, 76],
          [110, 77],
          [110, 78],
          [110, 79],
          [110, 80],
          [110, 81],
          [110, 82],
          [110, 83],
          [110, 84],
          [110, 85],
          [110, 86],
          [110, 87],
          [110, 88],
          [110, 89],
          [110, 90],
          [110, 91],
          [110, 92],
          [110, 93],
          [110, 94],
          [110, 95],
          [110, 96],
          [110, 97],
          [110, 98],
          [110, 99],
          [111, 62],
          [111, 63],
          [111, 64],
          [111, 65],
          [111, 66],
          [111, 67],
          [111, 68],
          [111, 69],
          [111, 70],
          [111, 71],
          [111, 72],
          [111, 73],
          [111, 74],
          [111, 75],
          [111, 76],
          [111, 77],
          [111, 78],
          [111, 79],
          [111, 80],
          [111, 81],
          [111, 82],
          [111, 83],
          [111, 84],
          [111, 85],
          [111, 86],
          [111, 87],
          [111, 88],
          [111, 89],
          [111, 90],
          [111, 91],
          [111, 92],
          [111, 93],
          [111, 94],
          [111, 95],
          [111, 96],
          [111, 97],
          [111, 98],
          [111, 99],
          [112, 62],
          [112, 63],
          [112, 64],
          [112, 65],
          [112, 66],
          [112, 67],
          [112, 68],
          [112, 69],
          [112, 70],
          [112, 71],
          [112, 72],
          [112, 73],
          [112, 74],
          [112, 75],
          [112, 76],
          [112, 77],
          [112, 78],
          [112, 79],
          [112, 80],
          [112, 81],
          [112, 82],
          [112, 83],
          [112, 84],
          [112, 85],
          [112, 86],
          [112, 87],
          [112, 88],
          [112, 89],
          [112, 90],
          [112, 91],
          [112, 92],
          [112, 93],
          [112, 94],
          [112, 95],
          [112, 96],
          [112, 97],
          [112, 98],
          [112, 99],
          [113, 62],
          [113, 63],
          [113, 64],
          [113, 65],
          [113, 66],
          [113, 67],
          [113, 68],
          [113, 69],
          [113, 70],
          [113, 71],
          [113, 72],
          [113, 73],
          [113, 74],
          [113, 75],
          [113, 76],
          [113, 77],
          [113, 78],
          [113, 79],
          [113, 80],
          [113, 81],
          [113, 82],
          [113, 83],
          [113, 84],
          [113, 85],
          [113, 86],
          [113, 87],
          [113, 88],
          [113, 89],
          [113, 90],
          [113, 91],
          [113, 92],
          [113, 93],
          [113, 94],
          [113, 95],
          [113, 96],
          [113, 97],
          [113, 98],
          [113, 99],
          [114, 62],
          [114, 63],
          [114, 64],
          [114, 65],
          [114, 66],
          [114, 67],
          [114, 68],
          [114, 69],
          [114, 70],
          [114, 71],
          [114, 72],
          [114, 73],
          [114, 74],
          [114, 75],
          [114, 76],
          [114, 77],
          [114, 78],
          [114, 79],
          [114, 80],
          [114, 81],
          [114, 82],
          [114, 83],
          [114, 84],
          [114, 85],
          [114, 86],
          [114, 87],
          [114, 88],
          [114, 89],
          [114, 90],
          [114, 91],
          [114, 92],
          [114, 93],
          [114, 94],
          [114, 95],
          [114, 96],
          [114, 97],
          [114, 98],
          [114, 99],
          [115, 62],
          [115, 63],
          [115, 64],
          [115, 65],
          [115, 66],
          [115, 67],
          [115, 68],
          [115, 69],
          [115, 70],
          [115, 71],
          [115, 72],
          [115, 73],
          [115, 74],
          [115, 75],
          [115, 76],
          [115, 77],
          [115, 78],
          [115, 79],
          [115, 80],
          [115, 81],
          [115, 82],
          [115, 83],
          [115, 84],
          [115, 85],
          [115, 86],
          [115, 87],
          [115, 88],
          [115, 89],
          [115, 90],
          [115, 91],
          [115, 92],
          [115, 93],
          [115, 94],
          [115, 95],
          [115, 96],
          [115, 97],
          [115, 98],
          [115, 99],
          [24, 62],
          [24, 63],
          [24, 64],
          [24, 65],
          [24, 66],
          [24, 67],
          [24, 68],
          [24, 69],
          [24, 70],
          [24, 71],
          [24, 72],
          [24, 73],
          [24, 74],
          [24, 75],
          [24, 76],
          [24, 77],
          [24, 78],
          [24, 79],
          [24, 80],
          [24, 81],
          [24, 82],
          [24, 83],
          [24, 84],
          [24, 85],
          [24, 86],
          [24, 87],
          [24, 88],
          [24, 89],
          [24, 90],
          [24, 91],
          [24, 92],
          [24, 93],
          [24, 94],
          [24, 95],
          [24, 96],
          [24, 97],
          [24, 98],
          [24, 99],
          [25, 62],
          [25, 63],
          [25, 64],
          [25, 65],
          [25, 66],
          [25, 67],
          [25, 68],
          [25, 69],
          [25, 70],
          [25, 71],
          [25, 72],
          [25, 73],
          [25, 74],
          [25, 75],
          [25, 76],
          [25, 77],
          [25, 78],
          [25, 79],
          [25, 80],
          [25, 81],
          [25, 82],
          [25, 83],
          [25, 84],
          [25, 85],
          [25, 86],
          [25, 87],
          [25, 88],
          [25, 89],
          [25, 90],
          [25, 91],
          [25, 92],
          [25, 93],
          [25, 94],
          [25, 95],
          [25, 96],
          [25, 97],
          [25, 98],
          [25, 99],
          [26, 62],
          [26, 63],
          [26, 64],
          [26, 65],
          [26, 66],
          [26, 67],
          [26, 68],
          [26, 69],
          [26, 70],
          [26, 71],
          [26, 72],
          [26, 73],
          [26, 74],
          [26, 75],
          [26, 76],
          [26, 77],
          [26, 78],
          [26, 79],
          [26, 80],
          [26, 81],
          [26, 82],
          [26, 83],
          [26, 84],
          [26, 85],
          [26, 86],
          [26, 87],
          [26, 88],
          [26, 89],
          [26, 90],
          [26, 91],
          [26, 92],
          [26, 93],
          [26, 94],
          [26, 95],
          [26, 96],
          [26, 97],
          [26, 98],
          [26, 99],
          [27, 62],
          [27, 63],
          [27, 64],
          [27, 65],
          [27, 66],
          [27, 67],
          [27, 68],
          [27, 69],
          [27, 70],
          [27, 71],
          [27, 72],
          [27, 73],
          [27, 74],
          [27, 75],
          [27, 76],
          [27, 77],
          [27, 78],
          [27, 79],
          [27, 80],
          [27, 81],
          [27, 82],
          [27, 83],
          [27, 84],
          [27, 85],
          [27, 86],
          [27, 87],
          [27, 88],
          [27, 89],
          [27, 90],
          [27, 91],
          [27, 92],
          [27, 93],
          [27, 94],
          [27, 95],
          [27, 96],
          [27, 97],
          [27, 98],
          [27, 99],
          [28, 62],
          [28, 63],
          [28, 64],
          [28, 65],
          [28, 66],
          [28, 67],
          [28, 68],
          [28, 69],
          [28, 70],
          [28, 71],
          [28, 72],
          [28, 73],
          [28, 74],
          [28, 75],
          [28, 76],
          [28, 77],
          [28, 78],
          [28, 79],
          [28, 80],
          [28, 81],
          [28, 82],
          [28, 83],
          [28, 84],
          [28, 85],
          [28, 86],
          [28, 87],
          [28, 88],
          [28, 89],
          [28, 90],
          [28, 91],
          [28, 92],
          [28, 93],
          [28, 94],
          [28, 95],
          [28, 96],
          [28, 97],
          [28, 98],
          [28, 99],
          [29, 46],
          [29, 47],
          [29, 48],
          [29, 49],
          [29, 50],
          [29, 51],
          [29, 52],
          [29, 53],
          [29, 54],
          [29, 55],
          [29, 56],
          [29, 57],
          [29, 58],
          [29, 59],
          [29, 60],
          [29, 61],
          [29, 62],
          [29, 63],
          [29, 64],
          [29, 65],
          [29, 66],
          [29, 67],
          [29, 68],
          [29, 69],
          [29, 70],
          [29, 71],
          [29, 72],
          [29, 73],
          [29, 74],
          [29, 75],
          [29, 76],
          [29, 77],
          [29, 78],
          [29, 79],
          [29, 80],
          [29, 81],
          [29, 82],
          [29, 83],
          [29, 84],
          [29, 85],
          [29, 86],
          [29, 87],
          [29, 88],
          [29, 89],
          [29, 90],
          [29, 91],
          [29, 92],
          [29, 93],
          [29, 94],
          [29, 95],
          [29, 96],
          [29, 97],
          [29, 98],
          [29, 99],
          [30, 100],
          [30, 101],
          [30, 102],
          [30, 103],
          [30, 104],
          [30, 105],
          [30, 106],
          [30, 107],
          [30, 108],
          [30, 109],
          [30, 110],
          [30, 111],
          [30, 112],
          [30, 113],
          [30, 114],
          [30, 115],
          [30, 46],
          [30, 47],
          [30, 48],
          [30, 49],
          [30, 50],
          [30, 51],
          [30, 52],
          [30, 53],
          [30, 54],
          [30, 55],
          [30, 56],
          [30, 57],
          [30, 58],
          [30, 59],
          [30, 60],
          [30, 61],
          [30, 62],
          [30, 63],
          [30, 64],
          [30, 65],
          [30, 66],
          [30, 67],
          [30, 94],
          [30, 95],
          [30, 96],
          [30, 97],
          [30, 98],
          [30, 99],
          [31, 100],
          [31, 101],
          [31, 102],
          [31, 103],
          [31, 104],
          [31, 105],
          [31, 106],
          [31, 107],
          [31, 108],
          [31, 109],
          [31, 110],
          [31, 111],
          [31, 112],
          [31, 113],
          [31, 114],
          [31, 115],
          [31, 46],
          [31, 47],
          [31, 48],
          [31, 49],
          [31, 50],
          [31, 51],
          [31, 52],
          [31, 53],
          [31, 54],
          [31, 55],
          [31, 56],
          [31, 57],
          [31, 58],
          [31, 59],
          [31, 60],
          [31, 61],
          [31, 62],
          [31, 63],
          [31, 64],
          [31, 65],
          [31, 66],
          [31, 67],
          [31, 94],
          [31, 95],
          [31, 96],
          [31, 97],
          [31, 98],
          [31, 99],
          [32, 100],
          [32, 101],
          [32, 102],
          [32, 103],
          [32, 104],
          [32, 105],
          [32, 106],
          [32, 107],
          [32, 108],
          [32, 109],
          [32, 110],
          [32, 111],
          [32, 112],
          [32, 113],
          [32, 114],
          [32, 115],
          [32, 46],
          [32, 47],
          [32, 48],
          [32, 49],
          [32, 50],
          [32, 51],
          [32, 52],
          [32, 53],
          [32, 54],
          [32, 55],
          [32, 56],
          [32, 57],
          [32, 58],
          [32, 59],
          [32, 60],
          [32, 61],
          [32, 62],
          [32, 63],
          [32, 64],
          [32, 65],
          [32, 66],
          [32, 67],
          [32, 94],
          [32, 95],
          [32, 96],
          [32, 97],
          [32, 98],
          [32, 99],
          [33, 100],
          [33, 101],
          [33, 102],
          [33, 103],
          [33, 104],
          [33, 105],
          [33, 106],
          [33, 107],
          [33, 108],
          [33, 109],
          [33, 110],
          [33, 111],
          [33, 112],
          [33, 113],
          [33, 114],
          [33, 115],
          [33, 46],
          [33, 47],
          [33, 48],
          [33, 49],
          [33, 50],
          [33, 51],
          [33, 52],
          [33, 53],
          [33, 54],
          [33, 55],
          [33, 56],
          [33, 57],
          [33, 58],
          [33, 59],
          [33, 60],
          [33, 61],
          [33, 62],
          [33, 63],
          [33, 64],
          [33, 65],
          [33, 66],
          [33, 67],
          [33, 94],
          [33, 95],
          [33, 96],
          [33, 97],
          [33, 98],
          [33, 99],
          [34, 100],
          [34, 101],
          [34, 102],
          [34, 103],
          [34, 104],
          [34, 105],
          [34, 106],
          [34, 107],
          [34, 108],
          [34, 109],
          [34, 110],
          [34, 111],
          [34, 112],
          [34, 113],
          [34, 114],
          [34, 115],
          [34, 46],
          [34, 47],
          [34, 48],
          [34, 49],
          [34, 50],
          [34, 51],
          [34, 52],
          [34, 53],
          [34, 54],
          [34, 55],
          [34, 56],
          [34, 57],
          [34, 58],
          [34, 59],
          [34, 60],
          [34, 61],
          [34, 62],
          [34, 63],
          [34, 64],
          [34, 65],
          [34, 66],
          [34, 67],
          [34, 94],
          [34, 95],
          [34, 96],
          [34, 97],
          [34, 98],
          [34, 99],
          [35, 111],
          [35, 112],
          [35, 113],
          [35, 114],
          [35, 115],
          [35, 116],
          [35, 117],
          [35, 118],
          [35, 119],
          [35, 120],
          [35, 35],
          [35, 36],
          [35, 37],
          [35, 38],
          [35, 39],
          [35, 40],
          [35, 41],
          [35, 42],
          [35, 43],
          [35, 44],
          [35, 45],
          [35, 46],
          [35, 47],
          [35, 48],
          [35, 49],
          [35, 50],
          [36, 111],
          [36, 112],
          [36, 113],
          [36, 114],
          [36, 115],
          [36, 116],
          [36, 117],
          [36, 118],
          [36, 119],
          [36, 120],
          [36, 35],
          [36, 36],
          [36, 37],
          [36, 38],
          [36, 39],
          [36, 40],
          [36, 41],
          [36, 42],
          [36, 43],
          [36, 44],
          [36, 45],
          [36, 46],
          [36, 47],
          [36, 48],
          [36, 49],
          [36, 50],
          [37, 111],
          [37, 112],
          [37, 113],
          [37, 114],
          [37, 115],
          [37, 116],
          [37, 117],
          [37, 118],
          [37, 119],
          [37, 120],
          [37, 35],
          [37, 36],
          [37, 37],
          [37, 38],
          [37, 39],
          [37, 40],
          [37, 41],
          [37, 42],
          [37, 43],
          [37, 44],
          [37, 45],
          [37, 46],
          [37, 47],
          [37, 48],
          [37, 49],
          [37, 50],
          [38, 111],
          [38, 112],
          [38, 113],
          [38, 114],
          [38, 115],
          [38, 116],
          [38, 117],
          [38, 118],
          [38, 119],
          [38, 120],
          [38, 35],
          [38, 36],
          [38, 37],
          [38, 38],
          [38, 39],
          [38, 40],
          [38, 41],
          [38, 42],
          [38, 43],
          [38, 44],
          [38, 45],
          [38, 46],
          [38, 47],
          [38, 48],
          [38, 49],
          [38, 50],
          [39, 111],
          [39, 112],
          [39, 113],
          [39, 114],
          [39, 115],
          [39, 116],
          [39, 117],
          [39, 118],
          [39, 119],
          [39, 120],
          [39, 35],
          [39, 36],
          [39, 37],
          [39, 38],
          [39, 39],
          [39, 40],
          [39, 41],
          [39, 42],
          [39, 43],
          [39, 44],
          [39, 45],
          [39, 46],
          [39, 47],
          [39, 48],
          [39, 49],
          [39, 50],
          [40, 116],
          [40, 117],
          [40, 118],
          [40, 119],
          [40, 120],
          [40, 121],
          [40, 122],
          [40, 123],
          [40, 124],
          [40, 125],
          [40, 126],
          [40, 24],
          [40, 25],
          [40, 26],
          [40, 27],
          [40, 28],
          [40, 29],
          [40, 30],
          [40, 31],
          [40, 32],
          [40, 33],
          [40, 34],
          [40, 35],
          [40, 36],
          [40, 37],
          [40, 38],
          [40, 39],
          [41, 116],
          [41, 117],
          [41, 118],
          [41, 119],
          [41, 120],
          [41, 121],
          [41, 122],
          [41, 123],
          [41, 124],
          [41, 125],
          [41, 126],
          [41, 24],
          [41, 25],
          [41, 26],
          [41, 27],
          [41, 28],
          [41, 29],
          [41, 30],
          [41, 31],
          [41, 32],
          [41, 33],
          [41, 34],
          [41, 35],
          [41, 36],
          [41, 37],
          [41, 38],
          [41, 39],
          [42, 116],
          [42, 117],
          [42, 118],
          [42, 119],
          [42, 120],
          [42, 121],
          [42, 122],
          [42, 123],
          [42, 124],
          [42, 125],
          [42, 126],
          [42, 24],
          [42, 25],
          [42, 26],
          [42, 27],
          [42, 28],
          [42, 29],
          [42, 30],
          [42, 31],
          [42, 32],
          [42, 33],
          [42, 34],
          [42, 35],
          [42, 36],
          [42, 37],
          [42, 38],
          [42, 39],
          [43, 116],
          [43, 117],
          [43, 118],
          [43, 119],
          [43, 120],
          [43, 121],
          [43, 122],
          [43, 123],
          [43, 124],
          [43, 125],
          [43, 126],
          [43, 24],
          [43, 25],
          [43, 26],
          [43, 27],
          [43, 28],
          [43, 29],
          [43, 30],
          [43, 31],
          [43, 32],
          [43, 33],
          [43, 34],
          [43, 35],
          [43, 36],
          [43, 37],
          [43, 38],
          [43, 39],
          [44, 116],
          [44, 117],
          [44, 118],
          [44, 119],
          [44, 120],
          [44, 121],
          [44, 122],
          [44, 123],
          [44, 124],
          [44, 125],
          [44, 126],
          [44, 24],
          [44, 25],
          [44, 26],
          [44, 27],
          [44, 28],
          [44, 29],
          [44, 30],
          [44, 31],
          [44, 32],
          [44, 33],
          [44, 34],
          [44, 35],
          [44, 36],
          [44, 37],
          [44, 38],
          [44, 39],
          [45, 116],
          [45, 117],
          [45, 118],
          [45, 119],
          [45, 120],
          [45, 121],
          [45, 122],
          [45, 123],
          [45, 124],
          [45, 125],
          [45, 126],
          [45, 24],
          [45, 25],
          [45, 26],
          [45, 27],
          [45, 28],
          [45, 29],
          [45, 30],
          [45, 31],
          [45, 32],
          [45, 33],
          [45, 34],
          [45, 35],
          [45, 36],
          [45, 37],
          [45, 38],
          [45, 39],
          [46, 121],
          [46, 122],
          [46, 123],
          [46, 124],
          [46, 125],
          [46, 126],
          [46, 127],
          [46, 128],
          [46, 129],
          [46, 130],
          [46, 131],
          [46, 19],
          [46, 20],
          [46, 21],
          [46, 22],
          [46, 23],
          [46, 24],
          [46, 25],
          [46, 26],
          [46, 27],
          [46, 28],
          [47, 121],
          [47, 122],
          [47, 123],
          [47, 124],
          [47, 125],
          [47, 126],
          [47, 127],
          [47, 128],
          [47, 129],
          [47, 130],
          [47, 131],
          [47, 19],
          [47, 20],
          [47, 21],
          [47, 22],
          [47, 23],
          [47, 24],
          [47, 25],
          [47, 26],
          [47, 27],
          [47, 28],
          [48, 121],
          [48, 122],
          [48, 123],
          [48, 124],
          [48, 125],
          [48, 126],
          [48, 127],
          [48, 128],
          [48, 129],
          [48, 130],
          [48, 131],
          [48, 19],
          [48, 20],
          [48, 21],
          [48, 22],
          [48, 23],
          [48, 24],
          [48, 25],
          [48, 26],
          [48, 27],
          [48, 28],
          [49, 121],
          [49, 122],
          [49, 123],
          [49, 124],
          [49, 125],
          [49, 126],
          [49, 127],
          [49, 128],
          [49, 129],
          [49, 130],
          [49, 131],
          [49, 19],
          [49, 20],
          [49, 21],
          [49, 22],
          [49, 23],
          [49, 24],
          [49, 25],
          [49, 26],
          [49, 27],
          [49, 28],
          [50, 121],
          [50, 122],
          [50, 123],
          [50, 124],
          [50, 125],
          [50, 126],
          [50, 127],
          [50, 128],
          [50, 129],
          [50, 130],
          [50, 131],
          [50, 19],
          [50, 20],
          [50, 21],
          [50, 22],
          [50, 23],
          [50, 24],
          [50, 25],
          [50, 26],
          [50, 27],
          [50, 28],
          [51, 121],
          [51, 122],
          [51, 123],
          [51, 124],
          [51, 125],
          [51, 126],
          [51, 127],
          [51, 128],
          [51, 129],
          [51, 13],
          [51, 130],
          [51, 131],
          [51, 14],
          [51, 15],
          [51, 16],
          [51, 17],
          [51, 18],
          [51, 19],
          [51, 20],
          [51, 21],
          [51, 22],
          [51, 23],
          [52, 127],
          [52, 128],
          [52, 129],
          [52, 13],
          [52, 130],
          [52, 131],
          [52, 14],
          [52, 15],
          [52, 16],
          [52, 17],
          [52, 18],
          [52, 19],
          [52, 20],
          [52, 21],
          [52, 22],
          [52, 23],
          [53, 127],
          [53, 128],
          [53, 129],
          [53, 13],
          [53, 130],
          [53, 131],
          [53, 14],
          [53, 15],
          [53, 16],
          [53, 17],
          [53, 18],
          [53, 19],
          [53, 20],
          [53, 21],
          [53, 22],
          [53, 23],
          [54, 127],
          [54, 128],
          [54, 129],
          [54, 13],
          [54, 130],
          [54, 131],
          [54, 14],
          [54, 15],
          [54, 16],
          [54, 17],
          [54, 18],
          [54, 19],
          [54, 20],
          [54, 21],
          [54, 22],
          [54, 23],
          [55, 10],
          [55, 11],
          [55, 12],
          [55, 127],
          [55, 128],
          [55, 129],
          [55, 13],
          [55, 130],
          [55, 131],
          [55, 14],
          [55, 15],
          [55, 16],
          [55, 17],
          [55, 18],
          [55, 19],
          [55, 20],
          [55, 21],
          [55, 22],
          [55, 23],
          [55, 7],
          [55, 8],
          [55, 9],
          [56, 10],
          [56, 11],
          [56, 12],
          [56, 127],
          [56, 128],
          [56, 129],
          [56, 13],
          [56, 130],
          [56, 131],
          [56, 14],
          [56, 15],
          [56, 16],
          [56, 17],
          [56, 18],
          [56, 19],
          [56, 20],
          [56, 21],
          [56, 22],
          [56, 23],
          [56, 7],
          [56, 8],
          [56, 9],
          [57, 10],
          [57, 11],
          [57, 12],
          [57, 127],
          [57, 128],
          [57, 129],
          [57, 13],
          [57, 130],
          [57, 131],
          [57, 14],
          [57, 15],
          [57, 16],
          [57, 17],
          [57, 18],
          [57, 7],
          [57, 8],
          [57, 9],
          [58, 10],
          [58, 11],
          [58, 12],
          [58, 127],
          [58, 128],
          [58, 129],
          [58, 13],
          [58, 130],
          [58, 131],
          [58, 14],
          [58, 15],
          [58, 16],
          [58, 17],
          [58, 18],
          [58, 7],
          [58, 8],
          [58, 9],
          [59, 10],
          [59, 11],
          [59, 12],
          [59, 127],
          [59, 128],
          [59, 129],
          [59, 13],
          [59, 130],
          [59, 131],
          [59, 14],
          [59, 15],
          [59, 16],
          [59, 17],
          [59, 18],
          [59, 7],
          [59, 8],
          [59, 9],
          [60, 10],
          [60, 11],
          [60, 12],
          [60, 127],
          [60, 128],
          [60, 129],
          [60, 13],
          [60, 130],
          [60, 131],
          [60, 14],
          [60, 15],
          [60, 16],
          [60, 17],
          [60, 18],
          [60, 7],
          [60, 8],
          [60, 9],
          [61, 10],
          [61, 11],
          [61, 12],
          [61, 127],
          [61, 128],
          [61, 129],
          [61, 13],
          [61, 130],
          [61, 131],
          [61, 14],
          [61, 15],
          [61, 16],
          [61, 17],
          [61, 18],
          [61, 7],
          [61, 8],
          [61, 9],
          [62, 10],
          [62, 11],
          [62, 12],
          [62, 127],
          [62, 128],
          [62, 129],
          [62, 130],
          [62, 131],
          [62, 7],
          [62, 8],
          [62, 9],
          [63, 10],
          [63, 11],
          [63, 12],
          [63, 127],
          [63, 128],
          [63, 129],
          [63, 130],
          [63, 131],
          [63, 7],
          [63, 8],
          [63, 9],
          [64, 10],
          [64, 11],
          [64, 12],
          [64, 127],
          [64, 128],
          [64, 129],
          [64, 130],
          [64, 131],
          [64, 7],
          [64, 8],
          [64, 9],
          [65, 10],
          [65, 11],
          [65, 12],
          [65, 127],
          [65, 128],
          [65, 129],
          [65, 130],
          [65, 131],
          [65, 7],
          [65, 8],
          [65, 9],
          [66, 10],
          [66, 11],
          [66, 12],
          [66, 127],
          [66, 128],
          [66, 129],
          [66, 130],
          [66, 131],
          [66, 7],
          [66, 8],
          [66, 9],
          [67, 10],
          [67, 11],
          [67, 12],
          [67, 127],
          [67, 128],
          [67, 129],
          [67, 130],
          [67, 131],
          [67, 7],
          [67, 8],
          [67, 9],
          [68, 10],
          [68, 11],
          [68, 12],
          [68, 127],
          [68, 128],
          [68, 129],
          [68, 130],
          [68, 131],
          [68, 7],
          [68, 8],
          [68, 9],
          [69, 10],
          [69, 11],
          [69, 12],
          [69, 127],
          [69, 128],
          [69, 129],
          [69, 130],
          [69, 131],
          [69, 7],
          [69, 8],
          [69, 9],
          [70, 10],
          [70, 11],
          [70, 12],
          [70, 127],
          [70, 128],
          [70, 129],
          [70, 130],
          [70, 131],
          [70, 7],
          [70, 8],
          [70, 9],
          [71, 10],
          [71, 11],
          [71, 12],
          [71, 127],
          [71, 128],
          [71, 129],
          [71, 130],
          [71, 131],
          [71, 7],
          [71, 8],
          [71, 9],
          [72, 10],
          [72, 11],
          [72, 12],
          [72, 127],
          [72, 128],
          [72, 129],
          [72, 130],
          [72, 131],
          [72, 7],
          [72, 8],
          [72, 9],
          [73, 10],
          [73, 11],
          [73, 12],
          [73, 127],
          [73, 128],
          [73, 129],
          [73, 130],
          [73, 131],
          [73, 7],
          [73, 8],
          [73, 9],
          [74, 10],
          [74, 11],
          [74, 12],
          [74, 127],
          [74, 128],
          [74, 129],
          [74, 130],
          [74, 131],
          [74, 7],
          [74, 8],
          [74, 9],
          [75, 10],
          [75, 11],
          [75, 12],
          [75, 127],
          [75, 128],
          [75, 129],
          [75, 130],
          [75, 131],
          [75, 7],
          [75, 8],
          [75, 9],
          [76, 10],
          [76, 11],
          [76, 12],
          [76, 127],
          [76, 128],
          [76, 129],
          [76, 130],
          [76, 131],
          [76, 7],
          [76, 8],
          [76, 9],
          [77, 10],
          [77, 11],
          [77, 12],
          [77, 127],
          [77, 128],
          [77, 129],
          [77, 130],
          [77, 131],
          [77, 7],
          [77, 8],
          [77, 9],
          [78, 10],
          [78, 11],
          [78, 12],
          [78, 127],
          [78, 128],
          [78, 129],
          [78, 13],
          [78, 130],
          [78, 131],
          [78, 14],
          [78, 15],
          [78, 16],
          [78, 17],
          [78, 18],
          [78, 7],
          [78, 8],
          [78, 9],
          [79, 10],
          [79, 11],
          [79, 12],
          [79, 127],
          [79, 128],
          [79, 129],
          [79, 13],
          [79, 130],
          [79, 131],
          [79, 14],
          [79, 15],
          [79, 16],
          [79, 17],
          [79, 18],
          [79, 7],
          [79, 8],
          [79, 9],
          [80, 10],
          [80, 11],
          [80, 12],
          [80, 127],
          [80, 128],
          [80, 129],
          [80, 13],
          [80, 130],
          [80, 131],
          [80, 14],
          [80, 15],
          [80, 16],
          [80, 17],
          [80, 18],
          [80, 7],
          [80, 8],
          [80, 9],
          [81, 10],
          [81, 11],
          [81, 12],
          [81, 127],
          [81, 128],
          [81, 129],
          [81, 13],
          [81, 130],
          [81, 131],
          [81, 14],
          [81, 15],
          [81, 16],
          [81, 17],
          [81, 18],
          [81, 7],
          [81, 8],
          [81, 9],
          [82, 10],
          [82, 11],
          [82, 12],
          [82, 127],
          [82, 128],
          [82, 129],
          [82, 13],
          [82, 130],
          [82, 131],
          [82, 14],
          [82, 15],
          [82, 16],
          [82, 17],
          [82, 18],
          [82, 7],
          [82, 8],
          [82, 9],
          [83, 10],
          [83, 11],
          [83, 12],
          [83, 127],
          [83, 128],
          [83, 129],
          [83, 13],
          [83, 130],
          [83, 131],
          [83, 14],
          [83, 15],
          [83, 16],
          [83, 17],
          [83, 18],
          [83, 7],
          [83, 8],
          [83, 9],
          [84, 10],
          [84, 11],
          [84, 12],
          [84, 127],
          [84, 128],
          [84, 129],
          [84, 13],
          [84, 130],
          [84, 131],
          [84, 14],
          [84, 15],
          [84, 16],
          [84, 17],
          [84, 18],
          [84, 19],
          [84, 20],
          [84, 21],
          [84, 22],
          [84, 23],
          [84, 7],
          [84, 8],
          [84, 9],
          [85, 10],
          [85, 11],
          [85, 12],
          [85, 127],
          [85, 128],
          [85, 129],
          [85, 13],
          [85, 130],
          [85, 131],
          [85, 14],
          [85, 15],
          [85, 16],
          [85, 17],
          [85, 18],
          [85, 19],
          [85, 20],
          [85, 21],
          [85, 22],
          [85, 23],
          [85, 7],
          [85, 8],
          [85, 9],
          [86, 127],
          [86, 128],
          [86, 129],
          [86, 13],
          [86, 130],
          [86, 131],
          [86, 14],
          [86, 15],
          [86, 16],
          [86, 17],
          [86, 18],
          [86, 19],
          [86, 20],
          [86, 21],
          [86, 22],
          [86, 23],
          [87, 127],
          [87, 128],
          [87, 129],
          [87, 13],
          [87, 130],
          [87, 131],
          [87, 14],
          [87, 15],
          [87, 16],
          [87, 17],
          [87, 18],
          [87, 19],
          [87, 20],
          [87, 21],
          [87, 22],
          [87, 23],
          [88, 127],
          [88, 128],
          [88, 129],
          [88, 13],
          [88, 130],
          [88, 131],
          [88, 14],
          [88, 15],
          [88, 16],
          [88, 17],
          [88, 18],
          [88, 19],
          [88, 20],
          [88, 21],
          [88, 22],
          [88, 23],
          [89, 121],
          [89, 122],
          [89, 123],
          [89, 124],
          [89, 125],
          [89, 126],
          [89, 127],
          [89, 128],
          [89, 129],
          [89, 130],
          [89, 131],
          [89, 19],
          [89, 20],
          [89, 21],
          [89, 22],
          [89, 23],
          [89, 24],
          [89, 25],
          [89, 26],
          [89, 27],
          [89, 28],
          [90, 121],
          [90, 122],
          [90, 123],
          [90, 124],
          [90, 125],
          [90, 126],
          [90, 127],
          [90, 128],
          [90, 129],
          [90, 130],
          [90, 131],
          [90, 19],
          [90, 20],
          [90, 21],
          [90, 22],
          [90, 23],
          [90, 24],
          [90, 25],
          [90, 26],
          [90, 27],
          [90, 28],
          [91, 121],
          [91, 122],
          [91, 123],
          [91, 124],
          [91, 125],
          [91, 126],
          [91, 127],
          [91, 128],
          [91, 129],
          [91, 130],
          [91, 131],
          [91, 19],
          [91, 20],
          [91, 21],
          [91, 22],
          [91, 23],
          [91, 24],
          [91, 25],
          [91, 26],
          [91, 27],
          [91, 28],
          [92, 121],
          [92, 122],
          [92, 123],
          [92, 124],
          [92, 125],
          [92, 126],
          [92, 127],
          [92, 128],
          [92, 129],
          [92, 130],
          [92, 131],
          [92, 19],
          [92, 20],
          [92, 21],
          [92, 22],
          [92, 23],
          [92, 24],
          [92, 25],
          [92, 26],
          [92, 27],
          [92, 28],
          [93, 121],
          [93, 122],
          [93, 123],
          [93, 124],
          [93, 125],
          [93, 126],
          [93, 127],
          [93, 128],
          [93, 129],
          [93, 130],
          [93, 131],
          [93, 19],
          [93, 20],
          [93, 21],
          [93, 22],
          [93, 23],
          [93, 24],
          [93, 25],
          [93, 26],
          [93, 27],
          [93, 28],
          [94, 116],
          [94, 117],
          [94, 118],
          [94, 119],
          [94, 120],
          [94, 121],
          [94, 122],
          [94, 123],
          [94, 124],
          [94, 125],
          [94, 126],
          [94, 24],
          [94, 25],
          [94, 26],
          [94, 27],
          [94, 28],
          [94, 29],
          [94, 30],
          [94, 31],
          [94, 32],
          [94, 33],
          [94, 34],
          [94, 35],
          [94, 36],
          [94, 37],
          [94, 38],
          [94, 39],
          [95, 116],
          [95, 117],
          [95, 118],
          [95, 119],
          [95, 120],
          [95, 121],
          [95, 122],
          [95, 123],
          [95, 124],
          [95, 125],
          [95, 126],
          [95, 24],
          [95, 25],
          [95, 26],
          [95, 27],
          [95, 28],
          [95, 29],
          [95, 30],
          [95, 31],
          [95, 32],
          [95, 33],
          [95, 34],
          [95, 35],
          [95, 36],
          [95, 37],
          [95, 38],
          [95, 39],
          [96, 116],
          [96, 117],
          [96, 118],
          [96, 119],
          [96, 120],
          [96, 121],
          [96, 122],
          [96, 123],
          [96, 124],
          [96, 125],
          [96, 126],
          [96, 24],
          [96, 25],
          [96, 26],
          [96, 27],
          [96, 28],
          [96, 29],
          [96, 30],
          [96, 31],
          [96, 32],
          [96, 33],
          [96, 34],
          [96, 35],
          [96, 36],
          [96, 37],
          [96, 38],
          [96, 39],
          [97, 116],
          [97, 117],
          [97, 118],
          [97, 119],
          [97, 120],
          [97, 121],
          [97, 122],
          [97, 123],
          [97, 124],
          [97, 125],
          [97, 126],
          [97, 24],
          [97, 25],
          [97, 26],
          [97, 27],
          [97, 28],
          [97, 29],
          [97, 30],
          [97, 31],
          [97, 32],
          [97, 33],
          [97, 34],
          [97, 35],
          [97, 36],
          [97, 37],
          [97, 38],
          [97, 39],
          [98, 116],
          [98, 117],
          [98, 118],
          [98, 119],
          [98, 120],
          [98, 121],
          [98, 122],
          [98, 123],
          [98, 124],
          [98, 125],
          [98, 126],
          [98, 24],
          [98, 25],
          [98, 26],
          [98, 27],
          [98, 28],
          [98, 29],
          [98, 30],
          [98, 31],
          [98, 32],
          [98, 33],
          [98, 34],
          [98, 35],
          [98, 36],
          [98, 37],
          [98, 38],
          [98, 39],
          [99, 116],
          [99, 117],
          [99, 118],
          [99, 119],
          [99, 120],
          [99, 121],
          [99, 122],
          [99, 123],
          [99, 124],
          [99, 125],
          [99, 126],
          [99, 24],
          [99, 25],
          [99, 26],
          [99, 27],
          [99, 28],
          [99, 29],
          [99, 30],
          [99, 31],
          [99, 32],
          [99, 33],
          [99, 34],
          [99, 35],
          [99, 36],
          [99, 37],
          [99, 38],
          [99, 39],
        ];
        let border = [
          [0, 0],
          [0, 1],
          [0, 10],
          [0, 100],
          [0, 101],
          [0, 102],
          [0, 103],
          [0, 104],
          [0, 105],
          [0, 106],
          [0, 107],
          [0, 108],
          [0, 109],
          [0, 11],
          [0, 110],
          [0, 111],
          [0, 112],
          [0, 113],
          [0, 114],
          [0, 115],
          [0, 116],
          [0, 117],
          [0, 118],
          [0, 119],
          [0, 12],
          [0, 120],
          [0, 121],
          [0, 122],
          [0, 123],
          [0, 124],
          [0, 125],
          [0, 126],
          [0, 127],
          [0, 128],
          [0, 129],
          [0, 13],
          [0, 130],
          [0, 131],
          [0, 132],
          [0, 133],
          [0, 134],
          [0, 135],
          [0, 136],
          [0, 137],
          [0, 138],
          [0, 139],
          [0, 14],
          [0, 15],
          [0, 16],
          [0, 17],
          [0, 18],
          [0, 19],
          [0, 2],
          [0, 20],
          [0, 21],
          [0, 22],
          [0, 23],
          [0, 24],
          [0, 25],
          [0, 26],
          [0, 27],
          [0, 28],
          [0, 29],
          [0, 3],
          [0, 30],
          [0, 31],
          [0, 32],
          [0, 33],
          [0, 34],
          [0, 35],
          [0, 36],
          [0, 37],
          [0, 38],
          [0, 39],
          [0, 4],
          [0, 40],
          [0, 41],
          [0, 42],
          [0, 43],
          [0, 44],
          [0, 45],
          [0, 46],
          [0, 47],
          [0, 48],
          [0, 49],
          [0, 5],
          [0, 50],
          [0, 51],
          [0, 52],
          [0, 53],
          [0, 54],
          [0, 55],
          [0, 56],
          [0, 57],
          [0, 58],
          [0, 59],
          [0, 6],
          [0, 60],
          [0, 61],
          [0, 62],
          [0, 63],
          [0, 64],
          [0, 65],
          [0, 66],
          [0, 67],
          [0, 68],
          [0, 69],
          [0, 7],
          [0, 70],
          [0, 71],
          [0, 72],
          [0, 73],
          [0, 74],
          [0, 75],
          [0, 76],
          [0, 77],
          [0, 78],
          [0, 79],
          [0, 8],
          [0, 80],
          [0, 81],
          [0, 82],
          [0, 83],
          [0, 84],
          [0, 85],
          [0, 86],
          [0, 87],
          [0, 88],
          [0, 89],
          [0, 9],
          [0, 90],
          [0, 91],
          [0, 92],
          [0, 93],
          [0, 94],
          [0, 95],
          [0, 96],
          [0, 97],
          [0, 98],
          [0, 99],
          [139, 0],
          [139, 1],
          [139, 10],
          [139, 100],
          [139, 101],
          [139, 102],
          [139, 103],
          [139, 104],
          [139, 105],
          [139, 106],
          [139, 107],
          [139, 108],
          [139, 109],
          [139, 11],
          [139, 110],
          [139, 111],
          [139, 112],
          [139, 113],
          [139, 114],
          [139, 115],
          [139, 116],
          [139, 117],
          [139, 118],
          [139, 119],
          [139, 12],
          [139, 120],
          [139, 121],
          [139, 122],
          [139, 123],
          [139, 124],
          [139, 125],
          [139, 126],
          [139, 127],
          [139, 128],
          [139, 129],
          [139, 13],
          [139, 130],
          [139, 131],
          [139, 132],
          [139, 133],
          [139, 134],
          [139, 135],
          [139, 136],
          [139, 137],
          [139, 138],
          [139, 139],
          [139, 14],
          [139, 15],
          [139, 16],
          [139, 17],
          [139, 18],
          [139, 19],
          [139, 2],
          [139, 20],
          [139, 21],
          [139, 22],
          [139, 23],
          [139, 24],
          [139, 25],
          [139, 26],
          [139, 27],
          [139, 28],
          [139, 29],
          [139, 3],
          [139, 30],
          [139, 31],
          [139, 32],
          [139, 33],
          [139, 34],
          [139, 35],
          [139, 36],
          [139, 37],
          [139, 38],
          [139, 39],
          [139, 4],
          [139, 40],
          [139, 41],
          [139, 42],
          [139, 43],
          [139, 44],
          [139, 45],
          [139, 46],
          [139, 47],
          [139, 48],
          [139, 49],
          [139, 5],
          [139, 50],
          [139, 51],
          [139, 52],
          [139, 53],
          [139, 54],
          [139, 55],
          [139, 56],
          [139, 57],
          [139, 58],
          [139, 59],
          [139, 6],
          [139, 60],
          [139, 61],
          [139, 62],
          [139, 63],
          [139, 64],
          [139, 65],
          [139, 66],
          [139, 67],
          [139, 68],
          [139, 69],
          [139, 7],
          [139, 70],
          [139, 71],
          [139, 72],
          [139, 73],
          [139, 74],
          [139, 75],
          [139, 76],
          [139, 77],
          [139, 78],
          [139, 79],
          [139, 8],
          [139, 80],
          [139, 81],
          [139, 82],
          [139, 83],
          [139, 84],
          [139, 85],
          [139, 86],
          [139, 87],
          [139, 88],
          [139, 89],
          [139, 9],
          [139, 90],
          [139, 91],
          [139, 92],
          [139, 93],
          [139, 94],
          [139, 95],
          [139, 96],
          [139, 97],
          [139, 98],
          [139, 99],
          [0, 0],
          [100, 0],
          [101, 0],
          [102, 0],
          [103, 0],
          [104, 0],
          [105, 0],
          [106, 0],
          [107, 0],
          [108, 0],
          [109, 0],
          [10, 0],
          [110, 0],
          [111, 0],
          [112, 0],
          [113, 0],
          [114, 0],
          [115, 0],
          [116, 0],
          [117, 0],
          [118, 0],
          [119, 0],
          [11, 0],
          [120, 0],
          [121, 0],
          [122, 0],
          [123, 0],
          [124, 0],
          [125, 0],
          [126, 0],
          [127, 0],
          [128, 0],
          [129, 0],
          [12, 0],
          [130, 0],
          [131, 0],
          [132, 0],
          [133, 0],
          [134, 0],
          [135, 0],
          [136, 0],
          [137, 0],
          [138, 0],
          [139, 0],
          [13, 0],
          [14, 0],
          [15, 0],
          [16, 0],
          [17, 0],
          [18, 0],
          [19, 0],
          [1, 0],
          [20, 0],
          [21, 0],
          [22, 0],
          [23, 0],
          [24, 0],
          [25, 0],
          [26, 0],
          [27, 0],
          [28, 0],
          [29, 0],
          [2, 0],
          [30, 0],
          [31, 0],
          [32, 0],
          [33, 0],
          [34, 0],
          [35, 0],
          [36, 0],
          [37, 0],
          [38, 0],
          [39, 0],
          [3, 0],
          [40, 0],
          [41, 0],
          [42, 0],
          [43, 0],
          [44, 0],
          [45, 0],
          [46, 0],
          [47, 0],
          [48, 0],
          [49, 0],
          [4, 0],
          [50, 0],
          [51, 0],
          [52, 0],
          [53, 0],
          [54, 0],
          [55, 0],
          [56, 0],
          [57, 0],
          [58, 0],
          [59, 0],
          [5, 0],
          [60, 0],
          [61, 0],
          [62, 0],
          [63, 0],
          [64, 0],
          [65, 0],
          [66, 0],
          [67, 0],
          [68, 0],
          [69, 0],
          [6, 0],
          [70, 0],
          [71, 0],
          [72, 0],
          [73, 0],
          [74, 0],
          [75, 0],
          [76, 0],
          [77, 0],
          [78, 0],
          [79, 0],
          [7, 0],
          [80, 0],
          [81, 0],
          [82, 0],
          [83, 0],
          [84, 0],
          [85, 0],
          [86, 0],
          [87, 0],
          [88, 0],
          [89, 0],
          [8, 0],
          [90, 0],
          [91, 0],
          [92, 0],
          [93, 0],
          [94, 0],
          [95, 0],
          [96, 0],
          [97, 0],
          [98, 0],
          [99, 0],
          [9, 0],
          [0, 139],
          [100, 139],
          [101, 139],
          [102, 139],
          [103, 139],
          [104, 139],
          [105, 139],
          [106, 139],
          [107, 139],
          [108, 139],
          [109, 139],
          [10, 139],
          [110, 139],
          [111, 139],
          [112, 139],
          [113, 139],
          [114, 139],
          [115, 139],
          [116, 139],
          [117, 139],
          [118, 139],
          [119, 139],
          [11, 139],
          [120, 139],
          [121, 139],
          [122, 139],
          [123, 139],
          [124, 139],
          [125, 139],
          [126, 139],
          [127, 139],
          [128, 139],
          [129, 139],
          [12, 139],
          [130, 139],
          [131, 139],
          [132, 139],
          [133, 139],
          [134, 139],
          [135, 139],
          [136, 139],
          [137, 139],
          [138, 139],
          [139, 139],
          [13, 139],
          [14, 139],
          [15, 139],
          [16, 139],
          [17, 139],
          [18, 139],
          [19, 139],
          [1, 139],
          [20, 139],
          [21, 139],
          [22, 139],
          [23, 139],
          [24, 139],
          [25, 139],
          [26, 139],
          [27, 139],
          [28, 139],
          [29, 139],
          [2, 139],
          [30, 139],
          [31, 139],
          [32, 139],
          [33, 139],
          [34, 139],
          [35, 139],
          [36, 139],
          [37, 139],
          [38, 139],
          [39, 139],
          [3, 139],
          [40, 139],
          [41, 139],
          [42, 139],
          [43, 139],
          [44, 139],
          [45, 139],
          [46, 139],
          [47, 139],
          [48, 139],
          [49, 139],
          [4, 139],
          [50, 139],
          [51, 139],
          [52, 139],
          [53, 139],
          [54, 139],
          [55, 139],
          [56, 139],
          [57, 139],
          [58, 139],
          [59, 139],
          [5, 139],
          [60, 139],
          [61, 139],
          [62, 139],
          [63, 139],
          [64, 139],
          [65, 139],
          [66, 139],
          [67, 139],
          [68, 139],
          [69, 139],
          [6, 139],
          [70, 139],
          [71, 139],
          [72, 139],
          [73, 139],
          [74, 139],
          [75, 139],
          [76, 139],
          [77, 139],
          [78, 139],
          [79, 139],
          [7, 139],
          [80, 139],
          [81, 139],
          [82, 139],
          [83, 139],
          [84, 139],
          [85, 139],
          [86, 139],
          [87, 139],
          [88, 139],
          [89, 139],
          [8, 139],
          [90, 139],
          [91, 139],
          [92, 139],
          [93, 139],
          [94, 139],
          [95, 139],
          [96, 139],
          [97, 139],
          [98, 139],
          [99, 139],
          [9, 139],
        ];
        let brown = [
          [100, 100],
          [100, 101],
          [100, 102],
          [100, 103],
          [100, 104],
          [100, 105],
          [100, 106],
          [100, 107],
          [100, 108],
          [100, 109],
          [100, 110],
          [100, 94],
          [100, 95],
          [100, 96],
          [100, 97],
          [100, 98],
          [100, 99],
          [101, 100],
          [101, 101],
          [101, 102],
          [101, 103],
          [101, 104],
          [101, 105],
          [101, 106],
          [101, 107],
          [101, 108],
          [101, 109],
          [101, 110],
          [101, 94],
          [101, 95],
          [101, 96],
          [101, 97],
          [101, 98],
          [101, 99],
          [102, 100],
          [102, 101],
          [102, 102],
          [102, 103],
          [102, 104],
          [102, 105],
          [102, 106],
          [102, 107],
          [102, 108],
          [102, 109],
          [102, 110],
          [102, 94],
          [102, 95],
          [102, 96],
          [102, 97],
          [102, 98],
          [102, 99],
          [103, 100],
          [103, 101],
          [103, 102],
          [103, 103],
          [103, 104],
          [103, 105],
          [103, 106],
          [103, 107],
          [103, 108],
          [103, 109],
          [103, 110],
          [103, 94],
          [103, 95],
          [103, 96],
          [103, 97],
          [103, 98],
          [103, 99],
          [104, 100],
          [104, 101],
          [104, 102],
          [104, 103],
          [104, 104],
          [104, 105],
          [104, 106],
          [104, 107],
          [104, 108],
          [104, 109],
          [104, 110],
          [104, 94],
          [104, 95],
          [104, 96],
          [104, 97],
          [104, 98],
          [104, 99],
          [105, 83],
          [105, 84],
          [105, 85],
          [105, 86],
          [105, 87],
          [105, 88],
          [105, 89],
          [105, 90],
          [105, 91],
          [105, 92],
          [105, 93],
          [106, 83],
          [106, 84],
          [106, 85],
          [106, 86],
          [106, 87],
          [106, 88],
          [106, 89],
          [106, 90],
          [106, 91],
          [106, 92],
          [106, 93],
          [107, 83],
          [107, 84],
          [107, 85],
          [107, 86],
          [107, 87],
          [107, 88],
          [107, 89],
          [107, 90],
          [107, 91],
          [107, 92],
          [107, 93],
          [108, 83],
          [108, 84],
          [108, 85],
          [108, 86],
          [108, 87],
          [108, 88],
          [108, 89],
          [108, 90],
          [108, 91],
          [108, 92],
          [108, 93],
          [109, 83],
          [109, 84],
          [109, 85],
          [109, 86],
          [109, 87],
          [109, 88],
          [109, 89],
          [109, 90],
          [109, 91],
          [109, 92],
          [109, 93],
          [52, 121],
          [52, 122],
          [52, 123],
          [52, 124],
          [52, 125],
          [52, 126],
          [53, 121],
          [53, 122],
          [53, 123],
          [53, 124],
          [53, 125],
          [53, 126],
          [54, 121],
          [54, 122],
          [54, 123],
          [54, 124],
          [54, 125],
          [54, 126],
          [55, 121],
          [55, 122],
          [55, 123],
          [55, 124],
          [55, 125],
          [55, 126],
          [56, 121],
          [56, 122],
          [56, 123],
          [56, 124],
          [56, 125],
          [56, 126],
          [57, 121],
          [57, 122],
          [57, 123],
          [57, 124],
          [57, 125],
          [57, 126],
          [58, 121],
          [58, 122],
          [58, 123],
          [58, 124],
          [58, 125],
          [58, 126],
          [59, 121],
          [59, 122],
          [59, 123],
          [59, 124],
          [59, 125],
          [59, 126],
          [60, 121],
          [60, 122],
          [60, 123],
          [60, 124],
          [60, 125],
          [60, 126],
          [61, 121],
          [61, 122],
          [61, 123],
          [61, 124],
          [61, 125],
          [61, 126],
          [62, 121],
          [62, 122],
          [62, 123],
          [62, 124],
          [62, 125],
          [62, 126],
          [63, 121],
          [63, 122],
          [63, 123],
          [63, 124],
          [63, 125],
          [63, 126],
          [64, 121],
          [64, 122],
          [64, 123],
          [64, 124],
          [64, 125],
          [64, 126],
          [65, 121],
          [65, 122],
          [65, 123],
          [65, 124],
          [65, 125],
          [65, 126],
          [66, 121],
          [66, 122],
          [66, 123],
          [66, 124],
          [66, 125],
          [66, 126],
          [67, 121],
          [67, 122],
          [67, 123],
          [67, 124],
          [67, 125],
          [67, 126],
          [68, 121],
          [68, 122],
          [68, 123],
          [68, 124],
          [68, 125],
          [68, 126],
          [69, 121],
          [69, 122],
          [69, 123],
          [69, 124],
          [69, 125],
          [69, 126],
          [70, 121],
          [70, 122],
          [70, 123],
          [70, 124],
          [70, 125],
          [70, 126],
          [71, 121],
          [71, 122],
          [71, 123],
          [71, 124],
          [71, 125],
          [71, 126],
          [72, 121],
          [72, 122],
          [72, 123],
          [72, 124],
          [72, 125],
          [72, 126],
          [73, 121],
          [73, 122],
          [73, 123],
          [73, 124],
          [73, 125],
          [73, 126],
          [74, 121],
          [74, 122],
          [74, 123],
          [74, 124],
          [74, 125],
          [74, 126],
          [75, 121],
          [75, 122],
          [75, 123],
          [75, 124],
          [75, 125],
          [75, 126],
          [76, 121],
          [76, 122],
          [76, 123],
          [76, 124],
          [76, 125],
          [76, 126],
          [77, 121],
          [77, 122],
          [77, 123],
          [77, 124],
          [77, 125],
          [77, 126],
          [78, 111],
          [78, 112],
          [78, 113],
          [78, 114],
          [78, 115],
          [78, 116],
          [78, 117],
          [78, 118],
          [78, 119],
          [78, 120],
          [78, 121],
          [78, 122],
          [78, 123],
          [78, 124],
          [78, 125],
          [78, 126],
          [79, 111],
          [79, 112],
          [79, 113],
          [79, 114],
          [79, 115],
          [79, 116],
          [79, 117],
          [79, 118],
          [79, 119],
          [79, 120],
          [79, 121],
          [79, 122],
          [79, 123],
          [79, 124],
          [79, 125],
          [79, 126],
          [80, 111],
          [80, 112],
          [80, 113],
          [80, 114],
          [80, 115],
          [80, 116],
          [80, 117],
          [80, 118],
          [80, 119],
          [80, 120],
          [80, 121],
          [80, 122],
          [80, 123],
          [80, 124],
          [80, 125],
          [80, 126],
          [81, 111],
          [81, 112],
          [81, 113],
          [81, 114],
          [81, 115],
          [81, 116],
          [81, 117],
          [81, 118],
          [81, 119],
          [81, 120],
          [81, 121],
          [81, 122],
          [81, 123],
          [81, 124],
          [81, 125],
          [81, 126],
          [82, 111],
          [82, 112],
          [82, 113],
          [82, 114],
          [82, 115],
          [82, 116],
          [82, 117],
          [82, 118],
          [82, 119],
          [82, 120],
          [82, 121],
          [82, 122],
          [82, 123],
          [82, 124],
          [82, 125],
          [82, 126],
          [83, 105],
          [83, 106],
          [83, 107],
          [83, 108],
          [83, 109],
          [83, 110],
          [83, 111],
          [83, 112],
          [83, 113],
          [83, 114],
          [83, 115],
          [83, 116],
          [83, 117],
          [83, 118],
          [83, 119],
          [83, 120],
          [83, 121],
          [83, 122],
          [83, 123],
          [83, 124],
          [83, 125],
          [83, 126],
          [84, 105],
          [84, 106],
          [84, 107],
          [84, 108],
          [84, 109],
          [84, 110],
          [84, 111],
          [84, 112],
          [84, 113],
          [84, 114],
          [84, 115],
          [84, 116],
          [84, 117],
          [84, 118],
          [84, 119],
          [84, 120],
          [84, 121],
          [84, 122],
          [84, 123],
          [84, 124],
          [84, 125],
          [84, 126],
          [85, 105],
          [85, 106],
          [85, 107],
          [85, 108],
          [85, 109],
          [85, 110],
          [85, 111],
          [85, 112],
          [85, 113],
          [85, 114],
          [85, 115],
          [85, 116],
          [85, 117],
          [85, 118],
          [85, 119],
          [85, 120],
          [85, 121],
          [85, 122],
          [85, 123],
          [85, 124],
          [85, 125],
          [85, 126],
          [86, 105],
          [86, 106],
          [86, 107],
          [86, 108],
          [86, 109],
          [86, 110],
          [86, 111],
          [86, 112],
          [86, 113],
          [86, 114],
          [86, 115],
          [86, 116],
          [86, 117],
          [86, 118],
          [86, 119],
          [86, 120],
          [86, 121],
          [86, 122],
          [86, 123],
          [86, 124],
          [86, 125],
          [86, 126],
          [87, 105],
          [87, 106],
          [87, 107],
          [87, 108],
          [87, 109],
          [87, 110],
          [87, 111],
          [87, 112],
          [87, 113],
          [87, 114],
          [87, 115],
          [87, 116],
          [87, 117],
          [87, 118],
          [87, 119],
          [87, 120],
          [87, 121],
          [87, 122],
          [87, 123],
          [87, 124],
          [87, 125],
          [87, 126],
          [88, 105],
          [88, 106],
          [88, 107],
          [88, 108],
          [88, 109],
          [88, 110],
          [88, 111],
          [88, 112],
          [88, 113],
          [88, 114],
          [88, 115],
          [88, 116],
          [88, 117],
          [88, 118],
          [88, 119],
          [88, 120],
          [88, 121],
          [88, 122],
          [88, 123],
          [88, 124],
          [88, 125],
          [88, 126],
          [89, 105],
          [89, 106],
          [89, 107],
          [89, 108],
          [89, 109],
          [89, 110],
          [89, 111],
          [89, 112],
          [89, 113],
          [89, 114],
          [89, 115],
          [89, 116],
          [89, 117],
          [89, 118],
          [89, 119],
          [89, 120],
          [90, 105],
          [90, 106],
          [90, 107],
          [90, 108],
          [90, 109],
          [90, 110],
          [90, 111],
          [90, 112],
          [90, 113],
          [90, 114],
          [90, 115],
          [90, 116],
          [90, 117],
          [90, 118],
          [90, 119],
          [90, 120],
          [91, 105],
          [91, 106],
          [91, 107],
          [91, 108],
          [91, 109],
          [91, 110],
          [91, 111],
          [91, 112],
          [91, 113],
          [91, 114],
          [91, 115],
          [91, 116],
          [91, 117],
          [91, 118],
          [91, 119],
          [91, 120],
          [92, 105],
          [92, 106],
          [92, 107],
          [92, 108],
          [92, 109],
          [92, 110],
          [92, 111],
          [92, 112],
          [92, 113],
          [92, 114],
          [92, 115],
          [92, 116],
          [92, 117],
          [92, 118],
          [92, 119],
          [92, 120],
          [93, 105],
          [93, 106],
          [93, 107],
          [93, 108],
          [93, 109],
          [93, 110],
          [93, 111],
          [93, 112],
          [93, 113],
          [93, 114],
          [93, 115],
          [93, 116],
          [93, 117],
          [93, 118],
          [93, 119],
          [93, 120],
          [94, 100],
          [94, 101],
          [94, 102],
          [94, 103],
          [94, 104],
          [94, 105],
          [94, 106],
          [94, 107],
          [94, 108],
          [94, 109],
          [94, 110],
          [94, 111],
          [94, 112],
          [94, 113],
          [94, 114],
          [94, 115],
          [95, 100],
          [95, 101],
          [95, 102],
          [95, 103],
          [95, 104],
          [95, 105],
          [95, 106],
          [95, 107],
          [95, 108],
          [95, 109],
          [95, 110],
          [95, 111],
          [95, 112],
          [95, 113],
          [95, 114],
          [95, 115],
          [96, 100],
          [96, 101],
          [96, 102],
          [96, 103],
          [96, 104],
          [96, 105],
          [96, 106],
          [96, 107],
          [96, 108],
          [96, 109],
          [96, 110],
          [96, 111],
          [96, 112],
          [96, 113],
          [96, 114],
          [96, 115],
          [97, 100],
          [97, 101],
          [97, 102],
          [97, 103],
          [97, 104],
          [97, 105],
          [97, 106],
          [97, 107],
          [97, 108],
          [97, 109],
          [97, 110],
          [97, 111],
          [97, 112],
          [97, 113],
          [97, 114],
          [97, 115],
          [98, 100],
          [98, 101],
          [98, 102],
          [98, 103],
          [98, 104],
          [98, 105],
          [98, 106],
          [98, 107],
          [98, 108],
          [98, 109],
          [98, 110],
          [98, 111],
          [98, 112],
          [98, 113],
          [98, 114],
          [98, 115],
          [99, 100],
          [99, 101],
          [99, 102],
          [99, 103],
          [99, 104],
          [99, 105],
          [99, 106],
          [99, 107],
          [99, 108],
          [99, 109],
          [99, 110],
          [99, 111],
          [99, 112],
          [99, 113],
          [99, 114],
          [99, 115],
        ];
        let startX = 200,
          startY = 577,
          patternPixels = [],
          isOn = true;

        function fillRect(x, y, color, that) {
          const n2 = new PIXI.Graphics();
          n2.xCoord = x + 200;
          n2.yCoord = y + 577;

          n2.beginFill(color, 0.8);
          n2.drawRoundedRect(n2.xCoord + 0.25, n2.yCoord + 0.25, 0.5, 0.5, 5);
          n2.endFill();
          that.addChild(n2);
          patternPixels.push(n2);
        }

        function drawPattern(that) {
          blackOnly.forEach((coords) => {
            fillRect(coords[0], coords[1], 0xf451e7, that);
          });

          border.forEach((coords) => {
            fillRect(coords[0], coords[1], 0xff0000, that);
          });

          brown.forEach((coords) => {
            fillRect(coords[0], coords[1], 0x7aec38, that);
          });
          isOn = true;
        }

        function destroyPattern() {
          for (let pixel of patternPixels) {
            pixel.destroy();
            isOn = false;
          }
          patternPixels = [];
        }

        drawPattern(this);

        for (let button of Array.from(
          document.getElementsByTagName("button")
        )) {
          let hasShopClass = Array.from(button.classList).some((cls) =>
            cls.includes("_shop_button")
          );

          if (hasShopClass && button.parentElement) {
            const newBtn = button.cloneNode();
            button.parentElement.prepend(newBtn);
            const img = document.createElement("img");
            img.src = "https://notpixel-helpers.s3.eu-central-1.amazonaws.com/egg.png";
            img.style.height = "80%";
            newBtn.appendChild(img);
            newBtn.style.color = "#FFFFFF";

            newBtn.onclick = () => {
              if (isOn) {
                img.style.opacity = 0.5;
                destroyPattern();
              } else {
                img.style.opacity = 1;
                drawPattern(this);
              }
            };
            break;
          }
        }

        return !s && h && h.clamp(), e && n && this.moveCenter(n), this;
      }
      fitWorld(t) {
        let e;
        t && (e = this.center),
          (this.scale.x = this.screenWidth / this.worldWidth),
          (this.scale.y = this.screenHeight / this.worldHeight),
          this.scale.x < this.scale.y
            ? (this.scale.y = this.scale.x)
            : (this.scale.x = this.scale.y);
        const i = this.plugins.get("clamp-zoom", !0);
        return i && i.clamp(), t && e && this.moveCenter(e), this;
      }
      fit(t, e = this.worldWidth, i = this.worldHeight) {
        let s;
        t && (s = this.center),
          (this.scale.x = this.screenWidth / e),
          (this.scale.y = this.screenHeight / i),
          this.scale.x < this.scale.y
            ? (this.scale.y = this.scale.x)
            : (this.scale.x = this.scale.y);
        const n = this.plugins.get("clamp-zoom", !0);
        return n && n.clamp(), t && s && this.moveCenter(s), this;
      }
      setZoom(t, e) {
        let i;
        e && (i = this.center), this.scale.set(t);
        const s = this.plugins.get("clamp-zoom", !0);
        return s && s.clamp(), e && i && this.moveCenter(i), this;
      }
      zoomPercent(t, e) {
        return this.setZoom(this.scale.x + this.scale.x * t, e);
      }
      zoom(t, e) {
        return this.fitWidth(t + this.worldScreenWidth, e), this;
      }
      get scaled() {
        return this.scale.x;
      }
      set scaled(t) {
        this.setZoom(t, !0);
      }
      snapZoom(t) {
        return this.plugins.add("snap-zoom", new X(this, t)), this;
      }
      OOB() {
        return {
          left: this.left < 0,
          right: this.right > this.worldWidth,
          top: this.top < 0,
          bottom: this.bottom > this.worldHeight,
          cornerPoint: new e.Point(
            this.worldWidth * this.scale.x - this.screenWidth,
            this.worldHeight * this.scale.y - this.screenHeight
          ),
        };
      }
      get right() {
        return -this.x / this.scale.x + this.worldScreenWidth;
      }
      set right(t) {
        (this.x = -t * this.scale.x + this.screenWidth), this.plugins.reset();
      }
      get left() {
        return -this.x / this.scale.x;
      }
      set left(t) {
        (this.x = -t * this.scale.x), this.plugins.reset();
      }
      get top() {
        return -this.y / this.scale.y;
      }
      set top(t) {
        (this.y = -t * this.scale.y), this.plugins.reset();
      }
      get bottom() {
        return -this.y / this.scale.y + this.worldScreenHeight;
      }
      set bottom(t) {
        (this.y = -t * this.scale.y + this.screenHeight), this.plugins.reset();
      }
      get dirty() {
        return !!this._dirty;
      }
      set dirty(t) {
        this._dirty = t;
      }
      get forceHitArea() {
        return this._forceHitArea;
      }
      set forceHitArea(t) {
        t
          ? ((this._forceHitArea = t), (this.hitArea = t))
          : ((this._forceHitArea = null),
            (this.hitArea = new e.Rectangle(
              0,
              0,
              this.worldWidth,
              this.worldHeight
            )));
      }
      drag(t) {
        return this.plugins.add("drag", new H(this, t)), this;
      }
      clamp(t) {
        return this.plugins.add("clamp", new w(this, t)), this;
      }
      decelerate(t) {
        return this.plugins.add("decelerate", new W(this, t)), this;
      }
      bounce(t) {
        return this.plugins.add("bounce", new m(this, t)), this;
      }
      pinch(t) {
        return this.plugins.add("pinch", new O(this, t)), this;
      }
      snap(t, e, i) {
        return this.plugins.add("snap", new z(this, t, e, i)), this;
      }
      follow(t, e) {
        return this.plugins.add("follow", new S(this, t, e)), this;
      }
      wheel(t) {
        return this.plugins.add("wheel", new A(this, t)), this;
      }
      animate(t) {
        return this.plugins.add("animate", new c(this, t)), this;
      }
      clampZoom(t) {
        return this.plugins.add("clamp-zoom", new f(this, t)), this;
      }
      mouseEdges(t) {
        return this.plugins.add("mouse-edges", new C(this, t)), this;
      }
      get pause() {
        return !!this._pause;
      }
      set pause(t) {
        (this._pause = t),
          (this.lastViewport = null),
          (this.moving = !1),
          (this.zooming = !1),
          t && this.input.pause();
      }
      ensureVisible(t, e, i, s, n) {
        n &&
          (i > this.worldScreenWidth || s > this.worldScreenHeight) &&
          (this.fit(!0, i, s),
          this.emit("zoomed", {
            viewport: this,
            type: "ensureVisible",
          }));
        let h = !1;
        t < this.left
          ? ((this.left = t), (h = !0))
          : t + i > this.right && ((this.right = t + i), (h = !0)),
          e < this.top
            ? ((this.top = e), (h = !0))
            : e + s > this.bottom && ((this.bottom = e + s), (h = !0)),
          h &&
            this.emit("moved", {
              viewport: this,
              type: "ensureVisible",
            });
      }
    }
    (t.Animate = c),
      (t.Bounce = m),
      (t.Clamp = w),
      (t.ClampZoom = f),
      (t.Decelerate = W),
      (t.Drag = H),
      (t.Follow = S),
      (t.InputManager = D),
      (t.MouseEdges = C),
      (t.Pinch = O),
      (t.Plugin = n),
      (t.PluginManager = E),
      (t.Snap = z),
      (t.SnapZoom = X),
      (t.Viewport = B),
      (t.Wheel = A),
      Object.defineProperty(t, "__esModule", {
        value: !0,
      });
  }),
  "undefined" != typeof pixi_viewport &&
    Object.assign(this.PIXI, pixi_viewport);
